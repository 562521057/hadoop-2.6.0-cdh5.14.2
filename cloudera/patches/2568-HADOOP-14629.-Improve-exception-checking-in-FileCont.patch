From 0957195398c9a91c49f4e50fbb18d29d3ea3b8db Mon Sep 17 00:00:00 2001
From: Akira Ajisaka <aajisaka@apache.org>
Date: Wed, 12 Jul 2017 11:35:50 +0900
Subject: [PATCH 2568/2748] HADOOP-14629. Improve exception checking in
 FileContext related JUnit tests. Contributed by
 Andras Bokor.

(cherry picked from commit 9144fd9e9b5d84d71158451428341746a6567152)
(cherry picked from commit 2653cf4466ab99960ea65a937ea01fc4d4ca2f00)
(cherry picked from commit d1fb4948d216a9529422768eee24dcd144f201a9)

Change-Id: I188fac51616be06866d9be286a311efaedbbb495
---
 .../fs/FileContextMainOperationsBaseTest.java      |   64 ++++++++++----------
 .../fs/TestHDFSFileContextMainOperations.java      |   46 +++++++-------
 2 files changed, 56 insertions(+), 54 deletions(-)

diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java
index 27bfec7..71f10dd 100644
--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java
+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/FileContextMainOperationsBaseTest.java
@@ -867,14 +867,14 @@ public void testRenameNonExistentPath() throws Exception {
     Path src = getTestRootPath(fc, "test/hadoop/nonExistent");
     Path dst = getTestRootPath(fc, "test/new/newpath");
     try {
-      rename(src, dst, false, false, false, Rename.NONE);
+      rename(src, dst, false, false, Rename.NONE);
       Assert.fail("Should throw FileNotFoundException");
     } catch (IOException e) {
       Assert.assertTrue(unwrapException(e) instanceof FileNotFoundException);
     }
 
     try {
-      rename(src, dst, false, false, false, Rename.OVERWRITE);
+      rename(src, dst, false, false, Rename.OVERWRITE);
       Assert.fail("Should throw FileNotFoundException");
     } catch (IOException e) {
       Assert.assertTrue(unwrapException(e) instanceof FileNotFoundException);
@@ -890,14 +890,14 @@ public void testRenameFileToNonExistentDirectory() throws Exception {
     Path dst = getTestRootPath(fc, "test/nonExistent/newfile");
     
     try {
-      rename(src, dst, false, true, false, Rename.NONE);
+      rename(src, dst, true, false, Rename.NONE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException e) {
       Assert.assertTrue(unwrapException(e) instanceof FileNotFoundException);
     }
 
     try {
-      rename(src, dst, false, true, false, Rename.OVERWRITE);
+      rename(src, dst, true, false, Rename.OVERWRITE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException e) {
       Assert.assertTrue(unwrapException(e) instanceof FileNotFoundException);
@@ -914,13 +914,13 @@ public void testRenameFileToDestinationWithParentFile() throws Exception {
     createFile(dst.getParent());
     
     try {
-      rename(src, dst, false, true, false, Rename.NONE);
+      rename(src, dst, true, false, Rename.NONE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException e) {
     }
 
     try {
-      rename(src, dst, false, true, false, Rename.OVERWRITE);
+      rename(src, dst, true, false, Rename.OVERWRITE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException e) {
     }
@@ -934,7 +934,7 @@ public void testRenameFileToExistingParent() throws Exception {
     createFile(src);
     Path dst = getTestRootPath(fc, "test/new/newfile");
     fc.mkdir(dst.getParent(), FileContext.DEFAULT_PERM, true);
-    rename(src, dst, true, false, true, Rename.OVERWRITE);
+    rename(src, dst, false, true, Rename.OVERWRITE);
   }
 
   @Test
@@ -943,14 +943,14 @@ public void testRenameFileToItself() throws Exception {
     Path src = getTestRootPath(fc, "test/hadoop/file");
     createFile(src);
     try {
-      rename(src, src, false, true, false, Rename.NONE);
+      rename(src, src, true, true, Rename.NONE);
       Assert.fail("Renamed file to itself");
     } catch (IOException e) {
       Assert.assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
     }
     // Also fails with overwrite
     try {
-      rename(src, src, false, true, false, Rename.OVERWRITE);
+      rename(src, src, true, true, Rename.OVERWRITE);
       Assert.fail("Renamed file to itself");
     } catch (IOException e) {
       Assert.assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
@@ -968,14 +968,14 @@ public void testRenameFileAsExistingFile() throws Exception {
     
     // Fails without overwrite option
     try {
-      rename(src, dst, false, true, false, Rename.NONE);
+      rename(src, dst, true, true, Rename.NONE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException e) {
       Assert.assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
     }
     
     // Succeeds with overwrite option
-    rename(src, dst, true, false, true, Rename.OVERWRITE);
+    rename(src, dst, false, true, Rename.OVERWRITE);
   }
 
   @Test
@@ -989,14 +989,14 @@ public void testRenameFileAsExistingDirectory() throws Exception {
     
     // Fails without overwrite option
     try {
-      rename(src, dst, false, false, true, Rename.NONE);
+      rename(src, dst, true, true, Rename.NONE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException e) {
     }
     
     // File cannot be renamed as directory
     try {
-      rename(src, dst, false, false, true, Rename.OVERWRITE);
+      rename(src, dst, true, true, Rename.OVERWRITE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException e) {
     }
@@ -1008,14 +1008,14 @@ public void testRenameDirectoryToItself() throws Exception {
     Path src = getTestRootPath(fc, "test/hadoop/dir");
     fc.mkdir(src, FileContext.DEFAULT_PERM, true);
     try {
-      rename(src, src, false, true, false, Rename.NONE);
+      rename(src, src, true, true, Rename.NONE);
       Assert.fail("Renamed directory to itself");
     } catch (IOException e) {
       Assert.assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
     }
     // Also fails with overwrite
     try {
-      rename(src, src, false, true, false, Rename.OVERWRITE);
+      rename(src, src, true, true, Rename.OVERWRITE);
       Assert.fail("Renamed directory to itself");
     } catch (IOException e) {
       Assert.assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);      
@@ -1031,14 +1031,14 @@ public void testRenameDirectoryToNonExistentParent() throws Exception {
     Path dst = getTestRootPath(fc, "test/nonExistent/newdir");
     
     try {
-      rename(src, dst, false, true, false, Rename.NONE);
+      rename(src, dst, true, false, Rename.NONE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException e) {
       Assert.assertTrue(unwrapException(e) instanceof FileNotFoundException);
     }
 
     try {
-      rename(src, dst, false, true, false, Rename.OVERWRITE);
+      rename(src, dst, true, false, Rename.OVERWRITE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException e) {
       Assert.assertTrue(unwrapException(e) instanceof FileNotFoundException);
@@ -1063,7 +1063,7 @@ private void testRenameDirectoryAsNonExistentDirectory(Rename... options) throws
     Path dst = getTestRootPath(fc, "test/new/newdir");
     fc.mkdir(dst.getParent(), FileContext.DEFAULT_PERM, true);
     
-    rename(src, dst, true, false, true, options);
+    rename(src, dst, false, true, options);
     Assert.assertFalse("Nested file1 exists", 
         exists(fc, getTestRootPath(fc, "test/hadoop/dir/file1")));
     Assert.assertFalse("Nested file2 exists", 
@@ -1088,14 +1088,14 @@ public void testRenameDirectoryAsEmptyDirectory() throws Exception {
 
     // Fails without overwrite option
     try {
-      rename(src, dst, false, true, false, Rename.NONE);
+      rename(src, dst, true, true, Rename.NONE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException e) {
       // Expected (cannot over-write non-empty destination)
       Assert.assertTrue(unwrapException(e) instanceof FileAlreadyExistsException);
     }
     // Succeeds with the overwrite option
-    rename(src, dst, true, false, true, Rename.OVERWRITE);
+    rename(src, dst, false, true, Rename.OVERWRITE);
   }
 
   @Test
@@ -1112,7 +1112,7 @@ public void testRenameDirectoryAsNonEmptyDirectory() throws Exception {
     createFile(getTestRootPath(fc, "test/new/newdir/file1"));
     // Fails without overwrite option
     try {
-      rename(src, dst, false, true, false, Rename.NONE);
+      rename(src, dst, true, true, Rename.NONE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException e) {
       // Expected (cannot over-write non-empty destination)
@@ -1120,7 +1120,7 @@ public void testRenameDirectoryAsNonEmptyDirectory() throws Exception {
     }
     // Fails even with the overwrite option
     try {
-      rename(src, dst, false, true, false, Rename.OVERWRITE);
+      rename(src, dst, true, true, Rename.OVERWRITE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException ex) {
       // Expected (cannot over-write non-empty destination)
@@ -1137,13 +1137,13 @@ public void testRenameDirectoryAsFile() throws Exception {
     createFile(dst);
     // Fails without overwrite option
     try {
-      rename(src, dst, false, true, true, Rename.NONE);
+      rename(src, dst, true, true, Rename.NONE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException e) {
     }
     // Directory cannot be renamed as existing file
     try {
-      rename(src, dst, false, true, true, Rename.OVERWRITE);
+      rename(src, dst, true, true, Rename.OVERWRITE);
       Assert.fail("Expected exception was not thrown");
     } catch (IOException ex) {
     }
@@ -1205,14 +1205,14 @@ protected void createFile(Path path) throws IOException {
     out.close();
   }
 
-  private void rename(Path src, Path dst, boolean renameShouldSucceed,
-      boolean srcExists, boolean dstExists, Rename... options)
-      throws IOException {
-    fc.rename(src, dst, options);
-    if (!renameShouldSucceed)
-      Assert.fail("rename should have thrown exception");
-    Assert.assertEquals("Source exists", srcExists, exists(fc, src));
-    Assert.assertEquals("Destination exists", dstExists, exists(fc, dst));
+  protected void rename(Path src, Path dst, boolean srcExists,
+      boolean dstExists, Rename... options) throws IOException {
+    try {
+      fc.rename(src, dst, options);
+    } finally {
+      Assert.assertEquals("Source exists", srcExists, exists(fc, src));
+      Assert.assertEquals("Destination exists", dstExists, exists(fc, dst));
+    }
   }
   
   private boolean containsPath(Path path, FileStatus[] filteredPaths)
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestHDFSFileContextMainOperations.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestHDFSFileContextMainOperations.java
index 8a215b0..9c99127 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestHDFSFileContextMainOperations.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestHDFSFileContextMainOperations.java
@@ -32,6 +32,7 @@
 import org.apache.hadoop.hdfs.HdfsConfiguration;
 import org.apache.hadoop.hdfs.MiniDFSCluster;
 import org.apache.hadoop.hdfs.protocol.HdfsConstants;
+import org.apache.hadoop.hdfs.protocol.NSQuotaExceededException;
 import org.apache.hadoop.ipc.RemoteException;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.junit.After;
@@ -169,9 +170,9 @@ public void testRenameWithQuota() throws Exception {
      * accommodates rename
      */
     // rename uses dstdir quota=1
-    rename(src1, dst1, false, true, false, Rename.NONE);
+    rename(src1, dst1, false, true, Rename.NONE);
     // rename reuses dstdir quota=1
-    rename(src2, dst1, true, true, false, Rename.OVERWRITE);
+    rename(src2, dst1, false, true, Rename.OVERWRITE);
 
     /*
      * Test2: src does not exceed quota and dst has *no* quota to accommodate 
@@ -179,7 +180,10 @@ public void testRenameWithQuota() throws Exception {
      */
     // dstDir quota = 1 and dst1 already uses it
     createFile(src2);
-    rename(src2, dst2, false, false, true, Rename.NONE);
+    try {
+      rename(src2, dst2, true, false, Rename.NONE);
+      fail("NSQuotaExceededException excepted");
+    } catch (NSQuotaExceededException e) {}
 
     /*
      * Test3: src exceeds quota and dst has *no* quota to accommodate rename
@@ -187,7 +191,11 @@ public void testRenameWithQuota() throws Exception {
      */
     // src1 has no quota to accommodate new rename node
     fs.setQuota(src1.getParent(), 1, HdfsConstants.QUOTA_DONT_SET);
-    rename(dst1, src1, false, false, true, Rename.NONE);
+
+    try {
+      rename(dst1, src1, true, false, Rename.NONE);
+      fail("NSQuotaExceededException excepted");
+    } catch (NSQuotaExceededException e) {}
     
     /*
      * Test4: src exceeds quota and dst has *no* quota to accommodate rename
@@ -198,16 +206,23 @@ public void testRenameWithQuota() throws Exception {
     fs.setQuota(src1.getParent(), 100, HdfsConstants.QUOTA_DONT_SET);
     createFile(src1);
     fs.setQuota(src1.getParent(), 1, HdfsConstants.QUOTA_DONT_SET);
-    rename(dst1, src1, true, true, false, Rename.OVERWRITE);
+    rename(dst1, src1, false, true, Rename.OVERWRITE);
   }
   
-  @Test
+  @Test(expected = RemoteException.class)
   public void testRenameRoot() throws Exception {
     Path src = getTestRootPath(fc, "test/testRenameRoot/srcdir/src1");
     Path dst = new Path("/");
     createFile(src);
-    rename(src, dst, true, false, true, Rename.OVERWRITE);
-    rename(dst, src, true, false, true, Rename.OVERWRITE);
+    rename(dst, src, true, true, Rename.OVERWRITE);
+  }
+
+  @Test(expected = RemoteException.class)
+  public void testRenameToRoot() throws Exception {
+    Path src = getTestRootPath(fc, "test/testRenameRoot/srcdir/src1");
+    Path dst = new Path("/");
+    createFile(src);
+    rename(src, dst, true, true, Rename.OVERWRITE);
   }
   
   /**
@@ -256,7 +271,7 @@ public void testEditsLogRename() throws Exception {
     fs.setQuota(dst1.getParent(), 2, HdfsConstants.QUOTA_DONT_SET);
     // Free up quota for a subsequent rename
     fs.delete(dst1, true);
-    rename(src1, dst1, true, true, false, Rename.OVERWRITE);
+    rename(src1, dst1, false, true, Rename.OVERWRITE);
     
     // Restart the cluster and ensure the above operations can be
     // loaded from the edits log
@@ -295,19 +310,6 @@ private void oldRename(Path src, Path dst, boolean renameSucceeds,
     Assert.assertEquals(renameSucceeds, exists(fc, dst));
   }
   
-  private void rename(Path src, Path dst, boolean dstExists,
-      boolean renameSucceeds, boolean exception, Options.Rename... options)
-      throws Exception {
-    try {
-      fc.rename(src, dst, options);
-      Assert.assertTrue(renameSucceeds);
-    } catch (Exception ex) {
-      Assert.assertTrue(exception);
-    }
-    Assert.assertEquals(renameSucceeds, !exists(fc, src));
-    Assert.assertEquals((dstExists||renameSucceeds), exists(fc, dst));
-  }
-  
   @Override
   protected boolean listCorruptedBlocksSupported() {
     return true;
-- 
1.7.9.5

