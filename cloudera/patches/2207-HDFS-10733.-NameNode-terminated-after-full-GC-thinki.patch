From 840b0bd36f24107b71193c8e00a49b3c4d677672 Mon Sep 17 00:00:00 2001
From: Vinitha Reddy Gankidi <vigankidi@linkedin.com>
Date: Tue, 17 Jan 2017 17:21:12 -0800
Subject: [PATCH 2207/2748] HDFS-10733. NameNode terminated after full GC
 thinking QJM is unresponsive. Contributed by
 Vinitha Gankidi.

(cherry picked from commit e7b4f88acd6cbf7e59bb5033d6a2915d6270cd9b)

Change-Id: Ia56cbf5585e7bcd3d0a339138bbdff9fa764de50
---
 .../hadoop/hdfs/qjournal/client/QuorumCall.java    |   26 +++++++++++++++++++-
 .../hdfs/qjournal/client/TestQuorumCall.java       |   17 +++++++++++++
 2 files changed, 42 insertions(+), 1 deletion(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumCall.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumCall.java
index f15e462..dc32318 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumCall.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumCall.java
@@ -20,8 +20,10 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.concurrent.TimeoutException;
+import java.util.concurrent.TimeUnit;
 
 import org.apache.hadoop.ipc.RemoteException;
+import org.apache.hadoop.util.StopWatch;
 import org.apache.hadoop.util.Time;
 
 import com.google.common.base.Joiner;
@@ -58,6 +60,7 @@
    * fraction of the configured timeout for any call.
    */
   private static final float WAIT_PROGRESS_WARN_THRESHOLD = 0.7f;
+  private final StopWatch quorumStopWatch = new StopWatch();
   
   static <KEY, RESULT> QuorumCall<KEY, RESULT> create(
       Map<KEY, ? extends ListenableFuture<RESULT>> calls) {
@@ -83,6 +86,16 @@ public void onSuccess(RESULT res) {
   private QuorumCall() {
     // Only instantiated from factory method above
   }
+
+  private void restartQuorumStopWatch() {
+    quorumStopWatch.reset().start();
+  }
+
+  private boolean shouldIncreaseQuorumTimeout(long offset, int millis) {
+    long elapsed = quorumStopWatch.now(TimeUnit.MILLISECONDS);
+    return elapsed + offset > (millis * WAIT_PROGRESS_INFO_THRESHOLD);
+  }
+
   
   /**
    * Wait for the quorum to achieve a certain number of responses.
@@ -110,6 +123,7 @@ public synchronized void waitFor(
     long nextLogTime = st + (long)(millis * WAIT_PROGRESS_INFO_THRESHOLD);
     long et = st + millis;
     while (true) {
+      restartQuorumStopWatch();
       checkAssertionErrors();
       if (minResponses > 0 && countResponses() >= minResponses) return;
       if (minSuccesses > 0 && countSuccesses() >= minSuccesses) return;
@@ -139,11 +153,21 @@ public synchronized void waitFor(
       }
       long rem = et - now;
       if (rem <= 0) {
-        throw new TimeoutException();
+        // Increase timeout if a full GC occurred after restarting stopWatch
+        if (shouldIncreaseQuorumTimeout(0, millis)) {
+          et = et + millis;
+        } else {
+          throw new TimeoutException();
+        }
       }
+      restartQuorumStopWatch();
       rem = Math.min(rem, nextLogTime - now);
       rem = Math.max(rem, 1);
       wait(rem);
+      // Increase timeout if a full GC occurred after restarting stopWatch
+      if (shouldIncreaseQuorumTimeout(-rem, millis)) {
+        et = et + millis;
+      }
     }
   }
 
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/qjournal/client/TestQuorumCall.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/qjournal/client/TestQuorumCall.java
index 2295384..506497e 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/qjournal/client/TestQuorumCall.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/qjournal/client/TestQuorumCall.java
@@ -66,4 +66,21 @@ public void testQuorums() throws Exception {
       // expected
     }
   }
+  @Test(timeout=10000)
+  public void testQuorumFailsWithoutResponse() throws Exception {
+    Map<String, SettableFuture<String>> futures = ImmutableMap.of(
+        "f1", SettableFuture.<String>create());
+
+    QuorumCall<String, String> q = QuorumCall.create(futures);
+    assertEquals("The number of quorum calls for which a response has been"
+            + " received should be 0", 0, q.countResponses());
+
+    try {
+      q.waitFor(0, 1, 100, 10, "test");
+      fail("Didn't time out waiting for more responses than came back");
+    } catch (TimeoutException te) {
+      // expected
+    }
+  }
+
 }
-- 
1.7.9.5

