From 13d62141821d7fa234126ca990be13187fab93b4 Mon Sep 17 00:00:00 2001
From: Akira Ajisaka <aajisaka@apache.org>
Date: Mon, 18 Jul 2016 11:42:56 -0700
Subject: [PATCH 1771/2748] HADOOP-13202. Avoid possible overflow in
 org.apache.hadoop.util.bloom.BloomFilter#getNBytes.
 Contributed by Kai Sasaki.

(cherry picked from commit c2bcffb34ebe4399b523a44f69d23761648bd0c4)
(cherry picked from commit 09375baad1ba732b73701cdbd0ee77618ed6f687)
(cherry picked from commit 833117c2199bddcd1e05b5abf138989dd9e43172)

Conflicts:
hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/bloom/TestBloomFilters.java

Change-Id: I998f25dd8d201e703e58ff9abdbc749652e6d55d
---
 .../org/apache/hadoop/util/bloom/BloomFilter.java  |    2 +-
 .../apache/hadoop/util/bloom/TestBloomFilters.java |   12 ++++++++++++
 2 files changed, 13 insertions(+), 1 deletion(-)

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/bloom/BloomFilter.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/bloom/BloomFilter.java
index e2dea6d..2df7fd6 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/bloom/BloomFilter.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/bloom/BloomFilter.java
@@ -234,6 +234,6 @@ public void readFields(DataInput in) throws IOException {
   
   /* @return number of bytes needed to hold bit vector */
   private int getNBytes() {
-    return (vectorSize + 7) / 8;
+    return (int)(((long)vectorSize + 7) / 8);
   }
 }//end class
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/bloom/TestBloomFilters.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/bloom/TestBloomFilters.java
index 93fa6d5..9f7042c 100644
--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/bloom/TestBloomFilters.java
+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/bloom/TestBloomFilters.java
@@ -237,4 +237,16 @@ public void testFiltersWithMurmurHash() {
                 BloomFilterTestStrategy.FILTER_AND_STRATEGY,
                 BloomFilterTestStrategy.FILTER_XOR_STRATEGY)).test();
   }
+
+  @Test
+  public void testFiltersWithLargeVectorSize() {
+    int hashId = Hash.MURMUR_HASH;
+    Filter filter
+        = new BloomFilter(Integer.MAX_VALUE, hashFunctionNumber, hashId);
+    BloomFilterCommonTester.of(hashId, numInsertions)
+        .withFilterInstance(filter)
+        .withTestCases(ImmutableSet.of(
+                BloomFilterTestStrategy.WRITE_READ_STRATEGY
+        )).test();
+  }
 }
-- 
1.7.9.5

