From 1bc4a870cc84966cb6522583a400d461afb05ba1 Mon Sep 17 00:00:00 2001
From: Kihwal Lee <kihwal@apache.org>
Date: Tue, 25 Jul 2017 10:33:09 -0500
Subject: [PATCH 2693/2748] HDFS-12143. Improve performance of getting and
 removing inode features. Contributed by Daryn
 Sharp.

(cherry picked from commit 1a79dcfc457969d6a6c08ffffe4152fd7638e48a)
(cherry picked from commit 7be52c9c79882a7305afdc443f16795fd4984178)

Change-Id: I7304f131327c8209ac0d9731f2b4cea4a746b79d
---
 .../server/namenode/INodeWithAdditionalFields.java |   24 ++++++++++++++------
 1 file changed, 17 insertions(+), 7 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeWithAdditionalFields.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeWithAdditionalFields.java
index aa7e582..c33aaa4f 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeWithAdditionalFields.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeWithAdditionalFields.java
@@ -295,12 +295,14 @@ protected void addFeature(Feature f) {
 
   protected void removeFeature(Feature f) {
     int size = features.length;
-    Preconditions.checkState(size > 0, "Feature "
-        + f.getClass().getSimpleName() + " not found.");
+    if (size == 0) {
+      throwFeatureNotFoundException(f);
+    }
 
     if (size == 1) {
-      Preconditions.checkState(features[0] == f, "Feature "
-          + f.getClass().getSimpleName() + " not found.");
+      if (features[0] != f) {
+        throwFeatureNotFoundException(f);
+      }
       features = EMPTY_FEATURE;
       return;
     }
@@ -319,14 +321,22 @@ protected void removeFeature(Feature f) {
       }
     }
 
-    Preconditions.checkState(!overflow && j == size - 1, "Feature "
-        + f.getClass().getSimpleName() + " not found.");
+    if (overflow || j != size - 1) {
+      throwFeatureNotFoundException(f);
+    }
     features = arr;
   }
 
+  private void throwFeatureNotFoundException(Feature f) {
+    throw new IllegalStateException(
+        "Feature " + f.getClass().getSimpleName() + " not found.");
+  }
+
   protected <T extends Feature> T getFeature(Class<? extends Feature> clazz) {
     Preconditions.checkArgument(clazz != null);
-    for (Feature f : features) {
+    final int size = features.length;
+    for (int i=0; i < size; i++) {
+      Feature f = features[i];
       if (clazz.isAssignableFrom(f.getClass())) {
         @SuppressWarnings("unchecked")
         T ret = (T) f;
-- 
1.7.9.5

