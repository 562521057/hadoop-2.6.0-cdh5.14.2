From 4ce36f5e7b682265ef3f39294d2b1d31cdc31188 Mon Sep 17 00:00:00 2001
From: Yongjun Zhang <yzhang@cloudera.com>
Date: Fri, 27 May 2016 10:02:02 -0700
Subject: [PATCH 2043/2748] HDFS-10276. HDFS should not expose path info that
 user has no permission to see. (Yuanbo Liu via
 Yongjun Zhang)

(cherry picked from commit 5ea6fd85c7aff6df28b87789f607bb57ee920639)
(cherry picked from commit 2dfaedeb4390569af2036a6e4bd8fcc18506de8e)

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSPermissionChecker.java

Change-Id: Ibc6e26772e5b9ed0c0e64c90ec3450b9b5d846f2
---
 .../namenode/DefaultAuthorizationProvider.java     |   19 ++++++++++---------
 .../org/apache/hadoop/hdfs/TestDFSPermission.java  |   14 ++++++++++++++
 2 files changed, 24 insertions(+), 9 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/DefaultAuthorizationProvider.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/DefaultAuthorizationProvider.java
index fbf5852..5adcece 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/DefaultAuthorizationProvider.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/DefaultAuthorizationProvider.java
@@ -127,9 +127,9 @@ public void addAclFeature(INodeAuthorizationInfo node, AclFeature f) {
    * Check whether exception e is due to an ancestor inode's not being
    * directory.
    */
-  private void checkAncestorType(INode[] inodes, int ancestorIndex,
+  private void checkAncestorType(INode[] inodes, int checkedAncestorIndex,
       AccessControlException e) throws AccessControlException {
-    for (int i = 0; i <= ancestorIndex; i++) {
+    for (int i = 0; i <= checkedAncestorIndex; i++) {
       if (inodes[i] == null) {
         break;
       }
@@ -154,11 +154,7 @@ public void checkPermission(String user, Set<String> groups,
     for (; ancestorIndex >= 0 && inodes[ancestorIndex] == null;
          ancestorIndex--)
       ;
-    try {
-      checkTraverse(user, groups, inodes, ancestorIndex, snapshotId);
-    } catch (AccessControlException e) {
-      checkAncestorType(inodes, ancestorIndex, e);
-    }
+    checkTraverse(user, groups, inodes, ancestorIndex, snapshotId);
 
     final INode last = inodes[inodes.length - 1];
     if (parentAccess != null && parentAccess.implies(FsAction.WRITE)
@@ -202,8 +198,13 @@ private void checkOwner(String user, INode inode, int snapshotId
    */
   private void checkTraverse(String user, Set<String> groups, INode[] inodes,
       int last, int snapshotId) throws AccessControlException {
-    for (int j = 0; j <= last; j++) {
-      check(user, groups, inodes[j], snapshotId, FsAction.EXECUTE);
+    int j = 0;
+    try {
+      for (; j <= last; j++) {
+        check(user, groups, inodes[j], snapshotId, FsAction.EXECUTE);
+      }
+    } catch (AccessControlException e) {
+      checkAncestorType(inodes, j, e);
     }
   }
 
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSPermission.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSPermission.java
index 80b2eb4..b4f6b4e 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSPermission.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSPermission.java
@@ -546,6 +546,20 @@ public FileSystem run() throws Exception {
               + "a directory, when checked on /existing_file/non_existing_name",
           e.getMessage().contains("is not a directory"));
     }
+
+    rootFs.setPermission(p4, new FsPermission("600"));
+    try {
+      fs.exists(nfpath);
+      fail("The exists call should have failed.");
+    } catch (AccessControlException e) {
+      assertFalse("Permission denied messages must not carry full file path,"
+          + "since the user does not have permission on /p4: "
+          + e.getMessage(),
+          e.getMessage().contains(fpath.getName()));
+      assertFalse("Permission denied messages must not specify /p4"
+          + " is not a directory: " + e.getMessage(),
+          e.getMessage().contains("is not a directory"));
+    }
   }
 
   /* Check if namenode performs permission checking correctly
-- 
1.7.9.5

