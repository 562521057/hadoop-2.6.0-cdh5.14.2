From 4190540ccb4cd67bfd1b5bc0a367604c378a582e Mon Sep 17 00:00:00 2001
From: Sean Mackrory <mackrorysd@apache.org>
Date: Tue, 14 Mar 2017 10:00:48 -0600
Subject: [PATCH 2344/2748] HADOOP-14181. S3Guard: Add validation of DynamoDB
 region

(cherry picked from commit 322a2bc74433e5dbd395ab77691966c9ca48cedd)

Change-Id: I3196e6296b43112f1d3ab8ff117bf7b4c9e7c998
---
 .../fs/s3a/s3guard/DynamoDBClientFactory.java      |   25 ++++++++++++++++++--
 .../apache/hadoop/fs/s3a/s3guard/S3GuardTool.java  |    4 ++--
 .../fs/s3a/s3guard/ITestS3GuardToolDynamoDB.java   |   21 ++++++++++++++++
 3 files changed, 46 insertions(+), 4 deletions(-)

diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBClientFactory.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBClientFactory.java
index 8f1b9e3..c2fe6a0 100644
--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBClientFactory.java
+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBClientFactory.java
@@ -22,6 +22,7 @@
 
 import com.amazonaws.ClientConfiguration;
 import com.amazonaws.auth.AWSCredentialsProvider;
+import com.amazonaws.regions.Regions;
 import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
 import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
 import com.google.common.base.Preconditions;
@@ -80,8 +81,14 @@ public AmazonDynamoDB createDynamoDBClient(String defaultRegion)
       if (StringUtils.isEmpty(region)) {
         region = defaultRegion;
       }
-      Preconditions.checkState(StringUtils.isNotEmpty(region),
-          "No DynamoDB region is provided!");
+      try {
+        Regions.fromName(region);
+      } catch (IllegalArgumentException | NullPointerException e) {
+        throw new IOException("Invalid region specified: " + region + "; " +
+            "Region can be configured with " + S3GUARD_DDB_REGION_KEY +": " +
+            validRegionsString());
+      }
+
       LOG.debug("Creating DynamoDB client in region {}", region);
 
       return AmazonDynamoDBClientBuilder.standard()
@@ -90,6 +97,20 @@ public AmazonDynamoDB createDynamoDBClient(String defaultRegion)
           .withRegion(region)
           .build();
     }
+
+    private static String validRegionsString() {
+      final String DELIMITER = ", ";
+      Regions[] regions = Regions.values();
+      StringBuilder sb = new StringBuilder();
+      for (int i = 0; i < regions.length; i++) {
+        if (i > 0) {
+          sb.append(DELIMITER);
+        }
+        sb.append(regions[i].getName());
+      }
+      return sb.toString();
+
+    }
   }
 
 }
diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java
index 862f871..9579839 100644
--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java
+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java
@@ -79,8 +79,8 @@
 
   // Exit codes
   static final int SUCCESS = 0;
-  static final int INVALID_ARGUMENT = -1;
-  static final int ERROR = -99;
+  static final int INVALID_ARGUMENT = 1;
+  static final int ERROR = 99;
 
   protected S3AFileSystem s3a;
   protected MetadataStore ms;
diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/ITestS3GuardToolDynamoDB.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/ITestS3GuardToolDynamoDB.java
index 33cb001..c2e4f5c 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/ITestS3GuardToolDynamoDB.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/ITestS3GuardToolDynamoDB.java
@@ -29,6 +29,7 @@
 import java.io.IOException;
 import java.util.Random;
 
+import static org.apache.hadoop.fs.s3a.s3guard.S3GuardTool.INVALID_ARGUMENT;
 import static org.apache.hadoop.fs.s3a.s3guard.S3GuardTool.SUCCESS;
 
 /**
@@ -56,6 +57,26 @@ private static boolean exist(DynamoDB dynamoDB, String tableName) {
   }
 
   @Test
+  public void testInvalidRegion() throws Exception {
+    String testTableName = "testInvalidRegion" + new Random().nextInt();
+    String testRegion = "invalidRegion";
+    // Initialize MetadataStore
+    Init initCmd = new Init(getFs().getConf());
+    try {
+      initCmd.run(new String[]{
+          "init",
+          "-region", testRegion,
+          "-meta", "dynamodb://" + testTableName
+      });
+    } catch (IOException e) {
+      // Expected
+      return;
+    }
+    fail("Use of invalid region did not fail - table may have been " +
+        "created and not cleaned up: " + testTableName);
+  }
+
+  @Test
   public void testDynamoDBInitDestroyCycle() throws IOException,
       InterruptedException {
     String testTableName = "testDynamoDBInitDestroy" + new Random().nextInt();
-- 
1.7.9.5

