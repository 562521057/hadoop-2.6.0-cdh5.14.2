From 0999f34f0969cd14e2e8f1faf8983be17b053c5e Mon Sep 17 00:00:00 2001
From: Lei Xu <lei@apache.org>
Date: Thu, 11 Feb 2016 20:33:51 -0800
Subject: [PATCH 1231/2748] HDFS-9795. OIV Delimited should show which files
 are ACL-enabled (lei)

(cherry picked from commit c7fcec24b845fc7c74cc50f16931305bb526dba6)

Change-Id: Ie8c11cd5a077c6ea43ac4f647f8db9012bb265ca
---
 .../PBImageDelimitedTextWriter.java                |    6 +++-
 .../TestOfflineImageViewerForAcl.java              |   36 ++++++++++++++++++++
 2 files changed, 41 insertions(+), 1 deletion(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageDelimitedTextWriter.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageDelimitedTextWriter.java
index 90496de..493d505 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageDelimitedTextWriter.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageDelimitedTextWriter.java
@@ -83,11 +83,13 @@ public String getEntry(String parent, INode inode) {
     buffer.append(path);
     PermissionStatus p = null;
     boolean isDir = false;
+    boolean hasAcl = false;
 
     switch (inode.getType()) {
     case FILE:
       INodeFile file = inode.getFile();
       p = getPermission(file.getPermission());
+      hasAcl = file.hasAcl() && file.getAcl().getEntriesCount() > 0;
       append(buffer, file.getReplication());
       append(buffer, formatDate(file.getModificationTime()));
       append(buffer, formatDate(file.getAccessTime()));
@@ -100,6 +102,7 @@ public String getEntry(String parent, INode inode) {
     case DIRECTORY:
       INodeDirectory dir = inode.getDirectory();
       p = getPermission(dir.getPermission());
+      hasAcl = dir.hasAcl() && dir.getAcl().getEntriesCount() > 0;
       append(buffer, 0);  // Replication
       append(buffer, formatDate(dir.getModificationTime()));
       append(buffer, formatDate(0));  // Access time.
@@ -127,7 +130,8 @@ public String getEntry(String parent, INode inode) {
     }
     assert p != null;
     String dirString = isDir ? "d" : "-";
-    append(buffer, dirString + p.getPermission().toString());
+    String aclString = hasAcl ? "+" : "";
+    append(buffer, dirString + p.getPermission().toString() + aclString);
     append(buffer, p.getUserName());
     append(buffer, p.getGroupName());
     return buffer.toString();
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/TestOfflineImageViewerForAcl.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/TestOfflineImageViewerForAcl.java
index 1e46e00..3ac5d85 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/TestOfflineImageViewerForAcl.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/TestOfflineImageViewerForAcl.java
@@ -17,10 +17,13 @@
  */
 package org.apache.hadoop.hdfs.tools.offlineImageViewer;
 
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.io.PrintStream;
 import java.io.PrintWriter;
 import java.io.RandomAccessFile;
@@ -228,4 +231,37 @@ public void testPBImageXmlWriterForAcl() throws Exception{
     final String xml = output.toString();
     parser.parse(new InputSource(new StringReader(xml)), new DefaultHandler());
   }
+
+  @Test
+  public void testPBDelimitedWriterForAcl() throws Exception {
+    final String DELIMITER = "\t";
+    ByteArrayOutputStream output = new ByteArrayOutputStream();
+
+    try (PrintStream o = new PrintStream(output)) {
+      PBImageDelimitedTextWriter v =
+          new PBImageDelimitedTextWriter(o, DELIMITER, "");  // run in memory.
+      v.visit(new RandomAccessFile(originalFsimage, "r"));
+    }
+
+    try (
+        ByteArrayInputStream input =
+            new ByteArrayInputStream(output.toByteArray());
+        BufferedReader reader =
+            new BufferedReader(new InputStreamReader(input))) {
+      String line;
+      boolean header = true;
+      while ((line = reader.readLine()) != null) {
+        String[] fields = line.split(DELIMITER);
+        if (!header) {
+          String filePath = fields[0];
+          String permission = fields[9];
+          if (!filePath.equals("/")) {
+            boolean hasAcl = !filePath.toLowerCase().contains("noacl");
+            assertEquals(hasAcl, permission.endsWith("+"));
+          }
+        }
+        header = false;
+      }
+    }
+  }
 }
-- 
1.7.9.5

