From 4d4e8e330d53df11a874065a22a8d0099a2460fd Mon Sep 17 00:00:00 2001
From: Gera Shegalov <gera@apache.org>
Date: Fri, 24 Apr 2015 09:21:44 -0700
Subject: [PATCH 1435/2748] MAPREDUCE-6333.
 TestEvents,TestAMWebServicesTasks,TestAppController
 are broken due to MAPREDUCE-6297. (Siqi Li via
 gera)

(cherry picked from commit 78c6b462412bbadad4a1a13ed4c597927b0cf188)
(cherry picked from commit fa915f73e2456a3c75a8e28f70879db9a009ac5e)

Conflicts:
	hadoop-mapreduce-project/CHANGES.txt

Change-Id: I85ecab94cdc76ee602487d007c5a898241beed87
---
 .../hadoop/mapreduce/jobhistory/TestEvents.java    |   29 ++++++++++----------
 .../v2/app/webapp/TestAMWebServicesTasks.java      |   27 ++++++++++++------
 .../mapreduce/v2/app/webapp/TestAppController.java |    9 +++---
 3 files changed, 38 insertions(+), 27 deletions(-)

diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/jobhistory/TestEvents.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/jobhistory/TestEvents.java
index 33448b0..f3d8e38 100644
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/jobhistory/TestEvents.java
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/jobhistory/TestEvents.java
@@ -39,6 +39,7 @@
 
 public class TestEvents {
 
+  private static final String taskId = "task_1_2_r_3";
   /**
    * test a getters of TaskAttemptFinishedEvent and TaskAttemptFinished
    * 
@@ -131,7 +132,7 @@ public void testEvents() throws Exception {
 
     e = reader.getNextEvent();
     assertTrue(e.getEventType().equals(EventType.REDUCE_ATTEMPT_KILLED));
-    assertEquals("task_1_2_r03_4",
+    assertEquals(taskId,
         ((TaskAttemptUnsuccessfulCompletion) e.getDatum()).taskid.toString());
 
     e = reader.getNextEvent();
@@ -141,42 +142,42 @@ public void testEvents() throws Exception {
 
     e = reader.getNextEvent();
     assertTrue(e.getEventType().equals(EventType.REDUCE_ATTEMPT_STARTED));
-    assertEquals("task_1_2_r03_4",
+    assertEquals(taskId,
         ((TaskAttemptStarted) e.getDatum()).taskid.toString());
 
     e = reader.getNextEvent();
     assertTrue(e.getEventType().equals(EventType.REDUCE_ATTEMPT_FINISHED));
-    assertEquals("task_1_2_r03_4",
+    assertEquals(taskId,
         ((TaskAttemptFinished) e.getDatum()).taskid.toString());
 
     e = reader.getNextEvent();
     assertTrue(e.getEventType().equals(EventType.REDUCE_ATTEMPT_KILLED));
-    assertEquals("task_1_2_r03_4",
+    assertEquals(taskId,
         ((TaskAttemptUnsuccessfulCompletion) e.getDatum()).taskid.toString());
 
     e = reader.getNextEvent();
     assertTrue(e.getEventType().equals(EventType.REDUCE_ATTEMPT_KILLED));
-    assertEquals("task_1_2_r03_4",
+    assertEquals(taskId,
         ((TaskAttemptUnsuccessfulCompletion) e.getDatum()).taskid.toString());
 
     e = reader.getNextEvent();
     assertTrue(e.getEventType().equals(EventType.REDUCE_ATTEMPT_STARTED));
-    assertEquals("task_1_2_r03_4",
+    assertEquals(taskId,
         ((TaskAttemptStarted) e.getDatum()).taskid.toString());
 
     e = reader.getNextEvent();
     assertTrue(e.getEventType().equals(EventType.REDUCE_ATTEMPT_FINISHED));
-    assertEquals("task_1_2_r03_4",
+    assertEquals(taskId,
         ((TaskAttemptFinished) e.getDatum()).taskid.toString());
 
     e = reader.getNextEvent();
     assertTrue(e.getEventType().equals(EventType.REDUCE_ATTEMPT_KILLED));
-    assertEquals("task_1_2_r03_4",
+    assertEquals(taskId,
         ((TaskAttemptUnsuccessfulCompletion) e.getDatum()).taskid.toString());
 
     e = reader.getNextEvent();
     assertTrue(e.getEventType().equals(EventType.REDUCE_ATTEMPT_KILLED));
-    assertEquals("task_1_2_r03_4",
+    assertEquals(taskId,
         ((TaskAttemptUnsuccessfulCompletion) e.getDatum()).taskid.toString());
 
     reader.close();
@@ -235,7 +236,7 @@ private TaskAttemptUnsuccessfulCompletion getTaskAttemptUnsuccessfulCompletion()
     datum.hostname = "hostname";
     datum.rackname = "rackname";
     datum.physMemKbytes = Arrays.asList(1000, 2000, 3000);
-    datum.taskid = "task_1_2_r03_4";
+    datum.taskid = taskId;
     datum.port = 1000;
     datum.taskType = "REDUCE";
     datum.status = "STATUS";
@@ -261,7 +262,7 @@ private FakeEvent getCleanupAttemptFinishedEvent() {
     datum.hostname = "hostname";
     datum.rackname = "rackName";
     datum.state = "state";
-    datum.taskid = "task_1_2_r03_4";
+    datum.taskid = taskId;
     datum.taskStatus = "taskStatus";
     datum.taskType = "REDUCE";
     result.setDatum(datum);
@@ -279,7 +280,7 @@ private FakeEvent getCleanupAttemptStartedEvent() {
     datum.locality = "locality";
     datum.shufflePort = 10001;
     datum.startTime = 1;
-    datum.taskid = "task_1_2_r03_4";
+    datum.taskid = taskId;
     datum.taskType = "taskType";
     datum.trackerName = "trackerName";
     result.setDatum(datum);
@@ -309,7 +310,7 @@ private FakeEvent getTaskAttemptFinishedEvent() {
     datum.hostname = "hostname";
     datum.rackname = "rackname";
     datum.state = "state";
-    datum.taskid = "task_1_2_r03_4";
+    datum.taskid = taskId;
     datum.taskStatus = "taskStatus";
     datum.taskType = "REDUCE";
     result.setDatum(datum);
@@ -326,7 +327,7 @@ private FakeEvent getSetupAttemptStartedEvent() {
     datum.locality = "locality";
     datum.shufflePort = 10001;
     datum.startTime = 1;
-    datum.taskid = "task_1_2_r03_4";
+    datum.taskid = taskId;
     datum.taskType = "taskType";
     datum.trackerName = "trackerName";
     result.setDatum(datum);
diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/webapp/TestAMWebServicesTasks.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/webapp/TestAMWebServicesTasks.java
index 8bf1bb7..15ef5ac 100644
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/webapp/TestAMWebServicesTasks.java
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/webapp/TestAMWebServicesTasks.java
@@ -31,6 +31,7 @@
 import javax.xml.parsers.DocumentBuilderFactory;
 
 import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.mapreduce.TaskID;
 import org.apache.hadoop.mapreduce.v2.api.records.JobId;
 import org.apache.hadoop.mapreduce.v2.api.records.TaskId;
 import org.apache.hadoop.mapreduce.v2.api.records.TaskReport;
@@ -355,9 +356,11 @@ public void testTaskIdBogus() throws JSONException, Exception {
         String message = exception.getString("message");
         String type = exception.getString("exception");
         String classname = exception.getString("javaClassName");
-        WebServicesTestUtils.checkStringMatch("exception message",
+        WebServicesTestUtils.checkStringEqual("exception message",
             "java.lang.Exception: TaskId string : "
-                + "bogustaskid is not properly formed", message);
+                + "bogustaskid is not properly formed"
+                + "\nReason: java.util.regex.Matcher[pattern=" +
+                TaskID.TASK_ID_REGEX + " region=0,11 lastmatch=]", message);
         WebServicesTestUtils.checkStringMatch("exception type",
             "NotFoundException", type);
         WebServicesTestUtils.checkStringMatch("exception classname",
@@ -419,9 +422,11 @@ public void testTaskIdInvalid() throws JSONException, Exception {
         String message = exception.getString("message");
         String type = exception.getString("exception");
         String classname = exception.getString("javaClassName");
-        WebServicesTestUtils.checkStringMatch("exception message",
-            "java.lang.Exception: Bad TaskType identifier. TaskId string : "
-                + "task_0_0000_d_000000 is not properly formed.", message);
+        WebServicesTestUtils.checkStringEqual("exception message",
+            "java.lang.Exception: TaskId string : "
+                + "task_0_0000_d_000000 is not properly formed"
+                + "\nReason: java.util.regex.Matcher[pattern=" +
+                TaskID.TASK_ID_REGEX + " region=0,20 lastmatch=]", message);
         WebServicesTestUtils.checkStringMatch("exception type",
             "NotFoundException", type);
         WebServicesTestUtils.checkStringMatch("exception classname",
@@ -451,9 +456,11 @@ public void testTaskIdInvalid2() throws JSONException, Exception {
         String message = exception.getString("message");
         String type = exception.getString("exception");
         String classname = exception.getString("javaClassName");
-        WebServicesTestUtils.checkStringMatch("exception message",
+        WebServicesTestUtils.checkStringEqual("exception message",
             "java.lang.Exception: TaskId string : "
-                + "task_0_m_000000 is not properly formed", message);
+                + "task_0_m_000000 is not properly formed"
+                + "\nReason: java.util.regex.Matcher[pattern=" +
+                TaskID.TASK_ID_REGEX + " region=0,15 lastmatch=]", message);
         WebServicesTestUtils.checkStringMatch("exception type",
             "NotFoundException", type);
         WebServicesTestUtils.checkStringMatch("exception classname",
@@ -483,9 +490,11 @@ public void testTaskIdInvalid3() throws JSONException, Exception {
         String message = exception.getString("message");
         String type = exception.getString("exception");
         String classname = exception.getString("javaClassName");
-        WebServicesTestUtils.checkStringMatch("exception message",
+        WebServicesTestUtils.checkStringEqual("exception message",
             "java.lang.Exception: TaskId string : "
-                + "task_0_0000_m is not properly formed", message);
+                + "task_0_0000_m is not properly formed"
+                + "\nReason: java.util.regex.Matcher[pattern=" +
+                TaskID.TASK_ID_REGEX + " region=0,13 lastmatch=]", message);
         WebServicesTestUtils.checkStringMatch("exception type",
             "NotFoundException", type);
         WebServicesTestUtils.checkStringMatch("exception classname",
diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/webapp/TestAppController.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/webapp/TestAppController.java
index c1bc9ef..92786e3 100644
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/webapp/TestAppController.java
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/webapp/TestAppController.java
@@ -45,6 +45,7 @@
   private AppControllerForTest appController;
   private RequestContext ctx;
   private Job job;
+  private static final String taskId = "task_01_01_m_01";
 
   @Before
   public void setUp() throws IOException {
@@ -70,7 +71,7 @@ public void setUp() throws IOException {
 
     appController = new AppControllerForTest(app, configuration, ctx);
     appController.getProperty().put(AMParams.JOB_ID, "job_01_01");
-    appController.getProperty().put(AMParams.TASK_ID, "task_01_01_m01_01");
+    appController.getProperty().put(AMParams.TASK_ID, taskId);
 
   }
 
@@ -205,7 +206,7 @@ public void testGetTaskCounters() {
         "Access denied: User user does not have permission to view job job_01_01missing task ID",
         appController.getData());
 
-    appController.getProperty().put(AMParams.TASK_ID, "task_01_01_m01_01");
+    appController.getProperty().put(AMParams.TASK_ID, taskId);
     appController.taskCounters();
     assertEquals(CountersPage.class, appController.getClazz());
   }
@@ -247,7 +248,7 @@ public void testTasks() {
   public void testTask() {
  
     appController.task();
-    assertEquals("Attempts for task_01_01_m01_01" ,
+    assertEquals("Attempts for " + taskId ,
         appController.getProperty().get("title"));
 
     assertEquals(TaskPage.class, appController.getClazz());
@@ -290,7 +291,7 @@ public void testAttempts() {
         "Access denied: User user does not have permission to view job job_01_01",
         appController.getData());
 
-    appController.getProperty().put(AMParams.TASK_ID, "task_01_01_m01_01");
+    appController.getProperty().put(AMParams.TASK_ID, taskId);
     appController.attempts();
     assertEquals("Bad request: missing task-type.", appController.getProperty()
         .get("title"));
-- 
1.7.9.5

