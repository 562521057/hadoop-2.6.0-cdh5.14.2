From 647a13a784bcd431231e9e389afae521f041643e Mon Sep 17 00:00:00 2001
From: John Zhuge <jzhuge@cloudera.com>
Date: Wed, 4 Oct 2017 11:58:47 -0700
Subject: [PATCH 2652/2748] CLOUDERA-BUILD. Revert "HADOOP-12622. Improve the
 loggings in RetryPolicies and
 RetryInvocationHandler. Contributed by Junping
 Du"

This reverts commit f49cb2c0d25e11964a7adcc65fd4fafc6940bc2f.

Change-Id: Ib9042527b34f453d0fdfb008236c1c7c0ddfeaa9
---
 .../hadoop/io/retry/RetryInvocationHandler.java    |   22 ++---
 .../org/apache/hadoop/io/retry/RetryPolicies.java  |   60 +++---------
 .../org/apache/hadoop/io/retry/TestRetryProxy.java |  101 ++------------------
 3 files changed, 33 insertions(+), 150 deletions(-)

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java
index dd56882..69cccc9 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java
@@ -121,7 +121,6 @@ public Object invoke(Object proxy, Method method, Object[] args)
                 invocationFailoverCount, isIdempotentOrAtMostOnce);
         RetryAction failAction = getFailAction(actions);
         if (failAction != null) {
-          // fail.
           if (failAction.reason != null) {
             if (LOG.isDebugEnabled()) {
               LOG.debug("Exception while invoking " + currentProxy.proxy.getClass()
@@ -139,8 +138,7 @@ public Object invoke(Object proxy, Method method, Object[] args)
           worthLogging |= LOG.isDebugEnabled();
           RetryAction failOverAction = getFailOverAction(actions);
           long delay = getDelayMillis(actions);
-
-          if (worthLogging) {
+          if (failOverAction != null && worthLogging) {
             String msg = "Exception while invoking " + method.getName()
                 + " of class " + currentProxy.proxy.getClass().getSimpleName()
                 + " over " + currentProxy.proxyInfo;
@@ -148,21 +146,21 @@ public Object invoke(Object proxy, Method method, Object[] args)
             if (invocationFailoverCount > 0) {
               msg += " after " + invocationFailoverCount + " fail over attempts"; 
             }
-
-            if (failOverAction != null) {
-              // failover
-              msg += ". Trying to fail over " + formatSleepMessage(delay);
-            } else {
-              // retry
-              msg += ". Retrying " + formatSleepMessage(delay);
-            }
+            msg += ". Trying to fail over " + formatSleepMessage(delay);
             LOG.info(msg, ex);
+          } else {
+            if(LOG.isDebugEnabled()) {
+              LOG.debug("Exception while invoking " + method.getName()
+                  + " of class " + currentProxy.proxy.getClass().getSimpleName()
+                  + " over " + currentProxy.proxyInfo + ". Retrying "
+                  + formatSleepMessage(delay), ex);
+            }
           }
 
           if (delay > 0) {
             Thread.sleep(delay);
           }
-
+          
           if (failOverAction != null) {
             // Make sure that concurrent failed method invocations only cause a
             // single actual fail over.
diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryPolicies.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryPolicies.java
index e5b88f7..112ac64 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryPolicies.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryPolicies.java
@@ -1,4 +1,4 @@
-/**
+/*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -39,8 +39,6 @@
 import org.apache.hadoop.net.ConnectTimeoutException;
 import org.apache.hadoop.security.token.SecretManager.InvalidToken;
 
-import com.google.common.annotations.VisibleForTesting;
-
 /**
  * <p>
  * A collection of useful implementations of {@link RetryPolicy}.
@@ -175,11 +173,10 @@ public static final RetryPolicy failoverOnNetworkException(
     @Override
     public RetryAction shouldRetry(Exception e, int retries, int failovers,
         boolean isIdempotentOrAtMostOnce) throws Exception {
-      return new RetryAction(RetryAction.RetryDecision.FAIL, 0, "try once " +
-          "and fail.");
+      return RetryAction.FAIL;
     }
   }
-
+  
   static class RetryForever implements RetryPolicy {
     @Override
     public RetryAction shouldRetry(Exception e, int retries, int failovers,
@@ -220,24 +217,14 @@ public RetryAction shouldRetry(Exception e, int retries, int failovers,
     public RetryAction shouldRetry(Exception e, int retries, int failovers,
         boolean isIdempotentOrAtMostOnce) throws Exception {
       if (retries >= maxRetries) {
-        return new RetryAction(RetryAction.RetryDecision.FAIL, 0 , getReason());
+        return RetryAction.FAIL;
       }
       return new RetryAction(RetryAction.RetryDecision.RETRY,
-          timeUnit.toMillis(calculateSleepTime(retries)), getReason());
+          timeUnit.toMillis(calculateSleepTime(retries)));
     }
-
-    protected String getReason() {
-      return constructReasonString(maxRetries);
-    }
-
-    @VisibleForTesting
-    public static String constructReasonString(int retries) {
-      return "retries get failed due to exceeded maximum allowed retries " +
-          "number: " + retries;
-    }
-
+    
     protected abstract long calculateSleepTime(int retries);
-
+    
     @Override
     public int hashCode() {
       return toString().hashCode();
@@ -273,37 +260,18 @@ protected long calculateSleepTime(int retries) {
       return sleepTime;
     }
   }
-
-  static class RetryUpToMaximumTimeWithFixedSleep extends
-      RetryUpToMaximumCountWithFixedSleep {
-    private long maxTime = 0;
-    private TimeUnit timeUnit;
-
-    public RetryUpToMaximumTimeWithFixedSleep(long maxTime, long sleepTime,
-        TimeUnit timeUnit) {
+  
+  static class RetryUpToMaximumTimeWithFixedSleep extends RetryUpToMaximumCountWithFixedSleep {
+    public RetryUpToMaximumTimeWithFixedSleep(long maxTime, long sleepTime, TimeUnit timeUnit) {
       super((int) (maxTime / sleepTime), sleepTime, timeUnit);
-      this.maxTime = maxTime;
-      this.timeUnit = timeUnit;
-    }
-
-    @Override
-    protected String getReason() {
-      return constructReasonString(this.maxTime, this.timeUnit);
-    }
-
-    @VisibleForTesting
-    public static String constructReasonString(long maxTime,
-        TimeUnit timeUnit) {
-      return "retries get failed due to exceeded maximum allowed time (" +
-          "in " + timeUnit.toString() + "): " + maxTime;
     }
   }
-
+  
   static class RetryUpToMaximumCountWithProportionalSleep extends RetryLimited {
     public RetryUpToMaximumCountWithProportionalSleep(int maxRetries, long sleepTime, TimeUnit timeUnit) {
       super(maxRetries, sleepTime, timeUnit);
     }
-
+    
     @Override
     protected long calculateSleepTime(int retries) {
       return sleepTime * (retries + 1);
@@ -360,8 +328,7 @@ public RetryAction shouldRetry(Exception e, int curRetry, int failovers,
       final Pair p = searchPair(curRetry);
       if (p == null) {
         //no more retries.
-        return new RetryAction(RetryAction.RetryDecision.FAIL, 0 , "Retry " +
-            "all pairs in MultipleLinearRandomRetry: " + pairs);
+        return RetryAction.FAIL;
       }
 
       //calculate sleep time and return.
@@ -577,7 +544,6 @@ public ExponentialBackoffRetry(
     protected long calculateSleepTime(int retries) {
       return calculateExponentialTime(sleepTime, retries + 1);
     }
-
   }
   
   /**
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/retry/TestRetryProxy.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/retry/TestRetryProxy.java
index d2a627f..4ea93a8 100644
--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/retry/TestRetryProxy.java
+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/io/retry/TestRetryProxy.java
@@ -27,15 +27,6 @@
 import static org.apache.hadoop.io.retry.RetryPolicies.retryUpToMaximumCountWithProportionalSleep;
 import static org.apache.hadoop.io.retry.RetryPolicies.retryUpToMaximumTimeWithFixedSleep;
 import static org.apache.hadoop.io.retry.RetryPolicies.exponentialBackoffRetry;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
 import static org.junit.Assert.*;
 
 import java.io.IOException;
@@ -49,19 +40,10 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 
-import org.apache.hadoop.io.retry.RetryPolicy.RetryAction;
-import org.apache.hadoop.io.retry.RetryPolicy.RetryAction.RetryDecision;
-import org.apache.hadoop.io.retry.RetryPolicies.RetryUpToMaximumCountWithFixedSleep;
-import org.apache.hadoop.io.retry.RetryPolicies.RetryUpToMaximumTimeWithFixedSleep;
-import org.apache.hadoop.io.retry.RetryPolicies.TryOnceThenFail;
 import org.apache.hadoop.io.retry.UnreliableInterface.FatalException;
 import org.apache.hadoop.io.retry.UnreliableInterface.UnreliableException;
 import org.apache.hadoop.ipc.ProtocolTranslator;
 import org.apache.hadoop.ipc.RemoteException;
-
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-
 import org.junit.Before;
 import org.junit.Test;
 
@@ -70,57 +52,25 @@
 public class TestRetryProxy {
   
   private UnreliableImplementation unreliableImpl;
-  private RetryAction caughtRetryAction = null;
   
   @Before
   public void setUp() throws Exception {
     unreliableImpl = new UnreliableImplementation();
   }
 
-  // answer mockPolicy's method with realPolicy, caught method's return value
-  private void setupMockPolicy(RetryPolicy mockPolicy,
-      final RetryPolicy realPolicy) throws Exception {
-    when(mockPolicy.shouldRetry(any(Exception.class), anyInt(), anyInt(),
-        anyBoolean())).thenAnswer(new Answer<RetryAction>() {
-      @SuppressWarnings("rawtypes")
-      @Override
-      public RetryAction answer(InvocationOnMock invocation) throws Throwable {
-        Object[] args = invocation.getArguments();
-        Exception e = (Exception) args[0];
-        int retries = (int) args[1];
-        int failovers = (int) args[2];
-        boolean isIdempotentOrAtMostOnce = (boolean) args[3];
-        caughtRetryAction = realPolicy.shouldRetry(e, retries, failovers,
-            isIdempotentOrAtMostOnce);
-        return caughtRetryAction;
-      }
-    });
-  }
-
   @Test
-  public void testTryOnceThenFail() throws Exception {
-    RetryPolicy policy = mock(TryOnceThenFail.class);
-    RetryPolicy realPolicy = TRY_ONCE_THEN_FAIL;
-    setupMockPolicy(policy, realPolicy);
-
+  public void testTryOnceThenFail() throws UnreliableException {
     UnreliableInterface unreliable = (UnreliableInterface)
-      RetryProxy.create(UnreliableInterface.class, unreliableImpl, policy);
+      RetryProxy.create(UnreliableInterface.class, unreliableImpl, TRY_ONCE_THEN_FAIL);
     unreliable.alwaysSucceeds();
     try {
       unreliable.failsOnceThenSucceeds();
       fail("Should fail");
     } catch (UnreliableException e) {
       // expected
-      verify(policy, times(1)).shouldRetry(any(Exception.class), anyInt(),
-          anyInt(), anyBoolean());
-      assertEquals(RetryDecision.FAIL, caughtRetryAction.action);
-      assertEquals("try once and fail.", caughtRetryAction.reason);
-    } catch (Exception e) {
-      fail("Other exception other than UnreliableException should also get " +
-          "failed.");
     }
   }
-
+  
   /**
    * Test for {@link RetryInvocationHandler#isRpcInvocation(Object)}
    */
@@ -164,48 +114,25 @@ public void testRetryForever() throws UnreliableException {
   }
   
   @Test
-  public void testRetryUpToMaximumCountWithFixedSleep() throws
-      Exception {
-
-    RetryPolicy policy = mock(RetryUpToMaximumCountWithFixedSleep.class);
-    int maxRetries = 8;
-    RetryPolicy realPolicy = retryUpToMaximumCountWithFixedSleep(maxRetries, 1,
-        TimeUnit.NANOSECONDS);
-    setupMockPolicy(policy, realPolicy);
-
+  public void testRetryUpToMaximumCountWithFixedSleep() throws UnreliableException {
     UnreliableInterface unreliable = (UnreliableInterface)
-      RetryProxy.create(UnreliableInterface.class, unreliableImpl, policy);
-    // shouldRetry += 1
+      RetryProxy.create(UnreliableInterface.class, unreliableImpl,
+                        retryUpToMaximumCountWithFixedSleep(8, 1, TimeUnit.NANOSECONDS));
     unreliable.alwaysSucceeds();
-    // shouldRetry += 2
     unreliable.failsOnceThenSucceeds();
     try {
-      // shouldRetry += (maxRetries -1) (just failed once above)
       unreliable.failsTenTimesThenSucceeds();
       fail("Should fail");
     } catch (UnreliableException e) {
       // expected
-      verify(policy, times(maxRetries + 2)).shouldRetry(any(Exception.class),
-          anyInt(), anyInt(), anyBoolean());
-      assertEquals(RetryDecision.FAIL, caughtRetryAction.action);
-      assertEquals(RetryUpToMaximumCountWithFixedSleep.constructReasonString(
-          maxRetries), caughtRetryAction.reason);
-    } catch (Exception e) {
-      fail("Other exception other than UnreliableException should also get " +
-          "failed.");
     }
   }
   
   @Test
-  public void testRetryUpToMaximumTimeWithFixedSleep() throws Exception {
-    RetryPolicy policy = mock(RetryUpToMaximumTimeWithFixedSleep.class);
-    long maxTime = 80L;
-    RetryPolicy realPolicy = retryUpToMaximumTimeWithFixedSleep(maxTime, 10,
-        TimeUnit.NANOSECONDS);
-    setupMockPolicy(policy, realPolicy);
-
+  public void testRetryUpToMaximumTimeWithFixedSleep() throws UnreliableException {
     UnreliableInterface unreliable = (UnreliableInterface)
-      RetryProxy.create(UnreliableInterface.class, unreliableImpl, policy);
+      RetryProxy.create(UnreliableInterface.class, unreliableImpl,
+                        retryUpToMaximumTimeWithFixedSleep(80, 10, TimeUnit.NANOSECONDS));
     unreliable.alwaysSucceeds();
     unreliable.failsOnceThenSucceeds();
     try {
@@ -213,17 +140,9 @@ public void testRetryUpToMaximumTimeWithFixedSleep() throws Exception {
       fail("Should fail");
     } catch (UnreliableException e) {
       // expected
-      verify(policy, times((int)(maxTime/10) + 2)).shouldRetry(any(Exception.class),
-          anyInt(), anyInt(), anyBoolean());
-      assertEquals(RetryDecision.FAIL, caughtRetryAction.action);
-      assertEquals(RetryUpToMaximumTimeWithFixedSleep.constructReasonString(
-          maxTime, TimeUnit.NANOSECONDS), caughtRetryAction.reason);
-    } catch (Exception e) {
-      fail("Other exception other than UnreliableException should also get " +
-          "failed.");
     }
   }
-
+  
   @Test
   public void testRetryUpToMaximumCountWithProportionalSleep() throws UnreliableException {
     UnreliableInterface unreliable = (UnreliableInterface)
-- 
1.7.9.5

