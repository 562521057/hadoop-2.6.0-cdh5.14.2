From 89dfa491ba0d0f82dafa45580b0aa10327ebda7a Mon Sep 17 00:00:00 2001
From: Miklos Szegedi <szegedim@apache.org>
Date: Wed, 17 Jan 2018 12:56:10 -0800
Subject: [PATCH 2744/2748] YARN-7758. Add an additional check to the validity
 of container and application ids passed to
 container-executor. Contributed by Yufei Gu.

(cherry picked from commit 86a2ac94b1c46891bfcfa4d9dffcaa636596c271)

Conflicts:
	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/main.c
	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/util.h

(cherry picked from commit c15e39db773b8e7845c8b6f7d206a127b19a4cc2)

Change-Id: I8152881b2e8a8da6353d0d33930bbced4ad98534
---
 .../container-executor/impl/container-executor.c   |    3 +-
 .../container-executor/impl/container-executor.h   |    3 +-
 .../src/main/native/container-executor/impl/main.c |   86 ++++++++++++++++++++
 3 files changed, 90 insertions(+), 2 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/container-executor.c b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/container-executor.c
index 60db648..83a8b2d 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/container-executor.c
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/container-executor.c
@@ -978,7 +978,8 @@ int create_log_dirs(const char *app_id, char * const * log_dirs) {
   for(log_root=log_dirs; *log_root != NULL; ++log_root) {
     char *app_log_dir = get_app_log_directory(*log_root, app_id);
     int result = check_nm_local_dir(nm_uid, *log_root);
-    if (result != 0) {
+    if (result != 0 && app_log_dir != NULL) {
+      free(app_log_dir);
       app_log_dir = NULL;
     }
     if (app_log_dir == NULL) {
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/container-executor.h b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/container-executor.h
index fd20f3f..5e318b1 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/container-executor.h
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/container-executor.h
@@ -60,7 +60,8 @@ enum errorcodes {
   DOCKER_RUN_FAILED=29,
   ERROR_OPENING_FILE = 30,
   ERROR_READING_FILE = 31,
-  FEATURE_DISABLED = 32
+  FEATURE_DISABLED = 32,
+  INVALID_CONTAINER_ID = 43
 };
 
 enum operations {
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/main.c b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/main.c
index 521abe5..84e8dbd 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/main.c
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/native/container-executor/impl/main.c
@@ -216,6 +216,10 @@ static struct {
   const char *docker_command_file;
 } cmd_input;
 
+static int all_numbers(char* input);
+
+static int validate_container_id(const char* input);
+
 static int validate_run_as_user_commands(int argc, char **argv, int *operation);
 
 /* Validates that arguments used in the invocation are valid. In case of validation
@@ -318,6 +322,84 @@ static int validate_arguments(int argc, char **argv , int *operation) {
   return validate_run_as_user_commands(argc, argv, operation);
 }
 
+/*
+ * if all chars in the input str are numbers
+ * return true/false
+ */
+static int all_numbers(char* input) {
+  for (; input[0] != 0; input++) {
+    if (input[0] < '0' || input[0] > '9') {
+      return 0;
+    }
+  }
+  return 1;
+}
+
+static int validate_container_id(const char* input) {
+  int is_container_id = 1;
+
+  /*
+   * Two different forms of container_id
+   * container_e17_1410901177871_0001_01_000005
+   * container_1410901177871_0001_01_000005
+   */
+  if (!input) {
+    return 0;
+  }
+
+  char* input_cpy = strdup(input);
+  if (!input_cpy) {
+    return 0;
+  }
+
+  char* p = strtok(input_cpy, "_");
+  int idx = 0;
+  while (p != NULL) {
+    if (0 == idx) {
+      if (0 != strcmp("container", p)) {
+        is_container_id = 0;
+        goto cleanup;
+      }
+    } else if (1 == idx) {
+      // this could be e[n][n], or [n][n]...
+      if (!all_numbers(p)) {
+        if (p[0] == 0) {
+          is_container_id = 0;
+          goto cleanup;
+        }
+        if (p[0] != 'e') {
+          is_container_id = 0;
+          goto cleanup;
+        }
+        if (!all_numbers(p + 1)) {
+          is_container_id = 0;
+          goto cleanup;
+        }
+      }
+    } else {
+      // otherwise, should be all numbers
+      if (!all_numbers(p)) {
+        is_container_id = 0;
+        goto cleanup;
+      }
+    }
+
+    p = strtok(NULL, "_");
+    idx++;
+  }
+
+cleanup:
+  if (input_cpy) {
+    free(input_cpy);
+  }
+
+  // We should have [5,6] elements split by '_'
+  if (idx > 6 || idx < 5) {
+    is_container_id = 0;
+  }
+  return is_container_id;
+}
+
 /* Parse/validate 'run as user' commands */
 static int validate_run_as_user_commands(int argc, char **argv, int *operation) {
   /* We need at least the following arguments in order to proceed further :
@@ -349,6 +431,10 @@ static int validate_run_as_user_commands(int argc, char **argv, int *operation)
     }
     cmd_input.app_id = argv[optind++];
     cmd_input.container_id = argv[optind++];
+    if (!validate_container_id(cmd_input.container_id)) {
+      fprintf(ERRORFILE, "Invalid container id %s\n", cmd_input.container_id);
+      return INVALID_CONTAINER_ID;
+    }
     cmd_input.cred_file = argv[optind++];
     cmd_input.local_dirs = argv[optind++];// good local dirs as a comma separated list
     cmd_input.log_dirs = argv[optind++];// good log dirs as a comma separated list
-- 
1.7.9.5

