From d7d554a9a145dbe0a212c2f8bffcca192e992921 Mon Sep 17 00:00:00 2001
From: Sean Mackrory <sean@cloudera.com>
Date: Tue, 14 Feb 2017 16:25:57 -0700
Subject: [PATCH 2271/2748] CLOUDERA-BUILD: Changes to make
 TestDynamoDBMetadataStore work in Java 7

Change-Id: Ie3e7f3c58755eeac2580c9cbb67e9c44aa0ee65c
---
 .../fs/s3a/s3guard/TestDynamoDBMetadataStore.java  |   44 +++++++++++++++-----
 1 file changed, 34 insertions(+), 10 deletions(-)

diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDynamoDBMetadataStore.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDynamoDBMetadataStore.java
index 8b4cbd1..a43b8bc 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDynamoDBMetadataStore.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDynamoDBMetadataStore.java
@@ -351,10 +351,18 @@ public void testItemVersionCompatibility() throws Throwable {
    */
   @Test
   public void testItemLacksVersion() throws Throwable {
-    intercept(IOException.class, E_NOT_VERSION_MARKER,
-        () -> verifyVersionCompatibility("table",
-            new Item().withPrimaryKey(
-                createVersionMarkerPrimaryKey(VERSION_MARKER))));
+    boolean exceptionThrown = false;
+    try {
+      verifyVersionCompatibility("table",
+          new Item().withPrimaryKey(
+              createVersionMarkerPrimaryKey(VERSION_MARKER)));
+    } catch (IOException e) {
+      exceptionThrown = true;
+      String message = e.getMessage();
+      assertTrue("Expected " + E_NOT_VERSION_MARKER +", got " + message,
+          message.contains(E_NOT_VERSION_MARKER));
+    }
+    assertTrue("Expected an exception but none was thrown", exceptionThrown);
   }
 
   /**
@@ -366,9 +374,17 @@ public void testTableVersionRequired() throws Exception {
     Table table = verifyTableInitialized(BUCKET);
     table.deleteItem(VERSION_MARKER_PRIMARY_KEY);
 
-    // create existing table
-    intercept(IOException.class, E_NO_VERSION_MARKER,
-        () -> ddbms.initTable());
+    boolean exceptionThrown = false;
+    try {
+      // create existing table
+      ddbms.initTable();
+    } catch (IOException e) {
+      exceptionThrown = true;
+      String message = e.getMessage();
+      assertTrue("Expected " + E_NO_VERSION_MARKER +", got " + message,
+          message.contains(E_NO_VERSION_MARKER));
+    }
+    assertTrue("Expected an exception but none was thrown", exceptionThrown);
   }
 
   /**
@@ -383,9 +399,17 @@ public void testTableVersionMismatch() throws Exception {
     Item v200 = createVersionMarker(VERSION_MARKER, 200, 0);
     table.putItem(v200);
 
-    // create existing table
-    intercept(IOException.class, E_INCOMPATIBLE_VERSION,
-        () -> ddbms.initTable());
+    boolean exceptionThrown = false;
+    try {
+      // create existing table
+      ddbms.initTable();
+    } catch (IOException e) {
+      exceptionThrown = true;
+      String message = e.getMessage();
+      assertTrue("Expected " + E_INCOMPATIBLE_VERSION +", got " + message,
+          message.contains(E_INCOMPATIBLE_VERSION));
+    }
+    assertTrue("Expected an exception but none was thrown", exceptionThrown);
   }
 
   /**
-- 
1.7.9.5

