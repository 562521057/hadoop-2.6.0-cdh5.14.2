From 99da5d13c159105c3224ca9c4a2fad168baef353 Mon Sep 17 00:00:00 2001
From: Lei Xu <lei@cloudera.com>
Date: Fri, 8 Jan 2016 13:02:19 -0800
Subject: [PATCH 1077/2748] Revert "HADOOP-12348. MetricsSystemImpl creates
 MetricsSourceAdapter with wrong time unit
 parameter. (zxu via rkanter)"

This reverts commit 170cbd8c21d4b7e9201b0fb0cf24347fff5d421e.
---
 .../hadoop/metrics2/impl/MetricsSourceAdapter.java |   12 ++++--------
 .../hadoop/metrics2/impl/MetricsSystemImpl.java    |   12 +++++++-----
 .../metrics2/impl/TestMetricsSystemImpl.java       |   13 -------------
 3 files changed, 11 insertions(+), 26 deletions(-)

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java
index d56ee53..c66fcfb 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java
@@ -62,7 +62,7 @@
   private Iterable<MetricsRecordImpl> lastRecs;
   private boolean lastRecsCleared;
   private long jmxCacheTS = 0;
-  private long jmxCacheTTL;
+  private int jmxCacheTTL;
   private MBeanInfo infoCache;
   private ObjectName mbeanName;
   private final boolean startMBeans;
@@ -70,7 +70,7 @@
   MetricsSourceAdapter(String prefix, String name, String description,
                        MetricsSource source, Iterable<MetricsTag> injectedTags,
                        MetricsFilter recordFilter, MetricsFilter metricFilter,
-                       long jmxCacheTTL, boolean startMBeans) {
+                       int jmxCacheTTL, boolean startMBeans) {
     this.prefix = checkNotNull(prefix, "prefix");
     this.name = checkNotNull(name, "name");
     this.source = checkNotNull(source, "source");
@@ -88,7 +88,7 @@
 
   MetricsSourceAdapter(String prefix, String name, String description,
                        MetricsSource source, Iterable<MetricsTag> injectedTags,
-                       long period, MetricsConfig conf) {
+                       int period, MetricsConfig conf) {
     this(prefix, name, description, source, injectedTags,
          conf.getFilter(RECORD_FILTER_KEY),
          conf.getFilter(METRIC_FILTER_KEY),
@@ -242,11 +242,7 @@ ObjectName getMBeanName() {
     return mbeanName;
   }
 
-  @VisibleForTesting
-  long getJmxCacheTTL() {
-    return jmxCacheTTL;
-  }
-
+  
   private void updateInfoCache() {
     LOG.debug("Updating info cache...");
     infoCache = infoBuilder.reset(lastRecs).get();
diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java
index f7b26e5..4507e35 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java
@@ -260,9 +260,11 @@ void unregisterSource(String name) {
   void registerSource(String name, String desc, MetricsSource source) {
     checkNotNull(config, "config");
     MetricsConfig conf = sourceConfigs.get(name);
-    MetricsSourceAdapter sa = new MetricsSourceAdapter(prefix, name, desc,
-        source, injectedTags, period * 1000L, conf != null ? conf
-            : config.subset(SOURCE_KEY));
+    MetricsSourceAdapter sa = conf != null
+        ? new MetricsSourceAdapter(prefix, name, desc, source,
+                                   injectedTags, period, conf)
+        : new MetricsSourceAdapter(prefix, name, desc, source,
+          injectedTags, period, config.subset(SOURCE_KEY));
     sources.put(name, sa);
     sa.start();
     LOG.debug("Registered source "+ name);
@@ -359,7 +361,7 @@ private synchronized void startTimer() {
       return;
     }
     logicalTime = 0;
-    long millis = period * 1000L;
+    long millis = period * 1000;
     timer = new Timer("Timer for '"+ prefix +"' metrics system", true);
     timer.scheduleAtFixedRate(new TimerTask() {
           public void run() {
@@ -552,7 +554,7 @@ static String getHostname() {
   private void registerSystemSource() {
     MetricsConfig sysConf = sourceConfigs.get(MS_NAME);
     sysSource = new MetricsSourceAdapter(prefix, MS_STATS_NAME, MS_STATS_DESC,
-        MetricsAnnotations.makeSource(this), injectedTags, period * 1000L,
+        MetricsAnnotations.makeSource(this), injectedTags, period,
         sysConf == null ? config.subset(SOURCE_KEY) : sysConf);
     sysSource.start();
   }
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsSystemImpl.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsSystemImpl.java
index 09c9ca4..b5ebb93 100644
--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsSystemImpl.java
+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/impl/TestMetricsSystemImpl.java
@@ -494,19 +494,6 @@ public void testHangOnSinkRead() throws Exception {
     }
   }
 
-  @Test
-  public void testRegisterSourceJmxCacheTTL() {
-    MetricsSystem ms = new MetricsSystemImpl();
-    ms.init("TestMetricsSystem");
-    TestSource ts = new TestSource("ts");
-    ms.register(ts);
-    MetricsSourceAdapter sa = ((MetricsSystemImpl) ms)
-        .getSourceAdapter("TestSource");
-    assertEquals(MetricsConfig.PERIOD_DEFAULT * 1000 + 1,
-        sa.getJmxCacheTTL());
-    ms.shutdown();
-  }
-
   @Metrics(context="test")
   private static class TestSource {
     @Metric("C1 desc") MutableCounterLong c1;
-- 
1.7.9.5

