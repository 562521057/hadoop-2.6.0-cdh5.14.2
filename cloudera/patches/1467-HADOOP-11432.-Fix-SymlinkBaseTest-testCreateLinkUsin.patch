From f5cde1360c498a523bd04d3c6f9245cba514fb9e Mon Sep 17 00:00:00 2001
From: Gera Shegalov <gera@apache.org>
Date: Fri, 30 Jan 2015 18:36:37 -0800
Subject: [PATCH 1467/2748] HADOOP-11432. Fix
 SymlinkBaseTest#testCreateLinkUsingPartQualPath2.
 (Liang Xie via gera)

(cherry picked from commit 26c2de36e2dd1b2ddedc155e49fb2ec31366d5f8)
(cherry picked from commit 151e147e641cf51cd51db4c2ef7e76b45aed6bb3)

Change-Id: I9bf7bccd11586b97abc096ef26761b628e3e08e7
---
 .../org/apache/hadoop/fs/AbstractFileSystem.java   |   10 +++++++---
 .../java/org/apache/hadoop/fs/SymlinkBaseTest.java |    3 ++-
 2 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java
index f8ae27b..92d4eca 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/AbstractFileSystem.java
@@ -45,12 +45,13 @@
 import org.apache.hadoop.fs.permission.AclStatus;
 import org.apache.hadoop.fs.permission.FsAction;
 import org.apache.hadoop.fs.permission.FsPermission;
-import org.apache.hadoop.fs.InvalidPathException;
 import org.apache.hadoop.security.AccessControlException;
 import org.apache.hadoop.security.SecurityUtil;
 import org.apache.hadoop.security.token.Token;
 import org.apache.hadoop.util.Progressable;
 
+import com.google.common.annotations.VisibleForTesting;
+
 /**
  * This class provides an interface for implementors of a Hadoop file system
  * (analogous to the VFS of Unix). Applications do not access this class;
@@ -79,6 +80,9 @@
   
   /** The statistics for this file system. */
   protected Statistics statistics;
+
+  @VisibleForTesting
+  static final String NO_ABSTRACT_FS_ERROR = "No AbstractFileSystem configured for scheme";
   
   private final URI myUri;
   
@@ -154,8 +158,8 @@ public static AbstractFileSystem createFileSystem(URI uri, Configuration conf)
     Class<?> clazz = conf.getClass(fsImplConf, null);
     if (clazz == null) {
       throw new UnsupportedFileSystemException(String.format(
-          "%s=null: No AbstractFileSystem configured for scheme: %s",
-          fsImplConf, uri.getScheme()));
+          "%s=null: %s: %s",
+          fsImplConf, NO_ABSTRACT_FS_ERROR, uri.getScheme()));
     }
     return (AbstractFileSystem) newInstance(clazz, uri, conf);
   }
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java
index ba2b72e..4d6485d 100644
--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java
+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/SymlinkBaseTest.java
@@ -581,7 +581,8 @@ public void testCreateLinkUsingPartQualPath2() throws IOException {
     } catch (IOException e) {
       // Expected
       if (wrapper instanceof FileContextTestWrapper) {
-        assertEquals("No AbstractFileSystem for scheme: null", e.getMessage());
+        GenericTestUtils.assertExceptionContains(
+            AbstractFileSystem.NO_ABSTRACT_FS_ERROR, e);
       } else if (wrapper instanceof FileSystemTestWrapper) {
         assertEquals("No FileSystem for scheme: null", e.getMessage());
       }
-- 
1.7.9.5

