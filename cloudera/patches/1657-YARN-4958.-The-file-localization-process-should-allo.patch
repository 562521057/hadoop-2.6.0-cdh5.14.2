From 675412fc1729cfcc7cba336b2082e0cce4bcf003 Mon Sep 17 00:00:00 2001
From: Sangjin Lee <sjlee@twitter.com>
Date: Mon, 20 Jun 2016 09:56:53 -0700
Subject: [PATCH 1657/2748] YARN-4958. The file localization process should
 allow for wildcards to reduce the application
 footprint in the state store (Daniel Templeton
 via sjlee)

(cherry picked from commit 5107a967fa2558deba11c33a326d4d2e5748f452)

Change-Id: I5afa9e358aec03628f5200a10cdd2e39419a2d83
---
 .../yarn/server/nodemanager/ContainerExecutor.java |   15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java
index 77193df..80712dd 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java
@@ -50,7 +50,7 @@
 import org.apache.hadoop.util.StringUtils;
 
 public abstract class ContainerExecutor implements Configurable {
-
+  private static final String WILDCARD = "*";
   private static final Log LOG = LogFactory.getLog(ContainerExecutor.class);
   final public static FsPermission TASK_LAUNCH_SCRIPT_PERMISSION =
     FsPermission.createImmutable((short) 0700);
@@ -217,7 +217,18 @@ public void writeLaunchEnv(OutputStream out, Map<String, String> environment, Ma
     if (resources != null) {
       for (Map.Entry<Path,List<String>> entry : resources.entrySet()) {
         for (String linkName : entry.getValue()) {
-          sb.symlink(entry.getKey(), new Path(linkName));
+          if (new Path(linkName).getName().equals(WILDCARD)) {
+            // If this is a wildcarded path, link to everything in the
+            // directory from the working directory
+            File directory = new File(entry.getKey().toString());
+
+            for (File wildLink : directory.listFiles()) {
+              sb.symlink(new Path(wildLink.toString()),
+                  new Path(wildLink.getName()));
+            }
+          } else {
+            sb.symlink(entry.getKey(), new Path(linkName));
+          }
         }
       }
     }
-- 
1.7.9.5

