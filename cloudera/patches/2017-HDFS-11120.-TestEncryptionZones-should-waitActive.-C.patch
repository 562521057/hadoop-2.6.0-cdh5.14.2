From 2edae54044a03a3c897a0d4521f2a2b57f6ff27a Mon Sep 17 00:00:00 2001
From: Xiao Chen <xiao@apache.org>
Date: Wed, 9 Nov 2016 17:15:19 -0800
Subject: [PATCH 2017/2748] HDFS-11120. TestEncryptionZones should waitActive.
 Contributed by John Zhuge.

(cherry picked from commit 71adf44c3fc5655700cdc904e61366d438c938eb)

 Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestEncryptionZones.java

Change-Id: I9185262e44b91e422bdb6fbd60bd84f49b1caa4a
---
 .../apache/hadoop/hdfs/TestEncryptionZones.java    |   59 +++++++++++---------
 1 file changed, 33 insertions(+), 26 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestEncryptionZones.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestEncryptionZones.java
index 81de9b1..f5d89eb 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestEncryptionZones.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestEncryptionZones.java
@@ -95,7 +95,9 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.Timeout;
 import org.mockito.Mockito;
 
 import static org.mockito.Matchers.anyBoolean;
@@ -143,6 +145,9 @@ protected String getKeyProviderURI() {
       new Path(testRootDir.toString(), "test.jks").toUri();
   }
 
+  @Rule
+  public Timeout globalTimeout = new Timeout(120 * 1000);
+
   @Before
   public void setup() throws Exception {
     conf = new HdfsConfiguration();
@@ -156,6 +161,7 @@ public void setup() throws Exception {
     conf.setInt(DFSConfigKeys.DFS_NAMENODE_LIST_ENCRYPTION_ZONES_NUM_RESPONSES,
         2);
     cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
+    cluster.waitActive();
     Logger.getLogger(EncryptionZoneManager.class).setLevel(Level.TRACE);
     fs = cluster.getFileSystem();
     fsWrapper = new FileSystemTestWrapper(fs);
@@ -226,7 +232,7 @@ public void assertZonePresent(String keyName, String path) throws IOException {
    * with sticky bits.
    * @throws Exception
    */
-  @Test(timeout = 60000)
+  @Test
   public void testTrashStickyBit() throws Exception {
     // create an EZ /zones/zone1, make it world writable.
     final Path zoneParent = new Path("/zones");
@@ -289,7 +295,7 @@ public Object run() throws Exception {
    * with sticky bits.
    * @throws Exception
    */
-  @Test(timeout = 60000)
+  @Test
   public void testProvisionTrash() throws Exception {
     // create an EZ /zones/zone1
     final Path zoneParent = new Path("/zones");
@@ -321,7 +327,8 @@ public void testProvisionTrash() throws Exception {
     assertTrue(trashFileStatus.getPermission().getStickyBit());
   }
 
-  @Test(timeout = 60000)
+  // CHECKSTYLE:OFF:MethodLengthCheck
+  @Test
   public void testBasicOperations() throws Exception {
 
     int numZones = 0;
@@ -475,8 +482,9 @@ public Object run() throws Exception {
     assertNumZones(numZones);
     assertZonePresent(null, nonpersistZone.toString());
   }
+  // CHECKSTYLE:ON:MethodLengthCheck
 
-  @Test(timeout = 60000)
+  @Test
   public void testBasicOperationsRootDir() throws Exception {
     int numZones = 0;
     final Path rootDir = new Path("/");
@@ -500,7 +508,7 @@ public void testBasicOperationsRootDir() throws Exception {
   /**
    * Test listing encryption zones as a non super user.
    */
-  @Test(timeout = 60000)
+  @Test
   public void testListEncryptionZonesAsNonSuperUser() throws Exception {
 
     final UserGroupInformation user = UserGroupInformation.
@@ -534,7 +542,7 @@ public Object run() throws Exception {
   /**
    * Test getEncryptionZoneForPath as a non super user.
    */
-  @Test(timeout = 60000)
+  @Test
   public void testGetEZAsNonSuperUser() throws Exception {
 
     final UserGroupInformation user = UserGroupInformation.
@@ -678,12 +686,12 @@ private void doRenameEncryptionZone(FSTestWrapper wrapper) throws Exception {
     }
   }
 
-  @Test(timeout = 60000)
+  @Test
   public void testRenameFileSystem() throws Exception {
     doRenameEncryptionZone(fsWrapper);
   }
 
-  @Test(timeout = 60000)
+  @Test
   public void testRenameFileContext() throws Exception {
     doRenameEncryptionZone(fcWrapper);
   }
@@ -693,7 +701,7 @@ private FileEncryptionInfo getFileEncryptionInfo(Path path) throws Exception {
     return blocks.getFileEncryptionInfo();
   }
 
-  @Test(timeout = 120000)
+  @Test
   public void testReadWrite() throws Exception {
     final HdfsAdmin dfsAdmin =
         new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);
@@ -749,7 +757,7 @@ public void testReadWrite() throws Exception {
     verifyFilesEqual(fs, encFile1, encFile2, len);
   }
 
-  @Test(timeout = 120000)
+  @Test
   public void testReadWriteUsingWebHdfs() throws Exception {
     final HdfsAdmin dfsAdmin =
         new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);
@@ -798,7 +806,7 @@ private void appendOneByte(FileSystem fs, Path p) throws IOException {
     out.close();
   }
 
-  @Test(timeout = 60000)
+  @Test
   public void testVersionAndSuiteNegotiation() throws Exception {
     final HdfsAdmin dfsAdmin =
         new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);
@@ -925,13 +933,12 @@ private static void testCipherSuiteNegotiation(DistributedFileSystem fs,
     }
   }
 
-  @Test(timeout = 120000)
+  @Test
   public void testCreateEZWithNoProvider() throws Exception {
     // Unset the key provider and make sure EZ ops don't work
     final Configuration clusterConf = cluster.getConfiguration(0);
     clusterConf.unset(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI);
     cluster.restartNameNode(true);
-    cluster.waitActive();
     final Path zone1 = new Path("/zone1");
     fsWrapper.mkdir(zone1, FsPermission.getDirDefault(), true);
     try {
@@ -948,7 +955,7 @@ public void testCreateEZWithNoProvider() throws Exception {
     assertNumZones(0);
   }
 
-  @Test(timeout = 120000)
+  @Test
   public void testIsEncryptedMethod() throws Exception {
     doTestIsEncryptedMethod(new Path("/"));
     doTestIsEncryptedMethod(new Path("/.reserved/raw"));
@@ -1107,7 +1114,7 @@ public void doCleanup() throws Exception {}
    * Tests the retry logic in startFile. We release the lock while generating
    * an EDEK, so tricky things can happen in the intervening time.
    */
-  @Test(timeout = 120000)
+  @Test
   public void testStartFileRetry() throws Exception {
     final Path zone1 = new Path("/zone1");
     final Path file = new Path(zone1, "file1");
@@ -1199,7 +1206,7 @@ public void doCleanup() throws Exception {
   /**
    * Tests obtaining delegation token from stored key
    */
-  @Test(timeout = 120000)
+  @Test
   public void testDelegationToken() throws Exception {
     UserGroupInformation.createRemoteUser("JobTracker");
     DistributedFileSystem dfs = cluster.getFileSystem();
@@ -1230,7 +1237,7 @@ public void testDelegationToken() throws Exception {
   /**
    * Test running fsck on a system with encryption zones.
    */
-  @Test(timeout = 60000)
+  @Test
   public void testFsckOnEncryptionZones() throws Exception {
     final int len = 8196;
     final Path zoneParent = new Path("/zones");
@@ -1261,7 +1268,7 @@ public void testFsckOnEncryptionZones() throws Exception {
    * Test correctness of successive snapshot creation and deletion
    * on a system with encryption zones.
    */
-  @Test(timeout = 60000)
+  @Test
   public void testSnapshotsOnEncryptionZones() throws Exception {
     final String TEST_KEY2 = "testkey2";
     DFSTestUtil.createKey(TEST_KEY2, cluster, conf);
@@ -1343,7 +1350,7 @@ public void testSnapshotsOnEncryptionZones() throws Exception {
    * they function properly when the target is in the same
    * or different ez.
    */
-  @Test(timeout = 60000)
+  @Test
   public void testEncryptionZonesWithSymlinks() throws Exception {
     // Verify we can create an encryption zone over both link and target
     final int len = 8192;
@@ -1378,7 +1385,7 @@ public void testEncryptionZonesWithSymlinks() throws Exception {
     fs.delete(target, true);
   }
 
-  @Test(timeout = 60000)
+  @Test
   public void testConcatFailsInEncryptionZones() throws Exception {
     final int len = 8192;
     final Path ez = new Path("/ez");
@@ -1403,7 +1410,7 @@ public void testConcatFailsInEncryptionZones() throws Exception {
   /**
    * Test running the OfflineImageViewer on a system with encryption zones.
    */
-  @Test(timeout = 60000)
+  @Test
   public void testOfflineImageViewerOnEncryptionZones() throws Exception {
     final int len = 8196;
     final Path zoneParent = new Path("/zones");
@@ -1434,7 +1441,7 @@ public void testOfflineImageViewerOnEncryptionZones() throws Exception {
   /**
    * Test creating encryption zone on the root path
    */
-  @Test(timeout = 60000)
+  @Test
   public void testEncryptionZonesOnRootPath() throws Exception {
     final int len = 8196;
     final Path rootDir = new Path("/");
@@ -1453,7 +1460,7 @@ public void testEncryptionZonesOnRootPath() throws Exception {
     DFSTestUtil.verifyFilesNotEqual(fs, zoneFile, rawFile, len);
   }
 
-  @Test(timeout = 60000)
+  @Test
   public void testEncryptionZonesOnRelativePath() throws Exception {
     final int len = 8196;
     final Path baseDir = new Path("/somewhere/base");
@@ -1471,7 +1478,7 @@ public void testEncryptionZonesOnRelativePath() throws Exception {
         .getEncryptionZoneForPath(zoneDir).getPath().toString());
   }
 
-  @Test(timeout = 120000)
+  @Test
   public void testEncryptionZoneWithTrash() throws Exception {
     // Create the encryption zone1
     final HdfsAdmin dfsAdmin =
@@ -1515,7 +1522,7 @@ public void testEncryptionZoneWithTrash() throws Exception {
     verifyShellDeleteWithTrash(shell, topEZ);
   }
 
-  @Test(timeout = 120000)
+  @Test
   public void testRootDirEZTrash() throws Exception {
     final HdfsAdmin dfsAdmin =
         new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);
@@ -1529,7 +1536,7 @@ public void testRootDirEZTrash() throws Exception {
     verifyShellDeleteWithTrash(shell, encFile);
   }
 
-  @Test(timeout = 120000)
+  @Test
   public void testGetTrashRoots() throws Exception {
     final HdfsAdmin dfsAdmin =
         new HdfsAdmin(FileSystem.getDefaultUri(conf), conf);
-- 
1.7.9.5

