From 464f5dd63442b2bbec2de53bc7a1678c52dfbd11 Mon Sep 17 00:00:00 2001
From: Andrew Wang <wang@apache.org>
Date: Tue, 13 Sep 2016 11:02:36 -0700
Subject: [PATCH 2032/2748] HDFS-10837. Standardize serializiation of WebHDFS
 DirectoryListing.

(cherry picked from commit db6d243cf89d25fefbffd4c8721e14d9246b5a16)
(cherry picked from commit abaad976cd709474dd63c24a6355353c3e087d60)

 Conflicts:
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/JsonUtilClient.java
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/JsonUtil.java
	hadoop-hdfs-project/hadoop-hdfs/src/site/markdown/WebHDFS.md

Change-Id: Ie7fc0cae284a6e98b0b3b4fa8767078be9cde616
---
 .../java/org/apache/hadoop/hdfs/web/JsonUtil.java  |   76 ++++++---
 .../apache/hadoop/hdfs/web/WebHdfsFileSystem.java  |   16 +-
 .../hadoop-hdfs/src/site/apt/WebHDFS.apt.vm        |  171 ++++++++++++++------
 3 files changed, 178 insertions(+), 85 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/JsonUtil.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/JsonUtil.java
index 1aeb134..dec7ca1 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/JsonUtil.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/JsonUtil.java
@@ -251,23 +251,36 @@ public static HdfsFileStatus toFileStatus(final Map<?, ?> json, boolean includes
     return m;
   }
 
+  static HdfsFileStatus[] toHdfsFileStatusArray(final Map<?, ?> json) {
+    Preconditions.checkNotNull(json);
+    final Map<?, ?> rootmap =
+        (Map<?, ?>)json.get(FileStatus.class.getSimpleName() + "es");
+    final List<?> array = JsonUtil.getList(rootmap,
+        FileStatus.class.getSimpleName());
+
+    // convert FileStatus
+    Preconditions.checkNotNull(array);
+    final HdfsFileStatus[] statuses = new HdfsFileStatus[array.size()];
+    int i = 0;
+    for (Object object : array) {
+      final Map<?, ?> m = (Map<?, ?>) object;
+      statuses[i++] = JsonUtil.toFileStatus(m, false);
+    }
+    return statuses;
+  }
+
   static DirectoryListing toDirectoryListing(final Map<?, ?> json) {
     if (json == null) {
       return null;
     }
-    final List<?> list = getList(json,
-        "partialListing");
+    final Map<?, ?> listing = getMap(json, "DirectoryListing");
+    final Map<?, ?> partialListing = getMap(listing, "partialListing");
+    HdfsFileStatus[] fileStatuses = toHdfsFileStatusArray(partialListing);
 
-    HdfsFileStatus[] partialListing = new HdfsFileStatus[list.size()];
-    int i = 0;
-    for (Object o : list) {
-      final Map<?, ?> m = (Map<?, ?>) o;
-      partialListing[i++] = toFileStatus(m, false);
-    }
-    int remainingEntries = getInt(json, "remainingEntries", -1);
+    int remainingEntries = getInt(listing, "remainingEntries", -1);
     Preconditions.checkState(remainingEntries != -1,
         "remainingEntries was not set");
-    return new DirectoryListing(partialListing, remainingEntries);
+    return new DirectoryListing(fileStatuses, remainingEntries);
   }
 
   /** Convert a Json map to an ExtendedBlock object. */
@@ -353,6 +366,15 @@ private static String getString(Map<?, ?> m, String key,
     }
   }
 
+  static Map<?, ?> getMap(Map<?, ?> m, String key) {
+    Object map = m.get(key);
+    if (map instanceof Map<?, ?>) {
+      return (Map<?, ?>) map;
+    } else {
+      return null;
+    }
+  }
+
   /** Convert a Json map to an DatanodeInfo object. */
   static DatanodeInfo toDatanodeInfo(final Map<?, ?> m)
       throws IOException {
@@ -485,32 +507,42 @@ private static LocatedBlock toLocatedBlock(final Map<?, ?> m) throws IOException
     return locatedblock;
   }
 
+  private static Map<String, Object> toJson(final DirectoryListing listing)
+      throws IOException {
+    final Map<String, Object> m = new TreeMap<>();
+    // Serialize FileStatus[] to a FileStatuses map
+    m.put("partialListing", toJsonMap(listing.getPartialListing()));
+    // Simple int
+    m.put("remainingEntries", listing.getRemainingEntries());
+
+    return m;
+  }
+
   public static String toJsonString(final DirectoryListing listing) throws
       IOException {
 
     if (listing == null) {
       return null;
     }
-
-    final Map<String, Object> m = new TreeMap<>();
-    m.put("partialListing", toJsonArray(listing.getPartialListing()));
-    m.put("remainingEntries", listing.getRemainingEntries());
-    return MAPPER.writeValueAsString(m);
+    return toJsonString(DirectoryListing.class, toJson(listing));
   }
 
-  private static Object[] toJsonArray(HdfsFileStatus[] statuses) throws
+  private static Map<String, Object> toJsonMap(HdfsFileStatus[] statuses) throws
       IOException {
     if (statuses == null) {
       return null;
     }
-    if (statuses.length == 0) {
-      return EMPTY_OBJECT_ARRAY;
-    }
-    final Object[] a = new Object[statuses.length];
+
+    final Map<String, Object> fileStatuses = new TreeMap<>();
+    final Map<String, Object> fileStatus = new TreeMap<>();
+    fileStatuses.put("FileStatuses", fileStatus);
+    final Object[] array = new Object[statuses.length];
+    fileStatus.put("FileStatus", array);
     for (int i = 0; i < statuses.length; i++) {
-      a[i] = toJsonMap(statuses[i]);
+      array[i] = toJsonMap(statuses[i]);
     }
-    return a;
+
+    return fileStatuses;
   }
 
   /** Convert a LocatedBlock[] to a Json array. */
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java
index 8a5929c..c6ac184 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java
@@ -1387,17 +1387,13 @@ protected URL getResolvedUrl(final HttpURLConnection connection
     return new FsPathResponseRunner<FileStatus[]>(op, f) {
       @Override
       FileStatus[] decodeResponse(Map<?,?> json) {
-        final Map<?, ?> rootmap = (Map<?, ?>)json.get(FileStatus.class.getSimpleName() + "es");
-        final List<?> array = JsonUtil.getList(
-            rootmap, FileStatus.class.getSimpleName());
-
-        //convert FileStatus
-        final FileStatus[] statuses = new FileStatus[array.size()];
-        int i = 0;
-        for (Object object : array) {
-          final Map<?, ?> m = (Map<?, ?>) object;
-          statuses[i++] = makeQualified(JsonUtil.toFileStatus(m, false), f);
+        HdfsFileStatus[] hdfsStatuses =
+            JsonUtil.toHdfsFileStatusArray(json);
+        final FileStatus[] statuses = new FileStatus[hdfsStatuses.length];
+        for (int i = 0; i < hdfsStatuses.length; i++) {
+          statuses[i] = makeQualified(hdfsStatuses[i], f);
         }
+
         return statuses;
       }
     }.run();
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/site/apt/WebHDFS.apt.vm b/hadoop-hdfs-project/hadoop-hdfs/src/site/apt/WebHDFS.apt.vm
index 2a9121e..8674299 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/site/apt/WebHDFS.apt.vm
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/site/apt/WebHDFS.apt.vm
@@ -602,7 +602,7 @@ Content-Length: 427
 curl -i  "http://<HOST>:<PORT>/webhdfs/v1/<PATH>?op=LISTSTATUS_BATCH&startAfter=<CHILD>"
 +---------------------------------
 
-  The client receives a response with a batch of {{{FileStatuses JSON Schema}<<<FileStatuses>>> JSON object}}, as well as iteration information:
+  The client receives a response with a {{{DirectoryListing JSON Schema}<<<DirectoryListing>>> JSON object}}, which contains a {{{FileStatuses JSON Schema}<<<FileStatuses>>> JSON object}}, as well as iteration information:
 
 +---------------------------------
 HTTP/1.1 200 OK
@@ -619,39 +619,45 @@ Transfer-Encoding: chunked
 Server: Jetty(6.1.26)
 
 {
- "partialListing": [
-   {
-     "accessTime": 0,
-     "blockSize": 0,
-     "childrenNum": 0,
-     "fileId": 16389,
-     "group": "supergroup",
-     "length": 0,
-     "modificationTime": 1472575493064,
-     "owner": "andrew",
-     "pathSuffix": "anotherdir",
-     "permission": "755",
-     "replication": 0,
-     "storagePolicy": 0,
-     "type": "DIRECTORY"
-   },
-   {
-     "accessTime": 0,
-     "blockSize": 0,
-     "childrenNum": 0,
-     "fileId": 16386,
-     "group": "supergroup",
-     "length": 0,
-     "modificationTime": 1472575274776,
-     "owner": "andrew",
-     "pathSuffix": "somedir",
-     "permission": "755",
-     "replication": 0,
-     "storagePolicy": 0,
-     "type": "DIRECTORY"
-   }
- ],
- "remainingEntries": 1
+  "DirectoryListing": {
+    "partialListing": {
+      "FileStatuses": {
+        "FileStatus": [
+          {
+            "accessTime": 0,
+            "blockSize": 0,
+            "childrenNum": 0,
+            "fileId": 16387,
+            "group": "supergroup",
+            "length": 0,
+            "modificationTime": 1473305882563,
+            "owner": "andrew",
+            "pathSuffix": "bardir",
+            "permission": "755",
+            "replication": 0,
+            "storagePolicy": 0,
+            "type": "DIRECTORY"
+          },
+          {
+            "accessTime": 1473305896945,
+            "blockSize": 1024,
+            "childrenNum": 0,
+            "fileId": 16388,
+            "group": "supergroup",
+            "length": 0,
+            "modificationTime": 1473305896965,
+            "owner": "andrew",
+            "pathSuffix": "bazfile",
+            "permission": "644",
+            "replication": 3,
+            "storagePolicy": 0,
+            "type": "FILE"
+          }
+        ]
+      }
+    },
+  "remainingEntries": 2
+  }
 }
 +---------------------------------
 
@@ -659,7 +665,7 @@ Server: Jetty(6.1.26)
   To query the next batch, set the <<<startAfter>>> parameter to the <<<pathSuffix>>> of the last item returned in the current batch. For example:
 
 +---------------------------------
-curl -i  "http://<HOST>:<PORT>/webhdfs/v1/<PATH>?op=LISTSTATUS_BATCH&startAfter=somedir"
+curl -i  "http://<HOST>:<PORT>/webhdfs/v1/<PATH>?op=LISTSTATUS_BATCH&startAfter=bazfile"
 +---------------------------------
 
   Which will return the next batch of directory entries:
@@ -679,24 +685,45 @@ Transfer-Encoding: chunked
 Server: Jetty(6.1.26)
 
 {
- "partialListing": [
-   {
-     "accessTime": 1472575333568,
-     "blockSize": 1024,
-     "childrenNum": 0,
-     "fileId": 16388,
-     "group": "supergroup",
-     "length": 224,
-     "modificationTime": 1472575334222,
-     "owner": "andrew",
-     "pathSuffix": "somefile",
-     "permission": "644",
-     "replication": 3,
-     "storagePolicy": 0,
-     "type": "FILE"
-   }
- ],
- "remainingEntries": 0
+  "DirectoryListing": {
+    "partialListing": {
+      "FileStatuses": {
+        "FileStatus": [
+          {
+            "accessTime": 0,
+            "blockSize": 0,
+            "childrenNum": 0,
+            "fileId": 16386,
+            "group": "supergroup",
+            "length": 0,
+            "modificationTime": 1473305878951,
+            "owner": "andrew",
+            "pathSuffix": "foodir",
+            "permission": "755",
+            "replication": 0,
+            "storagePolicy": 0,
+            "type": "DIRECTORY"
+          },
+          {
+            "accessTime": 1473305902864,
+            "blockSize": 1024,
+            "childrenNum": 0,
+            "fileId": 16389,
+            "group": "supergroup",
+            "length": 0,
+            "modificationTime": 1473305902878,
+            "owner": "andrew",
+            "pathSuffix": "quxfile",
+            "permission": "644",
+            "replication": 3,
+            "storagePolicy": 0,
+            "type": "FILE"
+          }
+        ]
+      }
+    },
+    "remainingEntries": 0
+  }
 }
 +---------------------------------
 
@@ -1913,6 +1940,44 @@ var fileStatusProperties =
   {{{../../api/org/apache/hadoop/fs/FileStatus.html}FileStatus}}
 
 
+** {DirectoryListing JSON Schema}
+
+  A <<<DirectoryListing>>> JSON object represents a batch of directory entries while iteratively listing a directory. It contains a <<<FileStatuses>>> JSON object as well as iteration information.
+
++---------------------------------
+{
+  "name"      : "DirectoryListing",
+  "properties":
+  {
+    "DirectoryListing":
+    {
+      "type"      : "object",
+      "properties":
+      {
+        "partialListing":
+        {
+          "description": "A partial directory listing",
+          "type"       : "object", // A FileStatuses object
+          "required"   : true
+        },
+        "remainingEntries":
+        {
+          "description": "Number of remaining entries",
+          "type"       : "integer",
+          "required"   : true
+        }
+      }
+    }
+  }
+}
++---------------------------------
+
+  See also:
+  {{{FileStatuses JSON Schema}<<<FileStatuses>>> JSON object}},
+  {{{Iteratively List a Directory}<<<LISTSTATUS_BATCH>>>}},
+  {{{../../api/org/apache/hadoop/fs/FileStatus.html}FileStatus}}
+
+
 ** {Long JSON Schema}
 
 +---------------------------------
-- 
1.7.9.5

