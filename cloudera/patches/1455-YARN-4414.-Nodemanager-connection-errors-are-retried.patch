From 3d98fe62e64e3ed6603d894f9bc59ed065521d7a Mon Sep 17 00:00:00 2001
From: Jason Lowe <jlowe@apache.org>
Date: Tue, 12 Jan 2016 15:56:15 +0000
Subject: [PATCH 1455/2748] YARN-4414. Nodemanager connection errors are
 retried at multiple levels. Contributed by Chang
 Li

(cherry picked from commit 13de8359a1c6d9fc78cd5013c860c1086d86176f)

Conflicts:
	hadoop-yarn-project/CHANGES.txt

Change-Id: Iedb03de24180e8ac98ff3ee6603702ee023409da
---
 .../org/apache/hadoop/yarn/client/NMProxy.java     |    9 ++++--
 .../org/apache/hadoop/yarn/client/ServerProxy.java |    1 +
 .../nodemanager/containermanager/TestNMProxy.java  |   34 ++++++++++++++++++--
 3 files changed, 39 insertions(+), 5 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/NMProxy.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/NMProxy.java
index dd40b45..68816bb 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/NMProxy.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/NMProxy.java
@@ -23,6 +23,7 @@
 import org.apache.hadoop.classification.InterfaceAudience.Public;
 import org.apache.hadoop.classification.InterfaceStability.Unstable;
 import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;
 import org.apache.hadoop.io.retry.RetryPolicy;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;
@@ -42,8 +43,12 @@
           YarnConfiguration.DEFAULT_CLIENT_NM_CONNECT_MAX_WAIT_MS,
           YarnConfiguration.CLIENT_NM_CONNECT_RETRY_INTERVAL_MS,
           YarnConfiguration.DEFAULT_CLIENT_NM_CONNECT_RETRY_INTERVAL_MS);
-
-    return createRetriableProxy(conf, protocol, ugi, rpc, serverAddress,
+    Configuration confClone = new Configuration(conf);
+    confClone.setInt(
+        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 0);
+    confClone.setInt(CommonConfigurationKeysPublic.
+            IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY, 0);
+    return createRetriableProxy(confClone, protocol, ugi, rpc, serverAddress,
       retryPolicy);
   }
 }
\ No newline at end of file
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/ServerProxy.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/ServerProxy.java
index de7fc7d..be30801 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/ServerProxy.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/ServerProxy.java
@@ -76,6 +76,7 @@ protected static RetryPolicy createRetryPolicy(Configuration conf,
     exceptionToPolicyMap.put(ConnectException.class, retryPolicy);
     exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);
     exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);
+    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);
     exceptionToPolicyMap.put(RetriableException.class, retryPolicy);
     exceptionToPolicyMap.put(SocketException.class, retryPolicy);
     exceptionToPolicyMap.put(NMNotYetReadyException.class, retryPolicy);
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/TestNMProxy.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/TestNMProxy.java
index 102c9c6..937fcbf 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/TestNMProxy.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/TestNMProxy.java
@@ -21,6 +21,8 @@
 import java.io.IOException;
 import java.net.InetSocketAddress;
 
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;
 import org.apache.hadoop.fs.UnsupportedFileSystemException;
 import org.apache.hadoop.io.retry.UnreliableInterface;
 import org.apache.hadoop.security.SecurityUtil;
@@ -128,7 +130,7 @@ public void testNMProxyRetry() throws Exception {
      StartContainersRequest allRequests =
          Records.newRecord(StartContainersRequest.class);
 
-    ContainerManagementProtocol proxy = getNMProxy();
+    ContainerManagementProtocol proxy = getNMProxy(conf);
 
     retryCount = 0;
     shouldThrowNMNotYetReadyException = false;
@@ -159,14 +161,40 @@ public void testShouldNotRetryForeverForNonNetworkExceptionsOnNMConnections()
     StartContainersRequest allRequests =
         Records.newRecord(StartContainersRequest.class);
 
-    ContainerManagementProtocol proxy = getNMProxy();
+    ContainerManagementProtocol proxy = getNMProxy(conf);
 
     shouldThrowNMNotYetReadyException = false;
     retryCount = 0;
     proxy.startContainers(allRequests);
   }
 
-  private ContainerManagementProtocol getNMProxy() {
+  @Test(timeout = 20000)
+  public void testNMProxyRPCRetry() throws Exception {
+    conf.setLong(YarnConfiguration.CLIENT_NM_CONNECT_MAX_WAIT_MS, 1000);
+    conf.setLong(YarnConfiguration.CLIENT_NM_CONNECT_RETRY_INTERVAL_MS, 100);
+    StartContainersRequest allRequests =
+        Records.newRecord(StartContainersRequest.class);
+    Configuration newConf = new YarnConfiguration(conf);
+    newConf.setInt(
+        CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 100);
+
+    newConf.setInt(CommonConfigurationKeysPublic.
+        IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY, 100);
+    // connect to some dummy address so that it can trigger
+    // connection failure and RPC level retires.
+    newConf.set(YarnConfiguration.NM_ADDRESS, "1234");
+    ContainerManagementProtocol proxy = getNMProxy(newConf);
+    try {
+      proxy.startContainers(allRequests);
+      Assert.fail("should get socket exception");
+    } catch (IOException e) {
+      // socket exception should be thrown immediately, without RPC retries.
+      Assert.assertTrue(e.toString().
+          contains("Failed on local exception: java.net.SocketException"));
+    }
+  }
+
+  private ContainerManagementProtocol getNMProxy(Configuration conf) {
     ApplicationId appId = ApplicationId.newInstance(1, 1);
     ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);
 
-- 
1.7.9.5

