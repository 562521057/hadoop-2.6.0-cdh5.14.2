From c30c307a757f94e1489c5a5fd491397c6bb6f553 Mon Sep 17 00:00:00 2001
From: Arpit Agarwal <arp@apache.org>
Date: Tue, 26 Jul 2016 12:44:36 -0700
Subject: [PATCH 2381/2748] HDFS-10642.
 TestLazyPersistReplicaRecovery#testDnRestartWithSavedReplicas
 fails intermittently. (Contributed by Mingliang
 Liu)

(cherry picked from commit c08c7b7a94085e387c71a9fb47ab2e732c3bc13c)

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestLazyPersistFiles.java
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestLazyPersistLockedMemory.java
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestLazyPersistReplicaPlacement.java
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestLazyPersistReplicaRecovery.java

Change-Id: I7c39b0f33147adeec0003ea14c03eaadb7784457
---
 .../fsdataset/impl/LazyPersistTestCase.java        |   33 +++++++++++++++-----
 .../fsdataset/impl/TestLazyPersistFiles.java       |   19 ++++++-----
 .../fsdataset/impl/TestScrLazyPersistFiles.java    |   23 +++++++-------
 3 files changed, 48 insertions(+), 27 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/LazyPersistTestCase.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/LazyPersistTestCase.java
index fb03241..510226e 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/LazyPersistTestCase.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/LazyPersistTestCase.java
@@ -40,6 +40,7 @@
 import java.util.EnumSet;
 import java.util.UUID;
 
+import com.google.common.base.Supplier;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -141,17 +142,33 @@ public void shutDownCluster() throws Exception {
   public Timeout timeout = new Timeout(300000);
 
   protected final LocatedBlocks ensureFileReplicasOnStorageType(
-      Path path, StorageType storageType) throws IOException {
+      final Path path, final StorageType storageType)
+      throws IOException, TimeoutException, InterruptedException {
     // Ensure that returned block locations returned are correct!
     LOG.info("Ensure path: " + path + " is on StorageType: " + storageType);
     assertThat(fs.exists(path), is(true));
-    long fileLength = client.getFileInfo(path.toString()).getLen();
-    LocatedBlocks locatedBlocks =
-        client.getLocatedBlocks(path.toString(), 0, fileLength);
-    for (LocatedBlock locatedBlock : locatedBlocks.getLocatedBlocks()) {
-      assertThat(locatedBlock.getStorageTypes()[0], is(storageType));
-    }
-    return locatedBlocks;
+    final long fileLength = client.getFileInfo(path.toString()).getLen();
+
+    GenericTestUtils.waitFor(new Supplier<Boolean>() {
+      @Override
+      public Boolean get() {
+        try {
+          LocatedBlocks locatedBlocks =
+              client.getLocatedBlocks(path.toString(), 0, fileLength);
+          for (LocatedBlock locatedBlock : locatedBlocks.getLocatedBlocks()) {
+            if (locatedBlock.getStorageTypes()[0] != storageType) {
+              return false;
+            }
+          }
+          return true;
+        } catch (IOException ioe) {
+          LOG.warn("Exception got in ensureFileReplicasOnStorageType()", ioe);
+          return false;
+        }
+      }
+    }, 100, 30 * 1000);
+
+    return client.getLocatedBlocks(path.toString(), 0, fileLength);
   }
 
   protected final void makeRandomTestFile(Path path, long length,
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestLazyPersistFiles.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestLazyPersistFiles.java
index bf6ebb6..388aa57 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestLazyPersistFiles.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestLazyPersistFiles.java
@@ -34,6 +34,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -113,7 +114,8 @@ public void testPolicyPersistenceInFsImage() throws IOException {
   }
 
   @Test
-  public void testPlacementOnRamDisk() throws IOException {
+  public void testPlacementOnRamDisk()
+      throws IOException, TimeoutException, InterruptedException {
     startUpCluster(true, -1);
     final String METHOD_NAME = GenericTestUtils.getMethodName();
     Path path = new Path("/" + METHOD_NAME + ".dat");
@@ -123,7 +125,8 @@ public void testPlacementOnRamDisk() throws IOException {
   }
 
   @Test
-  public void testPlacementOnSizeLimitedRamDisk() throws IOException {
+  public void testPlacementOnSizeLimitedRamDisk()
+      throws IOException, TimeoutException, InterruptedException {
     startUpCluster(true, 3);
     final String METHOD_NAME = GenericTestUtils.getMethodName();
     Path path1 = new Path("/" + METHOD_NAME + ".01.dat");
@@ -142,7 +145,7 @@ public void testPlacementOnSizeLimitedRamDisk() throws IOException {
    * @throws IOException
    */
   @Test
-  public void testFallbackToDisk() throws IOException {
+  public void testFallbackToDisk() throws IOException, TimeoutException, InterruptedException {
     startUpCluster(false, -1);
     final String METHOD_NAME = GenericTestUtils.getMethodName();
     Path path = new Path("/" + METHOD_NAME + ".dat");
@@ -254,7 +257,7 @@ public void testAppendIsDenied() throws IOException {
    */
   @Test
   public void testLazyPersistFilesAreDiscarded()
-      throws IOException, InterruptedException {
+      throws IOException, InterruptedException, TimeoutException {
     startUpCluster(true, 2);
     final String METHOD_NAME = GenericTestUtils.getMethodName();
     Path path1 = new Path("/" + METHOD_NAME + ".01.dat");
@@ -288,7 +291,7 @@ public void testLazyPersistFilesAreDiscarded()
 
   @Test
   public void testLazyPersistBlocksAreSaved()
-      throws IOException, InterruptedException {
+      throws IOException, InterruptedException, TimeoutException {
     startUpCluster(true, -1);
     final String METHOD_NAME = GenericTestUtils.getMethodName();
     Path path = new Path("/" + METHOD_NAME + ".dat");
@@ -376,7 +379,7 @@ public void testRamDiskEviction() throws Exception {
    */
   @Test
   public void testRamDiskEvictionBeforePersist()
-    throws IOException, InterruptedException {
+      throws IOException, InterruptedException, TimeoutException {
     startUpCluster(true, 1);
     final String METHOD_NAME = GenericTestUtils.getMethodName();
     Path path1 = new Path("/" + METHOD_NAME + ".01.dat");
@@ -644,7 +647,7 @@ public void testConcurrentWrites()
 
   @Test
   public void testDnRestartWithSavedReplicas()
-      throws IOException, InterruptedException {
+      throws IOException, InterruptedException, TimeoutException {
 
     startUpCluster(true, -1);
     final String METHOD_NAME = GenericTestUtils.getMethodName();
@@ -668,7 +671,7 @@ public void testDnRestartWithSavedReplicas()
 
   @Test
   public void testDnRestartWithUnsavedReplicas()
-      throws IOException, InterruptedException {
+      throws IOException, InterruptedException, TimeoutException {
 
     startUpCluster(true, 1);
     FsDatasetTestUtil.stopLazyWriter(cluster.getDataNodes().get(0));
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestScrLazyPersistFiles.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestScrLazyPersistFiles.java
index 6cdae0e..09b1327 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestScrLazyPersistFiles.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestScrLazyPersistFiles.java
@@ -39,6 +39,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.concurrent.TimeoutException;
 
 import static org.apache.hadoop.hdfs.StorageType.DEFAULT;
 import static org.apache.hadoop.hdfs.StorageType.RAM_DISK;
@@ -69,7 +70,7 @@ public void before() {
    */
   @Test
   public void testRamDiskShortCircuitRead()
-    throws IOException, InterruptedException {
+      throws IOException, InterruptedException, TimeoutException {
     startUpCluster(REPL_FACTOR,
       new StorageType[]{RAM_DISK, DEFAULT},
       2 * BLOCK_SIZE - 1, true);  // 1 replica + delta, SCR read
@@ -110,7 +111,7 @@ public void testRamDiskShortCircuitRead()
    */
   @Test
   public void testRamDiskEvictionWithShortCircuitReadHandle()
-    throws IOException, InterruptedException {
+      throws IOException, InterruptedException, TimeoutException {
     startUpCluster(REPL_FACTOR, new StorageType[] { RAM_DISK, DEFAULT },
       (6 * BLOCK_SIZE -1), true);  // 5 replica + delta, SCR.
     final String METHOD_NAME = GenericTestUtils.getMethodName();
@@ -154,7 +155,7 @@ public void testRamDiskEvictionWithShortCircuitReadHandle()
 
   @Test
   public void testShortCircuitReadAfterEviction()
-      throws IOException, InterruptedException {
+      throws IOException, InterruptedException, TimeoutException {
     Assume.assumeThat(DomainSocket.getLoadingFailureReason(), equalTo(null));
     startUpCluster(true, 1 + EVICTION_LOW_WATERMARK, true, false);
     doShortCircuitReadAfterEvictionTest();
@@ -162,13 +163,13 @@ public void testShortCircuitReadAfterEviction()
 
   @Test
   public void testLegacyShortCircuitReadAfterEviction()
-      throws IOException, InterruptedException {
+      throws IOException, InterruptedException, TimeoutException {
     startUpCluster(true, 1 + EVICTION_LOW_WATERMARK, true, true);
     doShortCircuitReadAfterEvictionTest();
   }
 
   private void doShortCircuitReadAfterEvictionTest() throws IOException,
-      InterruptedException {
+      InterruptedException, TimeoutException {
     final String METHOD_NAME = GenericTestUtils.getMethodName();
     Path path1 = new Path("/" + METHOD_NAME + ".01.dat");
     Path path2 = new Path("/" + METHOD_NAME + ".02.dat");
@@ -218,7 +219,7 @@ private void doShortCircuitReadAfterEvictionTest() throws IOException,
 
   @Test
   public void testShortCircuitReadBlockFileCorruption() throws IOException,
-      InterruptedException {
+      InterruptedException, TimeoutException {
     Assume.assumeThat(DomainSocket.getLoadingFailureReason(), equalTo(null));
     startUpCluster(true, 1 + EVICTION_LOW_WATERMARK, true, false);
     doShortCircuitReadBlockFileCorruptionTest();
@@ -226,13 +227,13 @@ public void testShortCircuitReadBlockFileCorruption() throws IOException,
 
   @Test
   public void testLegacyShortCircuitReadBlockFileCorruption() throws IOException,
-      InterruptedException {
+      InterruptedException, TimeoutException {
     startUpCluster(true, 1 + EVICTION_LOW_WATERMARK, true, true);
     doShortCircuitReadBlockFileCorruptionTest();
   }
 
   public void doShortCircuitReadBlockFileCorruptionTest() throws IOException,
-      InterruptedException {
+      InterruptedException, TimeoutException {
     final String METHOD_NAME = GenericTestUtils.getMethodName();
     Path path1 = new Path("/" + METHOD_NAME + ".01.dat");
     Path path2 = new Path("/" + METHOD_NAME + ".02.dat");
@@ -258,7 +259,7 @@ public void doShortCircuitReadBlockFileCorruptionTest() throws IOException,
 
   @Test
   public void testShortCircuitReadMetaFileCorruption() throws IOException,
-      InterruptedException {
+      InterruptedException, TimeoutException {
     Assume.assumeThat(DomainSocket.getLoadingFailureReason(), equalTo(null));
     startUpCluster(true, 1 + EVICTION_LOW_WATERMARK, true, false);
     doShortCircuitReadMetaFileCorruptionTest();
@@ -266,13 +267,13 @@ public void testShortCircuitReadMetaFileCorruption() throws IOException,
 
   @Test
   public void testLegacyShortCircuitReadMetaFileCorruption() throws IOException,
-      InterruptedException {
+      InterruptedException, TimeoutException {
     startUpCluster(true, 1 + EVICTION_LOW_WATERMARK, true, true);
     doShortCircuitReadMetaFileCorruptionTest();
   }
 
   public void doShortCircuitReadMetaFileCorruptionTest() throws IOException,
-      InterruptedException {
+      InterruptedException, TimeoutException {
     final String METHOD_NAME = GenericTestUtils.getMethodName();
     Path path1 = new Path("/" + METHOD_NAME + ".01.dat");
     Path path2 = new Path("/" + METHOD_NAME + ".02.dat");
-- 
1.7.9.5

