From 28cbe78ab6f33b3f7f906028b715e4768ed14c7d Mon Sep 17 00:00:00 2001
From: Robert Kanter <rkanter@apache.org>
Date: Mon, 12 Jan 2015 17:51:00 -0800
Subject: [PATCH 1140/2748] YARN-2643. Don't create a new
 DominantResourceCalculator on every
 FairScheduler.allocate call. (kasha via rkanter)

(cherry picked from commit 51881535e659940b1b332d0c5952ee1f9958cc7f)
(cherry picked from commit 13cdcf28e07b44d966ce23d89001250335123352)

Conflicts:
	hadoop-yarn-project/CHANGES.txt

Change-Id: I65fae7bbb5def4f8d08f742f0927106dbfd7f488
---
 .../scheduler/fair/FairScheduler.java              |    7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java
index 966ffca..9ce32b2 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java
@@ -125,6 +125,8 @@
   
   private static final ResourceCalculator RESOURCE_CALCULATOR =
       new DefaultResourceCalculator();
+  private static final ResourceCalculator DOMINANT_RESOURCE_CALCULATOR =
+      new DominantResourceCalculator();
   
   // Value that container assignment methods return when a container is
   // reserved
@@ -916,7 +918,8 @@ private synchronized void removeNode(RMNode rmNode) {
 
   @Override
   public Allocation allocate(ApplicationAttemptId appAttemptId,
-      List<ResourceRequest> ask, List<ContainerId> release, List<String> blacklistAdditions, List<String> blacklistRemovals) {
+      List<ResourceRequest> ask, List<ContainerId> release,
+      List<String> blacklistAdditions, List<String> blacklistRemovals) {
 
     // Make sure this application exists
     FSAppAttempt application = getSchedulerApp(appAttemptId);
@@ -927,7 +930,7 @@ public Allocation allocate(ApplicationAttemptId appAttemptId,
     }
 
     // Sanity check
-    SchedulerUtils.normalizeRequests(ask, new DominantResourceCalculator(),
+    SchedulerUtils.normalizeRequests(ask, DOMINANT_RESOURCE_CALCULATOR,
         clusterResource, minimumAllocation, getMaximumResourceCapability(),
         incrAllocation);
 
-- 
1.7.9.5

