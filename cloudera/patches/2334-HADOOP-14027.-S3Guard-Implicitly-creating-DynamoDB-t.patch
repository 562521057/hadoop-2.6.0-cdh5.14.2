From 4146c06aee578fc8c40be71ad60e36b9d931d47e Mon Sep 17 00:00:00 2001
From: Mingliang Liu <liuml07@apache.org>
Date: Wed, 8 Mar 2017 11:46:27 -0800
Subject: [PATCH 2334/2748] HADOOP-14027. S3Guard: Implicitly creating
 DynamoDB table ignores endpoint config.
 Contributed by Sean Mackrory

(cherry picked from commit 3a8f307a845442e68e0049c7cd88a51a712d56f0)

Change-Id: Icd5ad7abf5317a1d77bb4417501d57fd7009be3c
---
 .../fs/s3a/s3guard/DynamoDBMetadataStore.java      |   10 +++++++++-
 .../fs/s3a/ITestS3AAWSCredentialsProvider.java     |    5 +++++
 .../hadoop/fs/s3a/ITestS3ACredentialsInURL.java    |    2 +-
 .../fs/s3a/s3guard/TestDynamoDBMetadataStore.java  |   20 ++++++++++++++------
 4 files changed, 29 insertions(+), 8 deletions(-)

diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
index bc54edf..13f8ee0 100644
--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
@@ -216,7 +216,15 @@ public void initialize(FileSystem fs) throws IOException {
         "DynamoDBMetadataStore only supports S3A filesystem.");
     final S3AFileSystem s3afs = (S3AFileSystem) fs;
     final String bucket = s3afs.getBucket();
-    region = s3afs.getBucketLocation();
+    String confRegion = s3afs.getConf().getTrimmed(S3GUARD_DDB_REGION_KEY);
+    if (!StringUtils.isEmpty(confRegion)) {
+      region = confRegion;
+      LOG.debug("Overriding S3 region with configured DynamoDB region: {}",
+          region);
+    } else {
+      region = s3afs.getBucketLocation();
+      LOG.debug("Inferring DynamoDB region from S3 bucket: {}", region);
+    }
     username = s3afs.getUsername();
     conf = s3afs.getConf();
     dynamoDB = createDynamoDB(conf, region);
diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3AAWSCredentialsProvider.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3AAWSCredentialsProvider.java
index 1c32996..2c7f3e6 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3AAWSCredentialsProvider.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3AAWSCredentialsProvider.java
@@ -26,6 +26,7 @@
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.test.GenericTestUtils;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.Timeout;
@@ -102,6 +103,10 @@ public void testBadCredentials() throws Exception {
       createFailingFS(conf);
     } catch (AccessDeniedException e) {
       // expected
+    } catch (AWSServiceIOException e) {
+      GenericTestUtils.assertExceptionContains(
+          "UnrecognizedClientException", e);
+      // expected
     }
   }
 
diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3ACredentialsInURL.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3ACredentialsInURL.java
index be21994..894bda9 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3ACredentialsInURL.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3ACredentialsInURL.java
@@ -126,7 +126,7 @@ public void testInvalidCredentialsFail() throws Throwable {
     Configuration conf = new Configuration();
     String fsname = conf.getTrimmed(TEST_FS_S3A_NAME, "");
     Assume.assumeNotNull(fsname);
-    Assume.assumeFalse(S3ATestUtils.isMetadataStoreAuthoritative(conf));
+    assumeS3GuardNotEnabled(conf);
     URI original = new URI(fsname);
     URI testURI = createUriWithEmbeddedSecrets(original, "user", "//");
 
diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDynamoDBMetadataStore.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDynamoDBMetadataStore.java
index a6e639d..bcf656b 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDynamoDBMetadataStore.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDynamoDBMetadataStore.java
@@ -243,8 +243,11 @@ public void testInitialize() throws IOException {
       verifyTableInitialized(tableName);
       assertNotNull(ddbms.getTable());
       assertEquals(tableName, ddbms.getTable().getTableName());
-      assertEquals("DynamoDB table should be in the same region as S3 bucket",
-          s3afs.getBucketLocation(tableName),
+      String expectedRegion = conf.get(Constants.S3GUARD_DDB_REGION_KEY,
+          s3afs.getBucketLocation(tableName));
+      assertEquals("DynamoDB table should be in configured region or the same" +
+              " region as S3 bucket",
+          expectedRegion,
           ddbms.getRegion());
     }
   }
@@ -258,6 +261,8 @@ public void testInitializeWithConfiguration() throws IOException {
     final String tableName = "testInitializeWithConfiguration";
     final Configuration conf = getFileSystem().getConf();
     conf.unset(Constants.S3GUARD_DDB_TABLE_NAME_KEY);
+    String savedRegion = conf.get(Constants.S3GUARD_DDB_REGION_KEY,
+        getFileSystem().getBucketLocation());
     conf.unset(Constants.S3GUARD_DDB_REGION_KEY);
     try {
       DynamoDBMetadataStore ddbms = new DynamoDBMetadataStore();
@@ -274,8 +279,7 @@ public void testInitializeWithConfiguration() throws IOException {
     } catch (IllegalArgumentException ignored) {
     }
     // config region
-    conf.set(Constants.S3GUARD_DDB_REGION_KEY,
-        getFileSystem().getBucketLocation());
+    conf.set(Constants.S3GUARD_DDB_REGION_KEY, savedRegion);
     try (DynamoDBMetadataStore ddbms = new DynamoDBMetadataStore()) {
       ddbms.initialize(conf);
       verifyTableInitialized(tableName);
@@ -397,7 +401,9 @@ public void testItemLacksVersion() throws Throwable {
   @Test
   public void testTableVersionRequired() throws Exception {
     final DynamoDBMetadataStore ddbms = createContract().getMetadataStore();
-    Table table = verifyTableInitialized(BUCKET);
+    String tableName = getFileSystem().getConf().get(Constants
+        .S3GUARD_DDB_TABLE_NAME_KEY, BUCKET);
+    Table table = verifyTableInitialized(tableName);
     table.deleteItem(VERSION_MARKER_PRIMARY_KEY);
 
     boolean exceptionThrown = false;
@@ -420,7 +426,9 @@ public void testTableVersionRequired() throws Exception {
   @Test
   public void testTableVersionMismatch() throws Exception {
     final DynamoDBMetadataStore ddbms = createContract().getMetadataStore();
-    Table table = verifyTableInitialized(BUCKET);
+    String tableName = getFileSystem().getConf().get(Constants
+        .S3GUARD_DDB_TABLE_NAME_KEY, BUCKET);
+    Table table = verifyTableInitialized(tableName);
     table.deleteItem(VERSION_MARKER_PRIMARY_KEY);
     Item v200 = createVersionMarker(VERSION_MARKER, 200, 0);
     table.putItem(v200);
-- 
1.7.9.5

