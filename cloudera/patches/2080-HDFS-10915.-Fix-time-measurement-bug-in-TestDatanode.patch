From b6eb78b880ca518b521edeb82994034353753624 Mon Sep 17 00:00:00 2001
From: Mingliang Liu <liuml07@apache.org>
Date: Tue, 27 Sep 2016 20:40:17 -0700
Subject: [PATCH 2080/2748] HDFS-10915. Fix time measurement bug in
 TestDatanodeRestart. Contributed by Xiaobing Zhou

(cherry picked from commit 6437ba18c5c26bc271a63aff5ea03756f43dd9a3)
(cherry picked from commit bdc97f74fefcc28937fbd5d6fe163f607b261121)

Change-Id: Id80a0e3ffa36896eafd07902df2efb55959a38b6
---
 .../fsdataset/impl/TestDatanodeRestart.java        |   13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestDatanodeRestart.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestDatanodeRestart.java
index d7f8787..adde6ca 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestDatanodeRestart.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/TestDatanodeRestart.java
@@ -44,6 +44,7 @@
 import org.apache.hadoop.hdfs.server.datanode.fsdataset.FsDatasetSpi;
 import org.apache.hadoop.hdfs.server.datanode.fsdataset.FsVolumeSpi;
 import org.apache.hadoop.io.IOUtils;
+import org.apache.hadoop.util.Time;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -171,17 +172,17 @@ public void noRegistration() throws IOException {
       cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDNs).build();
       cluster.waitActive();
 
-      start = System.currentTimeMillis();
+      start = Time.monotonicNow();
       FileSystem fileSys = cluster.getFileSystem();
       try {
         DFSTestUtil.createFile(fileSys, file, 10240L, (short)1, 0L);
         // It is a bug if this does not fail.
         throw new IOException("Did not fail!");
       } catch (org.apache.hadoop.ipc.RemoteException e) {
-        long elapsed = System.currentTimeMillis() - start;
+        long elapsed = Time.monotonicNow() - start;
         // timers have at-least semantics, so it should be at least 5 seconds.
         if (elapsed < 5000 || elapsed > 10000) {
-          throw new IOException(elapsed + " seconds passed.", e);
+          throw new IOException(elapsed + " milliseconds passed.", e);
         }
       }
       DataNodeFaultInjector.instance = oldDnInjector;
@@ -194,18 +195,18 @@ public void noRegistration() throws IOException {
       // back to simulating unregistered node.
       DataNodeFaultInjector.instance = dnFaultInjector;
       byte[] buffer = new byte[8];
-      start = System.currentTimeMillis();
+      start = Time.monotonicNow();
       try {
         fileSys.open(file).read(0L, buffer, 0, 1);
         throw new IOException("Did not fail!");
       } catch (IOException e) {
-        long elapsed = System.currentTimeMillis() - start;
+        long elapsed = Time.monotonicNow() - start;
         if (e.getMessage().contains("readBlockLength")) {
           throw new IOException("Failed, but with unexpected exception:", e);
         }
         // timers have at-least semantics, so it should be at least 5 seconds.
         if (elapsed < 5000 || elapsed > 10000) {
-          throw new IOException(elapsed + " seconds passed.", e);
+          throw new IOException(elapsed + " milliseconds passed.", e);
         }
       }
       DataNodeFaultInjector.instance = oldDnInjector;
-- 
1.7.9.5

