From 893e4167674248c436a80425c3de79f8b5d7b099 Mon Sep 17 00:00:00 2001
From: Aaron Fabbri <fabbri@apache.org>
Date: Tue, 4 Apr 2017 11:35:42 -0700
Subject: [PATCH 2421/2748] S3Guard: DynamoDBMetadataStore::move() should
 populate ancestor directories.  Contributed by
 Mingliang Liu.

See: HADOOP-14226

(cherry picked from commit 48bda91e4888b6311bc327351fe9fb3512b8ec1e)

Change-Id: I5080664a49fa02d28ea77cb0299aa98e7156ec08
---
 .../fs/s3a/s3guard/DynamoDBMetadataStore.java      |   34 +++++++++-
 .../fs/s3a/s3guard/MetadataStoreTestBase.java      |    4 +-
 .../fs/s3a/s3guard/TestDynamoDBMetadataStore.java  |   70 ++++++++++++++++++++
 3 files changed, 105 insertions(+), 3 deletions(-)

diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
index f598764..c3718d1 100644
--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
@@ -25,6 +25,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Date;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
@@ -418,9 +419,40 @@ public void move(Collection<Path> pathsToDelete,
         pathsToCreate == null ? 0 : pathsToCreate.size());
     LOG.trace("move: pathsToDelete = {}, pathsToCreate = {}", pathsToDelete,
         pathsToCreate);
+
+    // In DynamoDBMetadataStore implementation, we assume that if a path
+    // exists, all its ancestors will also exist in the table.
+    // Following code is to maintain this invariant by putting all ancestor
+    // directories of the paths to create.
+    // ancestor paths that are not explicitly added to paths to create
+    Collection<PathMetadata> inferredPathsToCreate = null;
+    if (pathsToCreate != null) {
+      inferredPathsToCreate = new ArrayList<>(pathsToCreate);
+      // help set for fast look up; we should avoid putting duplicate paths
+      final Collection<Path> fullPathsToCreate = new HashSet<>();
+      for (PathMetadata meta : pathsToCreate) {
+        fullPathsToCreate.add(meta.getFileStatus().getPath());
+      }
+
+      for (PathMetadata meta : pathsToCreate) {
+        Preconditions.checkArgument(meta != null);
+        Path parent = meta.getFileStatus().getPath().getParent();
+        while (parent != null
+            && !parent.isRoot()
+            && !fullPathsToCreate.contains(parent)) {
+          LOG.debug("move: auto-create ancestor path {} for child path {}",
+              parent, meta.getFileStatus().getPath());
+          final FileStatus status = makeDirStatus(parent, username);
+          inferredPathsToCreate.add(new PathMetadata(status, Tristate.FALSE));
+          fullPathsToCreate.add(parent);
+          parent = parent.getParent();
+        }
+      }
+    }
+
     try {
       processBatchWriteRequest(pathToKey(pathsToDelete),
-          pathMetadataToItem(pathsToCreate));
+          pathMetadataToItem(inferredPathsToCreate));
     } catch (AmazonClientException e) {
       throw translateException("move", (String) null, e);
     }
diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreTestBase.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreTestBase.java
index ae899ed..36a5cc5 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreTestBase.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreTestBase.java
@@ -710,7 +710,7 @@ private void assertNotCached(String pathStr) throws IOException {
     assertNull(pathStr + " should not be cached.", meta);
   }
 
-  private void assertCached(String pathStr) throws IOException {
+  protected void assertCached(String pathStr) throws IOException {
     Path path = strToPath(pathStr);
     PathMetadata meta = ms.get(path);
     assertNotNull(pathStr + " should be cached.", meta);
@@ -719,7 +719,7 @@ private void assertCached(String pathStr) throws IOException {
   /**
    * Convenience to create a fully qualified Path from string.
    */
-  private Path strToPath(String p) {
+  Path strToPath(String p) {
     final Path path = new Path(p);
     assert path.isAbsolute();
     return path.makeQualified(contract.getFileSystem().getUri(), null);
diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDynamoDBMetadataStore.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDynamoDBMetadataStore.java
index f3ce1e4..008837f 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDynamoDBMetadataStore.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDynamoDBMetadataStore.java
@@ -32,6 +32,7 @@
 import com.amazonaws.services.dynamodbv2.model.ResourceNotFoundException;
 import com.amazonaws.services.dynamodbv2.model.TableDescription;
 
+import com.google.common.collect.Lists;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.hadoop.fs.s3a.Tristate;
 
@@ -442,6 +443,75 @@ private void verifyRootDirectory(PathMetadata rootMeta, boolean isEmpty) {
     }
   }
 
+  /**
+   * Test that when moving nested paths, all its ancestors up to destination
+   * root will also be created.
+   * Here is the directory tree before move:
+   *
+   * testMovePopulateAncestors
+   * ├── a
+   * │   └── b
+   * │       └── src
+   * │           ├── dir1
+   * │           │   └── dir2
+   * │           └── file1.txt
+   * └── c
+   *     └── d
+   *         └── dest
+   *
+   * As part of rename(a/b/src, d/c/dest), S3A will enumerate the subtree at
+   * a/b/src.  This test verifies that after the move, the new subtree at
+   * 'dest' is reachable from the root (i.e. c/ and c/d exist in the table.
+   * DynamoDBMetadataStore depends on this property to do recursive delete
+   * without a full table scan.
+   */
+  @Test
+  public void testMovePopulatesAncestors() throws IOException {
+    final DynamoDBMetadataStore ddbms = getDynamoMetadataStore();
+    final String testRoot = "/testMovePopulatesAncestors";
+    final String srcRoot = testRoot + "/a/b/src";
+    final String destRoot = testRoot + "/c/d/e/dest";
+
+    final Path nestedPath1 = strToPath(srcRoot + "/file1.txt");
+    ddbms.put(new PathMetadata(basicFileStatus(nestedPath1, 1024, false)));
+    final Path nestedPath2 = strToPath(srcRoot + "/dir1/dir2");
+    ddbms.put(new PathMetadata(basicFileStatus(nestedPath2, 0, true)));
+
+    // We don't put the destRoot path here, since put() would create ancestor
+    // entries, and we want to ensure that move() does it, instead.
+
+    // Build enumeration of src / dest paths and do the move()
+    final Collection<Path> fullSourcePaths = Lists.newArrayList(
+        strToPath(srcRoot),
+        strToPath(srcRoot + "/dir1"),
+        strToPath(srcRoot + "/dir1/dir2"),
+        strToPath(srcRoot + "/file1.txt")
+    );
+    final Collection<PathMetadata> pathsToCreate = Lists.newArrayList(
+        new PathMetadata(basicFileStatus(strToPath(destRoot),
+            0, true)),
+        new PathMetadata(basicFileStatus(strToPath(destRoot + "/dir1"),
+            0, true)),
+        new PathMetadata(basicFileStatus(strToPath(destRoot + "/dir1/dir2"),
+            0, true)),
+        new PathMetadata(basicFileStatus(strToPath(destRoot + "/file1.txt"),
+            1024, false))
+    );
+
+    ddbms.move(fullSourcePaths, pathsToCreate);
+
+    // assert that all the ancestors should have been populated automatically
+    assertCached(testRoot + "/c");
+    assertCached(testRoot + "/c/d");
+    assertCached(testRoot + "/c/d/e");
+    assertCached(destRoot /* /c/d/e/dest */);
+
+    // Also check moved files while we're at it
+    assertCached(destRoot + "/dir1");
+    assertCached(destRoot + "/dir1/dir2");
+    assertCached(destRoot + "/file1.txt");
+  }
+
   @Test
   public void testProvisionTable() throws IOException {
     final DynamoDBMetadataStore ddbms = getDynamoMetadataStore();
-- 
1.7.9.5

