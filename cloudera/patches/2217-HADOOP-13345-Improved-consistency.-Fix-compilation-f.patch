From 791ca9c68ec8e4b7587e0f31353a377c20f87af7 Mon Sep 17 00:00:00 2001
From: Aaron Fabbri <fabbri@apache.org>
Date: Fri, 4 Nov 2016 20:33:10 -0700
Subject: [PATCH 2217/2748] HADOOP-13345 Improved consistency.. Fix
 compilation for latest trunk.

(cherry picked from commit 56b715f8e249e1c926aa7c1038ff6776ec181912)

Change-Id: I4f15f259f1699961cd449d5a9eff994add700f7b
---
 .../fs/s3a/s3guard/TestDirListingMetadata.java     |   59 ++++++++++++--------
 1 file changed, 35 insertions(+), 24 deletions(-)

diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDirListingMetadata.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDirListingMetadata.java
index 1ca7f54..ca76f8b 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDirListingMetadata.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestDirListingMetadata.java
@@ -38,6 +38,8 @@
  */
 public class TestDirListingMetadata {
 
+  private static final String TEST_OWNER = "hadoop";
+
   @Rule
   public ExpectedException exception = ExpectedException.none();
 
@@ -73,11 +75,11 @@ public void testEmptyListing() {
   public void testListing() {
     Path path = new Path("/path");
     PathMetadata pathMeta1 = new PathMetadata(
-        new S3AFileStatus(true, true, new Path(path, "dir1")));
+        new S3AFileStatus(true, new Path(path, "dir1"), TEST_OWNER));
     PathMetadata pathMeta2 = new PathMetadata(
-        new S3AFileStatus(true, false, new Path(path, "dir2")));
+        new S3AFileStatus(true, new Path(path, "dir2"), TEST_OWNER));
     PathMetadata pathMeta3 = new PathMetadata(
-        new S3AFileStatus(123, 456, new Path(path, "file1"), 789));
+        new S3AFileStatus(123, 456, new Path(path, "file1"), 8192, TEST_OWNER));
     List<PathMetadata> listing = Arrays.asList(pathMeta1, pathMeta2, pathMeta3);
     DirListingMetadata meta = new DirListingMetadata(path, listing, false);
     assertEquals(path, meta.getPath());
@@ -92,14 +94,7 @@ public void testListing() {
   @Test
   public void testListingUnmodifiable() {
     Path path = new Path("/path");
-    PathMetadata pathMeta1 = new PathMetadata(
-        new S3AFileStatus(true, true, new Path(path, "dir1")));
-    PathMetadata pathMeta2 = new PathMetadata(
-        new S3AFileStatus(true, false, new Path(path, "dir2")));
-    PathMetadata pathMeta3 = new PathMetadata(
-        new S3AFileStatus(123, 456, new Path(path, "file1"), 789));
-    List<PathMetadata> listing = Arrays.asList(pathMeta1, pathMeta2, pathMeta3);
-    DirListingMetadata meta = new DirListingMetadata(path, listing, false);
+    DirListingMetadata meta = makeTwoDirsOneFile(path);
     assertNotNull(meta.getListing());
     exception.expect(UnsupportedOperationException.class);
     meta.getListing().clear();
@@ -131,11 +126,11 @@ public void testSetAuthoritative() {
   public void testGet() {
     Path path = new Path("/path");
     PathMetadata pathMeta1 = new PathMetadata(
-        new S3AFileStatus(true, true, new Path(path, "dir1")));
+        new S3AFileStatus(true, new Path(path, "dir1"), TEST_OWNER));
     PathMetadata pathMeta2 = new PathMetadata(
-        new S3AFileStatus(true, false, new Path(path, "dir2")));
+        new S3AFileStatus(true, new Path(path, "dir2"), TEST_OWNER));
     PathMetadata pathMeta3 = new PathMetadata(
-        new S3AFileStatus(123, 456, new Path(path, "file1"), 789));
+        new S3AFileStatus(123, 456, new Path(path, "file1"), 8192, TEST_OWNER));
     List<PathMetadata> listing = Arrays.asList(pathMeta1, pathMeta2, pathMeta3);
     DirListingMetadata meta = new DirListingMetadata(path, listing, false);
     assertEquals(path, meta.getPath());
@@ -182,11 +177,11 @@ public void testGetNotChild() {
   public void testPut() {
     Path path = new Path("/path");
     PathMetadata pathMeta1 = new PathMetadata(
-        new S3AFileStatus(true, true, new Path(path, "dir1")));
+        new S3AFileStatus(true, new Path(path, "dir1"), TEST_OWNER));
     PathMetadata pathMeta2 = new PathMetadata(
-        new S3AFileStatus(true, false, new Path(path, "dir2")));
+        new S3AFileStatus(true, new Path(path, "dir2"), TEST_OWNER));
     PathMetadata pathMeta3 = new PathMetadata(
-        new S3AFileStatus(123, 456, new Path(path, "file1"), 789));
+        new S3AFileStatus(123, 456, new Path(path, "file1"), 8192, TEST_OWNER));
     List<PathMetadata> listing = Arrays.asList(pathMeta1, pathMeta2, pathMeta3);
     DirListingMetadata meta = new DirListingMetadata(path, listing, false);
     assertEquals(path, meta.getPath());
@@ -197,7 +192,7 @@ public void testPut() {
     assertTrue(meta.getListing().contains(pathMeta3));
     assertFalse(meta.isAuthoritative());
     PathMetadata pathMeta4 = new PathMetadata(
-        new S3AFileStatus(true, true, new Path(path, "dir3")));
+        new S3AFileStatus(true, new Path(path, "dir3"), TEST_OWNER));
     meta.put(pathMeta4.getFileStatus());
     assertTrue(meta.getListing().contains(pathMeta4));
     assertEquals(pathMeta4, meta.get(pathMeta4.getFileStatus().getPath()));
@@ -218,7 +213,7 @@ public void testPutNullPath() {
     DirListingMetadata meta = new DirListingMetadata(path, null, false);
     exception.expect(NullPointerException.class);
     exception.expectMessage(notNullValue(String.class));
-    meta.put(new S3AFileStatus(true, true, null));
+    meta.put(new S3AFileStatus(true, null, TEST_OWNER));
   }
 
   @Test
@@ -227,7 +222,7 @@ public void testPutRoot() {
     DirListingMetadata meta = new DirListingMetadata(path, null, false);
     exception.expect(IllegalArgumentException.class);
     exception.expectMessage(notNullValue(String.class));
-    meta.put(new S3AFileStatus(true, true, new Path("/")));
+    meta.put(new S3AFileStatus(true, new Path("/"), TEST_OWNER));
   }
 
   @Test
@@ -236,18 +231,19 @@ public void testPutNotChild() {
     DirListingMetadata meta = new DirListingMetadata(path, null, false);
     exception.expect(IllegalArgumentException.class);
     exception.expectMessage(notNullValue(String.class));
-    meta.put(new S3AFileStatus(true, true, new Path("/different/ancestor")));
+    meta.put(new S3AFileStatus(true, new Path("/different/ancestor"),
+        TEST_OWNER));
   }
 
   @Test
   public void testRemove() {
     Path path = new Path("/path");
     PathMetadata pathMeta1 = new PathMetadata(
-        new S3AFileStatus(true, true, new Path(path, "dir1")));
+        new S3AFileStatus(true, new Path(path, "dir1"), TEST_OWNER));
     PathMetadata pathMeta2 = new PathMetadata(
-        new S3AFileStatus(true, false, new Path(path, "dir2")));
+        new S3AFileStatus(true, new Path(path, "dir2"), TEST_OWNER));
     PathMetadata pathMeta3 = new PathMetadata(
-        new S3AFileStatus(123, 456, new Path(path, "file1"), 789));
+        new S3AFileStatus(123, 456, new Path(path, "file1"), 8192, TEST_OWNER));
     List<PathMetadata> listing = Arrays.asList(pathMeta1, pathMeta2, pathMeta3);
     DirListingMetadata meta = new DirListingMetadata(path, listing, false);
     assertEquals(path, meta.getPath());
@@ -288,4 +284,19 @@ public void testRemoveNotChild() {
     exception.expectMessage(notNullValue(String.class));
     meta.remove(new Path("/different/ancestor"));
   }
+
+  /*
+   * Create DirListingMetadata with two dirs and one file living in directory
+   * 'parent'
+   */
+  private static DirListingMetadata makeTwoDirsOneFile(Path parent) {
+    PathMetadata pathMeta1 = new PathMetadata(
+        new S3AFileStatus(true, new Path(parent, "dir1"), TEST_OWNER));
+    PathMetadata pathMeta2 = new PathMetadata(
+        new S3AFileStatus(true, new Path(parent, "dir2"), TEST_OWNER));
+    PathMetadata pathMeta3 = new PathMetadata(
+        new S3AFileStatus(123, 456, new Path(parent, "file1"), 8192, TEST_OWNER));
+    List<PathMetadata> listing = Arrays.asList(pathMeta1, pathMeta2, pathMeta3);
+    return new DirListingMetadata(parent, listing, false);
+  }
 }
-- 
1.7.9.5

