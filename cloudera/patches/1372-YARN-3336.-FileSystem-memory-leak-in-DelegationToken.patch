From 6b2671e4f53d61024d3c43a00000c066b667c5e8 Mon Sep 17 00:00:00 2001
From: cnauroth <cnauroth@apache.org>
Date: Mon, 23 Mar 2015 10:45:50 -0700
Subject: [PATCH 1372/2748] YARN-3336. FileSystem memory leak in
 DelegationTokenRenewer.

(cherry picked from commit 6ca1f12024fd7cec7b01df0f039ca59f3f365dc1)
(cherry picked from commit 342c525eaa0749175f0e3827d245642776d043a5)

Change-Id: I3805d87f6e63179db2f88d669c389358bfef6d8e
---
 .../security/DelegationTokenRenewer.java           |   13 +++++-
 .../security/TestDelegationTokenRenewer.java       |   42 +++++++++++++++-----
 2 files changed, 44 insertions(+), 11 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java
index 513e4d6..67b0795 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java
@@ -666,6 +666,7 @@ private void requestNewHdfsDelegationToken(
     }
   }
 
+  @VisibleForTesting
   protected Token<?>[] obtainSystemTokensForUser(String user,
       final Credentials credentials) throws IOException, InterruptedException {
     // Get new hdfs tokens on behalf of this user
@@ -676,8 +677,16 @@ private void requestNewHdfsDelegationToken(
         proxyUser.doAs(new PrivilegedExceptionAction<Token<?>[]>() {
           @Override
           public Token<?>[] run() throws Exception {
-            return FileSystem.get(getConfig()).addDelegationTokens(
-              UserGroupInformation.getLoginUser().getUserName(), credentials);
+            FileSystem fs = FileSystem.get(getConfig());
+            try {
+              return fs.addDelegationTokens(
+                  UserGroupInformation.getLoginUser().getUserName(),
+                  credentials);
+            } finally {
+              // Close the FileSystem created by the new proxy user,
+              // So that we don't leave an entry in the FileSystem cache
+              fs.close();
+            }
           }
         });
     return newTokens;
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/security/TestDelegationTokenRenewer.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/security/TestDelegationTokenRenewer.java
index 68477b1..a4bf268 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/security/TestDelegationTokenRenewer.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/security/TestDelegationTokenRenewer.java
@@ -289,9 +289,16 @@ public String toString() {
    * exception
    */
   static class MyFS extends DistributedFileSystem {
-    
-    public MyFS() {}
-    public void close() {}
+    private static AtomicInteger instanceCounter = new AtomicInteger();
+    public MyFS() {
+      instanceCounter.incrementAndGet();
+    }
+    public void close() {
+      instanceCounter.decrementAndGet();
+    }
+    public static int getInstanceCounter() {
+      return instanceCounter.get();
+    }
     @Override
     public void initialize(URI uri, Configuration conf) throws IOException {}
     
@@ -301,6 +308,11 @@ public MyToken getDelegationToken(String renewer) throws IOException {
       LOG.info("Called MYDFS.getdelegationtoken " + result);
       return result;
     }
+
+    public Token<?>[] addDelegationTokens(
+        final String renewer, Credentials credentials) throws IOException {
+      return new Token<?>[0];
+    }
   }
   
   /**
@@ -1049,7 +1061,7 @@ public void testAppSubmissionWithPreviousToken() throws Exception{
   // renewed while all apps are running, and then cancelled when all apps
   // complete
   @Test (timeout = 30000)
-  public void testCancelWithMultipleAppSubmissions() throws Exception{
+  public void testCancelWithMultipleAppSubmissions() throws Exception {
     MockRM rm = new TestSecurityMockRM(conf, null);
     rm.start();
     final MockNM nm1 =
@@ -1063,10 +1075,10 @@ public void testCancelWithMultipleAppSubmissions() throws Exception{
     Text userText1 = new Text("user");
     DelegationTokenIdentifier dtId1 =
         new DelegationTokenIdentifier(userText1, new Text("renewer1"),
-          userText1);
+            userText1);
     final Token<DelegationTokenIdentifier> token1 =
         new Token<DelegationTokenIdentifier>(dtId1.getBytes(),
-          "password1".getBytes(), dtId1.getKind(), new Text("service1"));
+            "password1".getBytes(), dtId1.getKind(), new Text("service1"));
 
     Credentials credentials = new Credentials();
     credentials.addToken(token1.getService(), token1);
@@ -1078,7 +1090,7 @@ public void testCancelWithMultipleAppSubmissions() throws Exception{
 
     RMApp app1 =
         rm.submitApp(200, "name", "user", null, false, null, 2, credentials,
-          null, true, false, false, null, 0, null, true);
+            null, true, false, false, null, 0, null, true);
     MockAM am1 = MockRM.launchAndRegisterAM(app1, rm, nm1);
     rm.waitForState(app1.getApplicationId(), RMAppState.RUNNING);
 
@@ -1087,7 +1099,7 @@ public void testCancelWithMultipleAppSubmissions() throws Exception{
     Assert.assertTrue(dttr.referringAppIds.contains(app1.getApplicationId()));
     RMApp app2 =
         rm.submitApp(200, "name", "user", null, false, null, 2, credentials,
-          null, true, false, false, null, 0, null, true);
+            null, true, false, false, null, 0, null, true);
     MockAM am2 = MockRM.launchAndRegisterAM(app2, rm, nm1);
     rm.waitForState(app2.getApplicationId(), RMAppState.RUNNING);
     Assert.assertTrue(renewer.getAllTokens().containsKey(token1));
@@ -1105,7 +1117,7 @@ public void testCancelWithMultipleAppSubmissions() throws Exception{
 
     RMApp app3 =
         rm.submitApp(200, "name", "user", null, false, null, 2, credentials,
-          null, true, false, false, null, 0, null, true);
+            null, true, false, false, null, 0, null, true);
     MockAM am3 = MockRM.launchAndRegisterAM(app3, rm, nm1);
     rm.waitForState(app3.getApplicationId(), RMAppState.RUNNING);
     Assert.assertTrue(renewer.getAllTokens().containsKey(token1));
@@ -1127,4 +1139,16 @@ public void testCancelWithMultipleAppSubmissions() throws Exception{
     Assert.assertTrue(dttr.isTimerCancelled());
     Assert.assertTrue(Renewer.cancelled);
   }
+
+  // Test FileSystem memory leak in obtainSystemTokensForUser.
+  @Test
+  public void testFSLeakInObtainSystemTokensForUser() throws Exception{
+    Credentials credentials = new Credentials();
+    String user = "test";
+    int oldCounter = MyFS.getInstanceCounter();
+    delegationTokenRenewer.obtainSystemTokensForUser(user, credentials);
+    delegationTokenRenewer.obtainSystemTokensForUser(user, credentials);
+    delegationTokenRenewer.obtainSystemTokensForUser(user, credentials);
+    Assert.assertEquals(oldCounter, MyFS.getInstanceCounter());
+  }
 }
-- 
1.7.9.5

