From 7f569d3aec52377808cf9ed28484a216294f146b Mon Sep 17 00:00:00 2001
From: Daniel Templeton <daniel@cloudera.com>
Date: Wed, 29 Jun 2016 10:21:41 -0700
Subject: [PATCH 1638/2748] Revert "HDFS-10463.
 TestRollingFileSystemSinkWithHdfs needs some
 cleanup. (Daniel Templeton via kasha)"

This reverts commit 3c6c09fa37c9369c096204d45351b401d23baae2.

Change-Id: Ib5f647045c6633798b5b8af2eaf53fe299e289ae
---
 .../sink/RollingFileSystemSinkTestBase.java        |    8 +-
 .../sink/TestRollingFileSystemSinkWithHdfs.java    |   83 ++++++++------------
 2 files changed, 35 insertions(+), 56 deletions(-)

diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSinkTestBase.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSinkTestBase.java
index c74820b..8a315a1 100644
--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSinkTestBase.java
+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSinkTestBase.java
@@ -221,12 +221,8 @@ protected String doWriteTest(MetricsSystem ms, String path, int count)
     mm1.testMetric2.incr(2);
 
     ms.publishMetricsNow(); // publish the metrics
-
-    try {
-      ms.stop();
-    } finally {
-      ms.shutdown();
-    }
+    ms.stop();
+    ms.shutdown();
 
     return readLogFile(path, then, count);
   }
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/metrics2/sink/TestRollingFileSystemSinkWithHdfs.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/metrics2/sink/TestRollingFileSystemSinkWithHdfs.java
index f835b3f..9c80b2d 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/metrics2/sink/TestRollingFileSystemSinkWithHdfs.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/metrics2/sink/TestRollingFileSystemSinkWithHdfs.java
@@ -109,7 +109,7 @@ public void testAppend() throws Exception {
   public void testSilentAppend() throws Exception {
     String path = "hdfs://" + cluster.getNameNode().getHostAndPort() + "/tmp";
 
-    assertExtraContents(doAppendTest(path, true, true, 1));
+    assertExtraContents(doAppendTest(path, false, true, 1));
   }
 
   /**
@@ -159,11 +159,8 @@ public void testFailedWrite() throws IOException {
     assertTrue("No exception was generated while writing metrics "
         + "even though HDFS was unavailable", MockSink.errored);
 
-    try {
-      ms.stop();
-    } finally {
-      ms.shutdown();
-    }
+    ms.stop();
+    ms.shutdown();
   }
 
   /**
@@ -186,14 +183,13 @@ public void testFailedClose() throws IOException {
 
     try {
       ms.stop();
-
       fail("No exception was generated while stopping sink "
           + "even though HDFS was unavailable");
     } catch (MetricsException ex) {
       // Expected
-    } finally {
-      ms.shutdown();
     }
+
+    ms.shutdown();
   }
 
   /**
@@ -219,11 +215,8 @@ public void testSilentFailedWrite() throws IOException, InterruptedException {
         + "while HDFS was unavailable, even though the sink is set to "
         + "ignore errors", MockSink.errored);
 
-    try {
-      ms.stop();
-    } finally {
-      ms.shutdown();
-    }
+    ms.stop();
+    ms.shutdown();
   }
 
   /**
@@ -244,15 +237,13 @@ public void testSilentFailedClose() throws IOException {
     shutdownHdfs();
     MockSink.errored = false;
 
-    try {
-      ms.stop();
+    ms.stop();
 
-      assertFalse("An exception was generated stopping sink "
-          + "while HDFS was unavailable, even though the sink is set to "
-          + "ignore errors", MockSink.errored);
-    } finally {
-      ms.shutdown();
-    }
+    assertFalse("An exception was generated stopping sink "
+        + "while HDFS was unavailable, even though the sink is set to "
+        + "ignore errors", MockSink.errored);
+
+    ms.shutdown();
   }
 
   /**
@@ -281,37 +272,29 @@ public void testFlushThread() throws Exception {
 
     int count = 0;
 
-    try {
-      // Sleep until the flusher has run. This should never actually need to
-      // sleep, but the sleep is here to make sure this test isn't flakey.
-      while (!RollingFileSystemSink.hasFlushed) {
-        Thread.sleep(10L);
-
-        if (++count > 1000) {
-          fail("Flush thread did not run within 10 seconds");
-        }
-      }
+    // Sleep until the flusher has run. This should never actually need to
+    // sleep, but the sleep is here to make sure this test isn't flakey.
+    while (!RollingFileSystemSink.hasFlushed) {
+      Thread.sleep(10L);
 
-      Calendar now = Calendar.getInstance();
-      Path currentDir = new Path(path, DATE_FORMAT.format(now.getTime()) + "00");
-      FileSystem fs = FileSystem.newInstance(new URI(path), new Configuration());
-      Path currentFile =
-          findMostRecentLogFile(fs, new Path(currentDir, getLogFilename()));
-      FileStatus status = fs.getFileStatus(currentFile);
-
-      // Each metrics record is 118+ bytes, depending on hostname
-      assertTrue("The flusher thread didn't flush the log contents. Expected "
-          + "at least 236 bytes in the log file, but got " + status.getLen(),
-          status.getLen() >= 236);
-    } finally {
-      RollingFileSystemSink.forceFlush = false;
-
-      try {
-        ms.stop();
-      } finally {
-        ms.shutdown();
+      if (++count > 1000) {
+        fail("Flush thread did not run within 10 seconds");
       }
     }
+
+    Calendar now = Calendar.getInstance();
+    Path currentDir = new Path(path, DATE_FORMAT.format(now.getTime()) + "00");
+    FileSystem fs = FileSystem.newInstance(new URI(path), new Configuration());
+    Path currentFile =
+        findMostRecentLogFile(fs, new Path(currentDir, getLogFilename()));
+    FileStatus status = fs.getFileStatus(currentFile);
+
+    // Each metrics record is 118+ bytes, depending on hostname
+    assertTrue("The flusher thread didn't flush the log contents. Expected "
+        + "at least 236 bytes in the log file, but got " + status.getLen(),
+        status.getLen() >= 236);
+
+    ms.stop();
   }
 
   /**
-- 
1.7.9.5

