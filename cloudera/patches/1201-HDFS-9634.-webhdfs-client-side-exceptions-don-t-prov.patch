From b121783cbeb163f9a73ece8c510bc66de7276e88 Mon Sep 17 00:00:00 2001
From: Kihwal Lee <kihwal@apache.org>
Date: Wed, 20 Jan 2016 15:33:59 -0600
Subject: [PATCH 1201/2748] HDFS-9634. webhdfs client side exceptions don't
 provide enough details. Contributed by Eric
 Payne. (cherry picked from commit
 7b70500484574a565dd8cd5c7d8b5bc7c6d91154)

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt

(cherry picked from commit e160ddfb8d7ef3acbe22cde850b48671719f8338)

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java

Change-Id: I43fecf8cc2468c9048b43861776113612ed3d97c
---
 .../apache/hadoop/hdfs/web/WebHdfsFileSystem.java  |   17 ++++++++++++++++-
 .../hadoop/hdfs/web/TestWebHdfsTimeouts.java       |   14 +++++++-------
 2 files changed, 23 insertions(+), 8 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java
index 477d644..f660351 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java
@@ -25,6 +25,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.lang.reflect.InvocationTargetException;
 import java.net.HttpURLConnection;
 import java.net.InetSocketAddress;
 import java.net.MalformedURLException;
@@ -475,6 +476,7 @@ URL toUrl(final HttpOpParam.Op op, final Path fspath,
     protected ExcludeDatanodesParam excludeDatanodes = new ExcludeDatanodesParam("");
 
     private boolean checkRetry;
+    private String redirectHost;
 
     protected AbstractRunner(final HttpOpParam.Op op, boolean redirected) {
       this.op = op;
@@ -525,7 +527,7 @@ public T run() throws IOException {
      */
     protected HttpURLConnection connect(URL url) throws IOException {
       //redirect hostname and port
-      String redirectHost = null;
+      redirectHost = null;
 
       
       // resolve redirects for a DN operation unless already resolved
@@ -631,6 +633,19 @@ private T runWithRetry() throws IOException {
             throw it;
           }
         } catch (IOException ioe) {
+          // Attempt to include the redirected node in the exception. If the
+          // attempt to recreate the exception fails, just use the original.
+          String node = redirectHost;
+          if (node == null) {
+            node = url.getAuthority();
+          }
+          try {
+              ioe = ioe.getClass().getConstructor(String.class)
+                    .newInstance(node + ": " + ioe.getMessage());
+          } catch (NoSuchMethodException | SecurityException 
+                   | InstantiationException | IllegalAccessException
+                   | IllegalArgumentException | InvocationTargetException e) {
+          }
           shouldRetry(ioe, retry);
         }
       }
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/web/TestWebHdfsTimeouts.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/web/TestWebHdfsTimeouts.java
index 13a5a53..5419093 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/web/TestWebHdfsTimeouts.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/web/TestWebHdfsTimeouts.java
@@ -115,7 +115,7 @@ public void testConnectTimeout() throws Exception {
       fs.listFiles(new Path("/"), false);
       fail("expected timeout");
     } catch (SocketTimeoutException e) {
-      assertEquals("connect timed out", e.getMessage());
+      assertEquals(fs.getUri().getAuthority() + ": connect timed out", e.getMessage());
     }
   }
 
@@ -128,7 +128,7 @@ public void testReadTimeout() throws Exception {
       fs.listFiles(new Path("/"), false);
       fail("expected timeout");
     } catch (SocketTimeoutException e) {
-      assertEquals("Read timed out", e.getMessage());
+      assertEquals(fs.getUri().getAuthority() + ": Read timed out", e.getMessage());
     }
   }
 
@@ -143,7 +143,7 @@ public void testAuthUrlConnectTimeout() throws Exception {
       fs.getDelegationToken("renewer");
       fail("expected timeout");
     } catch (SocketTimeoutException e) {
-      assertEquals("connect timed out", e.getMessage());
+      assertEquals(fs.getUri().getAuthority() + ": connect timed out", e.getMessage());
     }
   }
 
@@ -157,7 +157,7 @@ public void testAuthUrlReadTimeout() throws Exception {
       fs.getDelegationToken("renewer");
       fail("expected timeout");
     } catch (SocketTimeoutException e) {
-      assertEquals("Read timed out", e.getMessage());
+      assertEquals(fs.getUri().getAuthority() + ": Read timed out", e.getMessage());
     }
   }
 
@@ -172,7 +172,7 @@ public void testRedirectConnectTimeout() throws Exception {
       fs.getFileChecksum(new Path("/file"));
       fail("expected timeout");
     } catch (SocketTimeoutException e) {
-      assertEquals("connect timed out", e.getMessage());
+      assertEquals(fs.getUri().getAuthority() + ": connect timed out", e.getMessage());
     }
   }
 
@@ -187,7 +187,7 @@ public void testRedirectReadTimeout() throws Exception {
       fs.getFileChecksum(new Path("/file"));
       fail("expected timeout");
     } catch (SocketTimeoutException e) {
-      assertEquals("Read timed out", e.getMessage());
+      assertEquals(fs.getUri().getAuthority() + ": Read timed out", e.getMessage());
     }
   }
 
@@ -203,7 +203,7 @@ public void testTwoStepWriteConnectTimeout() throws Exception {
       os = fs.create(new Path("/file"));
       fail("expected timeout");
     } catch (SocketTimeoutException e) {
-      assertEquals("connect timed out", e.getMessage());
+      assertEquals(fs.getUri().getAuthority() + ": connect timed out", e.getMessage());
     } finally {
       IOUtils.cleanup(LOG, os);
     }
-- 
1.7.9.5

