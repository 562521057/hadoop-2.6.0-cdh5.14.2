From 07dc0333e99355a0df79869b5a53dac2fe4eec6a Mon Sep 17 00:00:00 2001
From: Daniel Templeton <daniel@cloudera.com>
Date: Mon, 11 Jul 2016 18:44:17 -0700
Subject: [PATCH 1666/2748] Revert "YARN-2136. Changed RMStateStore to ignore
 store opearations when fenced. Contributed by
 Varun Saxena"

This reverts commit a2f805cfd0ff0a8b8f84beba2c35e11e8731fb10.

Conflicts:
	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java

Change-Id: I11fc0a1653527aef7e698d4749e7ef3c525e05b3
(cherry picked from commit 66ca223aeae6d120f36523f2ef48bfa061c50fed)
(cherry picked from commit f4d65d810635fc567237f7a8e885c5efea7c3e29)
---
 .../resourcemanager/recovery/RMStateStore.java     |   50 +++--------
 .../recovery/RMStateStoreEventType.java            |    1 -
 .../resourcemanager/recovery/ZKRMStateStore.java   |    3 -
 .../recovery/TestZKRMStateStore.java               |   93 +-------------------
 4 files changed, 14 insertions(+), 133 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
index 2d3c658..67c3eb7 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
@@ -18,7 +18,6 @@
 
 package org.apache.hadoop.yarn.server.resourcemanager.recovery;
 
-import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
@@ -30,7 +29,6 @@
 
 import javax.crypto.SecretKey;
 
-import com.google.common.annotations.VisibleForTesting;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.classification.InterfaceAudience.Private;
@@ -96,8 +94,7 @@
   public static final Log LOG = LogFactory.getLog(RMStateStore.class);
 
   private enum RMStateStoreState {
-    ACTIVE,
-    FENCED
+    DEFAULT
   };
 
   private static final StateMachineFactory<RMStateStore,
@@ -108,43 +105,33 @@
                                                     RMStateStoreState,
                                                     RMStateStoreEventType,
                                                     RMStateStoreEvent>(
-      RMStateStoreState.ACTIVE)
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      RMStateStoreState.DEFAULT)
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
           RMStateStoreEventType.STORE_APP, new StoreAppTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
           RMStateStoreEventType.UPDATE_APP, new UpdateAppTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
           RMStateStoreEventType.REMOVE_APP, new RemoveAppTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
           RMStateStoreEventType.STORE_APP_ATTEMPT, new StoreAppAttemptTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
           RMStateStoreEventType.UPDATE_APP_ATTEMPT, new UpdateAppAttemptTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED,
-          RMStateStoreEventType.FENCED)
-      .addTransition(RMStateStoreState.FENCED, RMStateStoreState.FENCED,
-          EnumSet.of(
-          RMStateStoreEventType.STORE_APP,
-          RMStateStoreEventType.UPDATE_APP,
-          RMStateStoreEventType.REMOVE_APP,
-          RMStateStoreEventType.STORE_APP_ATTEMPT,
-          RMStateStoreEventType.UPDATE_APP_ATTEMPT,
-          RMStateStoreEventType.FENCED))
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
           RMStateStoreEventType.STORE_MASTERKEY,
               new StoreRMDTMasterKeyTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
           RMStateStoreEventType.REMOVE_MASTERKEY,
               new RemoveRMDTMasterKeyTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
           RMStateStoreEventType.STORE_DELEGATION_TOKEN,
               new StoreRMDTTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
           RMStateStoreEventType.REMOVE_DELEGATION_TOKEN,
               new RemoveRMDTTransition())
-      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
           RMStateStoreEventType.UPDATE_DELEGATION_TOKEN,
               new UpdateRMDTTransition())
-       .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+       .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
            RMStateStoreEventType.UPDATE_AMRM_TOKEN,
               new StoreOrUpdateAMRMTokenTransition());
 
@@ -602,11 +589,6 @@ public void updateApplicationState(
     dispatcher.getEventHandler().handle(new RMStateUpdateAppEvent(appState));
   }
 
-  public synchronized void updateFencedState() {
-    this.stateMachine.doTransition(RMStateStoreEventType.FENCED,
-         new RMStateStoreEvent(RMStateStoreEventType.FENCED));
-  }
-
   /**
    * Blocking API
    * Derived classes must implement this method to store the state of an 
@@ -813,11 +795,6 @@ public Credentials getCredentialsFromAppAttempt(RMAppAttempt appAttempt) {
     }
     return credentials;
   }
-  
-  @VisibleForTesting
-  synchronized boolean isFencedState() {
-    return (RMStateStoreState.FENCED == this.stateMachine.getCurrentState());
-  }
 
   // Dispatcher related code
   protected void handleStoreEvent(RMStateStoreEvent event) {
@@ -853,7 +830,6 @@ protected void handleStoreEvent(RMStateStoreEvent event) {
   protected void notifyStoreOperationFailed(Exception failureCause) {
     LOG.error("State store operation failed ", failureCause);
     if (failureCause instanceof StoreFencedException) {
-      updateFencedState();
       Thread standByTransitionThread =
           new Thread(new StandByTransitionThread());
       standByTransitionThread.setName("StandByTransitionThread Handler");
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
index beba5eb..e640426 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
@@ -24,7 +24,6 @@
   UPDATE_APP,
   UPDATE_APP_ATTEMPT,
   REMOVE_APP,
-  FENCED,
 
   // Below events should be called synchronously
   STORE_MASTERKEY,
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
index 0f0b636..38380bb 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
@@ -1112,9 +1112,6 @@ private void recursiveDeleteWithRetriesHelper(String path, boolean watch)
     public void run() {
       try {
         while (true) {
-          if(isFencedState()) { 
-            break;
-          }
           doStoreMultiWithRetries(emptyOpList);
           Thread.sleep(zkSessionTimeout);
         }
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
index f15cf90..16d0b4f 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
@@ -20,14 +20,10 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 import java.io.IOException;
 import java.util.List;
 
-import javax.crypto.SecretKey;
-
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
@@ -37,30 +33,19 @@
 import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
 import org.apache.hadoop.yarn.api.records.ApplicationId;
 import org.apache.hadoop.yarn.api.records.ApplicationSubmissionContext;
-import org.apache.hadoop.yarn.api.records.Container;
-import org.apache.hadoop.yarn.api.records.FinalApplicationStatus;
 import org.apache.hadoop.yarn.api.records.impl.pb.ApplicationSubmissionContextPBImpl;
-import org.apache.hadoop.yarn.api.records.impl.pb.ContainerPBImpl;
 import org.apache.hadoop.yarn.conf.HAUtil;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;
 import org.apache.hadoop.yarn.server.records.Version;
 import org.apache.hadoop.yarn.server.records.impl.pb.VersionPBImpl;
 import org.apache.hadoop.yarn.server.resourcemanager.MockRM;
-import org.apache.hadoop.yarn.server.resourcemanager.RMZKUtils;
 import org.apache.hadoop.yarn.server.resourcemanager.ResourceManager;
-import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.ApplicationAttemptStateData;
+import org.apache.zookeeper.ZooDefs.Perms;
 import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.ApplicationStateData;
 import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMApp;
-import org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt.AggregateAppResourceUsage;
-import org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt.RMAppAttempt;
-import org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt.RMAppAttemptMetrics;
-import org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt.RMAppAttemptState;
-import org.apache.hadoop.yarn.server.resourcemanager.security.ClientToAMTokenSecretManagerInRM;
 import org.apache.hadoop.yarn.util.ConverterUtils;
 import org.apache.zookeeper.KeeperException;
-import org.apache.zookeeper.ZooDefs.Perms;
 import org.apache.zookeeper.ZooKeeper;
-import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.data.ACL;
 import org.apache.zookeeper.data.Stat;
 import org.junit.Assert;
@@ -363,80 +348,4 @@ public void testDuplicateRMAppDeletion() throws Exception {
     }
     store.close();
   }
-  
-  @Test
-  public void testFencedState() throws Exception {
-    TestZKRMStateStoreTester zkTester = new TestZKRMStateStoreTester();
-	RMStateStore store = zkTester.getRMStateStore();
-   
-    // Move state to FENCED from ACTIVE
-    store.updateFencedState();
-    assertEquals("RMStateStore should have been in fenced state",
-            true, store.isFencedState());    
-
-    long submitTime = System.currentTimeMillis();
-    long startTime = submitTime + 1000;
-
-    // Add a new app
-    RMApp mockApp = mock(RMApp.class);
-    ApplicationSubmissionContext context =
-      new ApplicationSubmissionContextPBImpl();
-    when(mockApp.getSubmitTime()).thenReturn(submitTime);
-    when(mockApp.getStartTime()).thenReturn(startTime);
-    when(mockApp.getApplicationSubmissionContext()).thenReturn(context);
-    when(mockApp.getUser()).thenReturn("test");
-    store.storeNewApplication(mockApp);
-    assertEquals("RMStateStore should have been in fenced state",
-            true, store.isFencedState());
-
-    // Add a new attempt
-    ClientToAMTokenSecretManagerInRM clientToAMTokenMgr =
-            new ClientToAMTokenSecretManagerInRM();
-    ApplicationAttemptId attemptId = ConverterUtils
-            .toApplicationAttemptId("appattempt_1234567894321_0001_000001");
-    SecretKey clientTokenMasterKey =
-                clientToAMTokenMgr.createMasterKey(attemptId);
-    RMAppAttemptMetrics mockRmAppAttemptMetrics = 
-         mock(RMAppAttemptMetrics.class);
-    Container container = new ContainerPBImpl();
-    container.setId(ConverterUtils.toContainerId("container_1234567891234_0001_01_000001"));
-    RMAppAttempt mockAttempt = mock(RMAppAttempt.class);
-    when(mockAttempt.getAppAttemptId()).thenReturn(attemptId);
-    when(mockAttempt.getMasterContainer()).thenReturn(container);
-    when(mockAttempt.getClientTokenMasterKey())
-        .thenReturn(clientTokenMasterKey);
-    when(mockAttempt.getRMAppAttemptMetrics())
-        .thenReturn(mockRmAppAttemptMetrics);
-    when(mockRmAppAttemptMetrics.getAggregateAppResourceUsage())
-        .thenReturn(new AggregateAppResourceUsage(0,0));
-    store.storeNewApplicationAttempt(mockAttempt);
-    assertEquals("RMStateStore should have been in fenced state",
-            true, store.isFencedState());
-
-    long finishTime = submitTime + 1000;
-    // Update attempt
-    ApplicationAttemptStateData newAttemptState =
-      ApplicationAttemptStateData.newInstance(attemptId, container,
-            store.getCredentialsFromAppAttempt(mockAttempt),
-            startTime, RMAppAttemptState.FINISHED, "testUrl", 
-            "test", FinalApplicationStatus.SUCCEEDED, 100, 
-            finishTime, 0, 0);
-    store.updateApplicationAttemptState(newAttemptState);
-    assertEquals("RMStateStore should have been in fenced state",
-            true, store.isFencedState());
-
-    // Update app
-    ApplicationStateData appState = ApplicationStateData.newInstance(submitTime, 
-            startTime, context, "test");
-    store.updateApplicationState(appState);
-    assertEquals("RMStateStore should have been in fenced state",
-            true, store.isFencedState());
-
-    // Remove app
-    store.removeApplication(mockApp);
-    assertEquals("RMStateStore should have been in fenced state",
-            true, store.isFencedState());
- 
-    store.close();
-  }
 }
-- 
1.7.9.5

