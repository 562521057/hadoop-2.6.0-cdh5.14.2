From 99367b2ee4d16a4b697f3d80f1dfdc13c78440d2 Mon Sep 17 00:00:00 2001
From: Karthik Kambatla <kasha@apache.org>
Date: Wed, 16 Mar 2016 15:10:58 -0700
Subject: [PATCH 1327/2748] CLOUDERA-BUILD. CDH-38435. MR rolling upgrade
 breaks due to security fix introduced in
 CDH-27001.

More details:
- CDH-27001 fixes a security issue that concerns storing the key used to encrypt
  spill data alongside the spill itself. The fix here was to send this key from
  AM to Task over Hadoop RPC. Since it is not versioned, this leads to an
  incompatibility and breaks rolling upgrade.
- In CDH-38435, we fix this by reusing extraData, which was originally
  introduced to run MR1 on Mesos, for storing this key instead of serializing it
  separately. Both extraData and setExtraData are non-public methods in a
  @Private @Unstable class, and we are not obligated to support it.

Testing:
- To test this fix, we ran a cluster with two nodes using 5.5.0 bits and 1 node
  using these bits. We were successfully able to run jobs with AM running 5.5.0
  and AM running 5.7.0. And, a job with the intermediate data encrypted.

Change-Id: I3567e26272fd854fc8253f1e998f21da6bfb9cef
---
 .../main/java/org/apache/hadoop/mapred/Task.java   |   30 ++++++++++++++++----
 1 file changed, 24 insertions(+), 6 deletions(-)

diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java
index 7f7bb19..3c6c1e2 100644
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java
@@ -506,9 +506,18 @@ public void write(DataOutput out) throws IOException {
     out.writeBoolean(writeSkipRecs);
     out.writeBoolean(taskCleanup);
     Text.writeString(out, user);
-    out.writeInt(encryptedSpillKey.length);
+
+    /**
+     * Write the key used to encrypt spill data. This has been introduced in
+     * 5.5 to fix a security issue with storing the key in plain text on the
+     * disk alongside the spill itself.
+     *
+     * However, instead of writing it separately and breaking backwards
+     * compatibility, use the extraData field that has been originally
+     * introduced for Mesos.
+     */
+    extraData = new BytesWritable(encryptedSpillKey);
     extraData.write(out);
-    out.write(encryptedSpillKey);
   }
   
   public void readFields(DataInput in) throws IOException {
@@ -533,10 +542,14 @@ public void readFields(DataInput in) throws IOException {
       setPhase(TaskStatus.Phase.CLEANUP);
     }
     user = StringInterner.weakIntern(Text.readString(in));
-    int len = in.readInt();
-    encryptedSpillKey = new byte[len];
+
+    /**
+     * Read in the key to encrypt spill data with. Note that we are
+     * bastardizing the extraData field, originally introduced for Mesos, to
+     * store the key for spill encryption.
+     */
     extraData.readFields(in);
-    in.readFully(encryptedSpillKey);
+    encryptedSpillKey = extraData.copyBytes();
   }
 
   @Override
@@ -1696,6 +1709,11 @@ BytesWritable getExtraData() {
   }
 
   void setExtraData(BytesWritable extraData) {
-    this.extraData = extraData;
+    /**
+     * We are using extraData to send the key to encrypt spills with.
+     * Cannot support this operation anymore.
+     */
+    throw new UnsupportedOperationException("Using extraData is not supported."
+        + "This field is used to store the key to encrypt spill data.");
   }
 }
-- 
1.7.9.5

