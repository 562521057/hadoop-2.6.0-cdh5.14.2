From f6067994e39246e850a40f955b6e23cd7ac4e456 Mon Sep 17 00:00:00 2001
From: Jitendra Pandey <jitendra@apache.org>
Date: Mon, 20 Jun 2016 16:00:13 -0700
Subject: [PATCH 1887/2748] HADOOP-13291. Probing stats in
 DFSOpsCountStatistics/S3AStorageStatistics should
 be correctly implemented. Contributed by
 Mingliang Liu.

(cherry picked from commit 2f95d22b17350f378a5a62055492a4ab5fd76770)

Conflict below: only change was RandomUtils.nextLong() call to use
different dependency (commons.lang.math instead of commons.lang3),
and manually modulo 100 to get desired range.

Conflicts:
  hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/TestDFSOpsCountStatistics.java

Change-Id: I8ad1fa5dff941b781b69e5c8849584ce46a8fb3a
---
 .../hadoop/hdfs/TestDFSOpsCountStatistics.java     |  108 ++++++++++++++++++++
 .../apache/hadoop/hdfs/DFSOpsCountStatistics.java  |    5 +-
 .../apache/hadoop/fs/s3a/S3AStorageStatistics.java |    5 +-
 3 files changed, 114 insertions(+), 4 deletions(-)
 create mode 100644 hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/TestDFSOpsCountStatistics.java

diff --git a/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/TestDFSOpsCountStatistics.java b/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/TestDFSOpsCountStatistics.java
new file mode 100644
index 0000000..cd6896f
--- /dev/null
+++ b/hadoop-hdfs-project/hadoop-hdfs-client/src/test/java/org/apache/hadoop/hdfs/TestDFSOpsCountStatistics.java
@@ -0,0 +1,108 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hdfs;
+
+import org.apache.commons.lang.math.RandomUtils;
+import org.apache.hadoop.fs.StorageStatistics.LongStatistic;
+
+import org.apache.hadoop.hdfs.DFSOpsCountStatistics.OpType;
+
+import org.junit.BeforeClass;
+import org.junit.Rule;
+import org.junit.Test;
+
+import org.junit.rules.ExpectedException;
+import org.junit.rules.Timeout;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * This tests basic operations of {@link DFSOpsCountStatistics} class.
+ */
+public class TestDFSOpsCountStatistics {
+
+  private static final DFSOpsCountStatistics STORAGE_STATISTICS =
+      new DFSOpsCountStatistics();
+  private static final Map<String, Long> OP_COUNTER_MAP = new HashMap<>();
+  private static final String NO_SUCH_OP = "no-such-dfs-operation-dude";
+
+  @Rule
+  public final Timeout globalTimeout = new Timeout(10 * 1000);
+  @Rule
+  public final ExpectedException exception = ExpectedException.none();
+
+  @BeforeClass
+  public static void setup() {
+    for (OpType opType : OpType.values()) {
+      final Long opCount = RandomUtils.nextLong() % 100;
+      OP_COUNTER_MAP.put(opType.getSymbol(), opCount);
+      for (long i = 0; i < opCount; i++) {
+        STORAGE_STATISTICS.incrementOpCounter(opType);
+      }
+    }
+  }
+
+  @Test
+  public void testGetLongStatistics() {
+    short iterations = 0; // number of the iter.hasNext()
+    final Iterator<LongStatistic> iter = STORAGE_STATISTICS.getLongStatistics();
+
+    while (iter.hasNext()) {
+      final LongStatistic longStat = iter.next();
+      assertNotNull(longStat);
+      assertTrue(OP_COUNTER_MAP.containsKey(longStat.getName()));
+      assertEquals(OP_COUNTER_MAP.get(longStat.getName()).longValue(),
+          longStat.getValue());
+      iterations++;
+    }
+
+    // check that all the OpType enum entries are iterated via iter
+    assertEquals(OpType.values().length, iterations);
+  }
+
+  @Test
+  public void testGetLong() {
+    assertNull(STORAGE_STATISTICS.getLong(NO_SUCH_OP));
+
+    for (OpType opType : OpType.values()) {
+      final String key = opType.getSymbol();
+      assertEquals(OP_COUNTER_MAP.get(key), STORAGE_STATISTICS.getLong(key));
+    }
+  }
+
+  @Test
+  public void testIsTracked() {
+    assertFalse(STORAGE_STATISTICS.isTracked(NO_SUCH_OP));
+
+    final Iterator<LongStatistic> iter = STORAGE_STATISTICS.getLongStatistics();
+    while (iter.hasNext()) {
+      final LongStatistic longStatistic = iter.next();
+      assertTrue(STORAGE_STATISTICS.isTracked(longStatistic.getName()));
+    }
+  }
+
+}
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOpsCountStatistics.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOpsCountStatistics.java
index d58a59f..a047d34 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOpsCountStatistics.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOpsCountStatistics.java
@@ -139,7 +139,8 @@ public LongStatistic next() {
         throw new NoSuchElementException();
       }
       final Entry<OpType, AtomicLong> entry = iterator.next();
-      return new LongStatistic(entry.getKey().name(), entry.getValue().get());
+      return new LongStatistic(entry.getKey().getSymbol(),
+          entry.getValue().get());
     }
 
     @Override
@@ -161,7 +162,7 @@ public Long getLong(String key) {
 
   @Override
   public boolean isTracked(String key) {
-    return OpType.fromSymbol(key) == null;
+    return OpType.fromSymbol(key) != null;
   }
 
 }
diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AStorageStatistics.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AStorageStatistics.java
index f69159a..a74b864 100644
--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AStorageStatistics.java
+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AStorageStatistics.java
@@ -76,7 +76,8 @@ public LongStatistic next() {
         throw new NoSuchElementException();
       }
       final Map.Entry<Statistic, AtomicLong> entry = iterator.next();
-      return new LongStatistic(entry.getKey().name(), entry.getValue().get());
+      return new LongStatistic(entry.getKey().getSymbol(),
+          entry.getValue().get());
     }
 
     @Override
@@ -98,7 +99,7 @@ public Long getLong(String key) {
 
   @Override
   public boolean isTracked(String key) {
-    return Statistic.fromSymbol(key) == null;
+    return Statistic.fromSymbol(key) != null;
   }
 
 }
-- 
1.7.9.5

