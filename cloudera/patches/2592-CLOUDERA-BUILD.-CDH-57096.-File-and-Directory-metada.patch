From 801ec0bbb59a3b396444a86579c6b7557c80e14c Mon Sep 17 00:00:00 2001
From: Manoj Govindassamy <manojg@cloudera.com>
Date: Fri, 11 Aug 2017 12:04:23 -0700
Subject: [PATCH 2592/2748] CLOUDERA-BUILD. CDH-57096. File and Directory
 metadataEquals() does incorrect comparisons for
 AclFeature

Change-Id: I9986e189c094e738cfb554d4e328ef0d5302a0fa
---
 .../hadoop/hdfs/server/namenode/AclFeature.java    |   18 ++++
 .../hdfs/server/namenode/INodeDirectory.java       |    9 +-
 .../server/namenode/INodeDirectoryAttributes.java  |   10 +-
 .../hadoop/hdfs/server/namenode/INodeFile.java     |   10 +-
 .../hdfs/server/namenode/INodeFileAttributes.java  |   10 +-
 .../server/namenode/TestAuthorizationProvider.java |    2 +-
 .../namenode/snapshot/TestSnapshotDiffReport.java  |   97 ++++++++++++++++++++
 7 files changed, 150 insertions(+), 6 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclFeature.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclFeature.java
index e097b05..197ac91 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclFeature.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclFeature.java
@@ -18,6 +18,8 @@
 
 package org.apache.hadoop.hdfs.server.namenode;
 
+import java.util.Arrays;
+
 import org.apache.hadoop.classification.InterfaceAudience;
 import org.apache.hadoop.fs.permission.AclEntry;
 
@@ -56,4 +58,20 @@ int getEntryAt(int pos) {
         "Invalid position for AclEntry");
     return entries[pos];
   }
+
+  @Override
+  public boolean equals(Object o) {
+    if (o == null) {
+      return false;
+    }
+    if (getClass() != o.getClass()) {
+      return false;
+    }
+    return Arrays.equals(entries, ((AclFeature) o).entries);
+  }
+
+  @Override
+  public int hashCode() {
+    return Arrays.hashCode(entries);
+  }
 }
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java
index 00b922d..4317f6f 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java
@@ -811,14 +811,19 @@ public void destroyAndCollectBlocks(final BlocksMapUpdateInfo collectedBlocks,
   }
   
   /**
-   * Compare the metadata with another INodeDirectory
+   * Compare the metadata with another INodeDirectory.
+   * AclFeature needs equals() check on top of object reference
+   * check as HDFS-7456 AclFeature de-duplication fix available
+   * in the upstream is not backported yet.
    */
   @Override
   public boolean metadataEquals(INodeDirectoryAttributes other) {
     return other != null
         && getQuotaCounts().equals(other.getQuotaCounts())
         && getPermissionLong() == other.getPermissionLong()
-        && getAclFeature() == other.getAclFeature()
+        && ((getAclFeature() == other.getAclFeature()) ||
+        (getAclFeature() != null && other.getAclFeature() != null &&
+            getAclFeature().equals(other.getAclFeature())))
         && getXAttrFeature() == other.getXAttrFeature();
   }
   
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectoryAttributes.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectoryAttributes.java
index 26a6678..eedfbfb 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectoryAttributes.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectoryAttributes.java
@@ -49,12 +49,20 @@ public SnapshotCopy(INodeDirectory dir) {
       return Quota.Counts.newInstance(-1, -1);
     }
 
+    /**
+     * Compare the metadata with another INodeDirectory.
+     * AclFeature needs equals() check on top of object reference
+     * check as HDFS-7456 AclFeature de-duplication fix available
+     * in the upstream is not backported yet.
+     */
     @Override
     public boolean metadataEquals(INodeDirectoryAttributes other) {
       return other != null
           && getQuotaCounts().equals(other.getQuotaCounts())
           && getPermissionLong() == other.getPermissionLong()
-          && getAclFeature() == other.getAclFeature()
+          && ((getAclFeature() == other.getAclFeature()) ||
+          (getAclFeature() != null && other.getAclFeature() != null &&
+              getAclFeature().equals(other.getAclFeature())))
           && getXAttrFeature() == other.getXAttrFeature();
     }
   }
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
index 76e6202..f2cc267 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
@@ -158,12 +158,20 @@ public final INodeFile asFile() {
     return this;
   }
 
+  /**
+   * Compare the metadata with another INodeFile.
+   * AclFeature needs equals() check on top of object reference
+   * check as HDFS-7456 AclFeature de-duplication fix available
+   * in the upstream is not backported yet.
+   */
   @Override
   public boolean metadataEquals(INodeFileAttributes other) {
     return other != null
         && getHeaderLong()== other.getHeaderLong()
         && getPermissionLong() == other.getPermissionLong()
-        && getAclFeature() == other.getAclFeature()
+        && ((getAclFeature() == other.getAclFeature()) ||
+        (getAclFeature() != null && other.getAclFeature() != null &&
+            getAclFeature().equals(other.getAclFeature())))
         && getXAttrFeature() == other.getXAttrFeature();
   }
 
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFileAttributes.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFileAttributes.java
index b8af50d..309d393 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFileAttributes.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFileAttributes.java
@@ -78,12 +78,20 @@ public long getHeaderLong() {
       return header;
     }
 
+    /**
+     * Compare the metadata with another INodeFile.
+     * AclFeature needs equals() check on top of object reference
+     * check as HDFS-7456 AclFeature de-duplication fix available
+     * in the upstream is not backported yet.
+     */
     @Override
     public boolean metadataEquals(INodeFileAttributes other) {
       return other != null
           && getHeaderLong()== other.getHeaderLong()
           && getPermissionLong() == other.getPermissionLong()
-          && getAclFeature() == other.getAclFeature()
+          && ((getAclFeature() == other.getAclFeature()) ||
+          (getAclFeature() != null && other.getAclFeature() != null &&
+              getAclFeature().equals(other.getAclFeature())))
           && getXAttrFeature() == other.getXAttrFeature();
     }
   }
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestAuthorizationProvider.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestAuthorizationProvider.java
index ed7788d..1cafa4d 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestAuthorizationProvider.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestAuthorizationProvider.java
@@ -123,7 +123,7 @@ public void checkPermission(String user, Set<String> groups,
           ignoreEmptyDir);
     }
 
-    private boolean useDefault(INodeAuthorizationInfo iNode) {
+    protected boolean useDefault(INodeAuthorizationInfo iNode) {
       return !iNode.getFullPathName().startsWith("/user/authz");
     }
 
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/snapshot/TestSnapshotDiffReport.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/snapshot/TestSnapshotDiffReport.java
index 439ff14..da05dd0 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/snapshot/TestSnapshotDiffReport.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/snapshot/TestSnapshotDiffReport.java
@@ -17,6 +17,16 @@
  */
 package org.apache.hadoop.hdfs.server.namenode.snapshot;
 
+import static org.apache.hadoop.fs.permission.AclEntryScope.ACCESS;
+import static org.apache.hadoop.fs.permission.AclEntryScope.DEFAULT;
+import static org.apache.hadoop.fs.permission.AclEntryType.GROUP;
+import static org.apache.hadoop.fs.permission.AclEntryType.MASK;
+import static org.apache.hadoop.fs.permission.AclEntryType.OTHER;
+import static org.apache.hadoop.fs.permission.AclEntryType.USER;
+import static org.apache.hadoop.fs.permission.FsAction.ALL;
+import static org.apache.hadoop.fs.permission.FsAction.READ_EXECUTE;
+import static org.apache.hadoop.hdfs.server.namenode.AclTestHelpers.aclEntry;
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
@@ -24,12 +34,18 @@
 import java.io.IOException;
 import java.util.EnumSet;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Random;
 
+import com.google.common.collect.Lists;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FSDataOutputStream;
+import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Options.Rename;
 import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.fs.permission.AclEntry;
+import org.apache.hadoop.fs.permission.AclStatus;
+import org.apache.hadoop.fs.permission.FsPermission;
 import org.apache.hadoop.hdfs.DFSConfigKeys;
 import org.apache.hadoop.hdfs.DFSTestUtil;
 import org.apache.hadoop.hdfs.DFSUtil;
@@ -40,8 +56,10 @@
 import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport;
 import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport.DiffReportEntry;
 import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport.DiffType;
+import org.apache.hadoop.hdfs.server.namenode.AclTestHelpers;
 import org.apache.hadoop.hdfs.server.namenode.NameNode;
 import org.apache.hadoop.hdfs.server.namenode.NameNodeAdapter;
+import org.apache.hadoop.hdfs.server.namenode.TestAuthorizationProvider.MyAuthorizationProvider;
 import org.apache.hadoop.test.GenericTestUtils;
 import org.junit.After;
 import org.junit.Assert;
@@ -676,4 +694,83 @@ public void testDiffReportWithOpenFiles() throws Exception {
 
   }
 
+  public static class TestAuthorizationProviderForSnapDiff
+      extends MyAuthorizationProvider {
+    @Override
+    protected boolean useDefault(INodeAuthorizationInfo iNode) {
+      return true;
+    }
+  }
+
+  /**
+   * AclFeature in the SnapshotCopy and the AclFeature provided by the
+   * Authorization Provider could be same contents wise. Make sure the
+   * snapshot diff doesn't report such files as modified.
+   */
+  @Test
+  public void testSetSameACLAndSnapshotDiff() throws Exception {
+    tearDown();
+    conf = new Configuration();
+    conf.setBoolean(
+        DFSConfigKeys.DFS_NAMENODE_SNAPSHOT_CAPTURE_OPENFILES, true);
+    conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY, true);
+    conf.set(DFSConfigKeys.DFS_NAMENODE_AUTHORIZATION_PROVIDER_KEY,
+        TestAuthorizationProviderForSnapDiff.class.getName());
+    cluster = new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION)
+        .format(true).build();
+    cluster.waitActive();
+    hdfs = cluster.getFileSystem();
+
+    final Path dirPath = new Path("/snapdir");;
+    final Path filePath = new Path(dirPath, "file1");
+    FileSystem.mkdirs(hdfs, dirPath, FsPermission.createImmutable((short)0755));
+    DFSTestUtil.createFile(hdfs, filePath, 1, (short) 1, 1);
+    SnapshotTestHelper.createSnapshot(hdfs, dirPath, "S0");
+
+    List<AclEntry> dirAclSpec = Lists.newArrayList(
+        aclEntry(DEFAULT, USER, "hdfs", READ_EXECUTE));
+    hdfs.modifyAclEntries(dirPath, dirAclSpec);
+
+    List<AclEntry> fileAclSpec = Lists.newArrayList(
+        aclEntry(ACCESS, USER, ALL),
+        aclEntry(ACCESS, USER, "s3", ALL),
+        aclEntry(ACCESS, GROUP, ALL),
+        aclEntry(ACCESS, MASK, ALL),
+        aclEntry(ACCESS, OTHER, ALL));
+    hdfs.modifyAclEntries(filePath, fileAclSpec);
+    hdfs.setPermission(filePath, FsPermission.createImmutable((short)0755));
+
+    AclStatus dirAclStatus = hdfs.getAclStatus(dirPath);
+    AclEntry[] dirAcls = dirAclStatus.getEntries().toArray(new AclEntry[0]);
+    assertArrayEquals(
+        new AclEntry[] {
+            aclEntry(DEFAULT, USER, ALL),
+            aclEntry(DEFAULT, USER, "hdfs", READ_EXECUTE),
+            aclEntry(DEFAULT, GROUP, READ_EXECUTE),
+            aclEntry(DEFAULT, MASK, READ_EXECUTE),
+            aclEntry(DEFAULT, OTHER, READ_EXECUTE)
+        }, dirAcls);
+    AclTestHelpers.assertPermission(hdfs, dirPath, ((short)010755));
+
+    AclStatus fileAclStatus = hdfs.getAclStatus(filePath);
+    AclEntry[] fileAcls = fileAclStatus.getEntries().toArray(new AclEntry[0]);
+    assertArrayEquals(
+        new AclEntry[] {
+            aclEntry(ACCESS, USER, "s3", ALL),
+            aclEntry(ACCESS, GROUP, ALL)
+        }, fileAcls);
+    AclTestHelpers.assertPermission(hdfs, filePath, ((short)010755));
+
+    List<AclEntry> sameDirAclSpec = Lists.newArrayList(dirAcls);
+    hdfs.setAcl(dirPath, sameDirAclSpec);
+    hdfs.setAcl(filePath, fileAclSpec);
+    SnapshotTestHelper.createSnapshot(hdfs, dirPath, "S1");
+
+    hdfs.setAcl(dirPath, sameDirAclSpec);
+    hdfs.setAcl(filePath, fileAclSpec);
+    SnapshotTestHelper.createSnapshot(hdfs, dirPath, "S2");
+
+    verifyDiffReport(dirPath, "S1", "S2",
+        new DiffReportEntry(DiffType.MODIFY, DFSUtil.string2Bytes("")));
+  }
 }
\ No newline at end of file
-- 
1.7.9.5

