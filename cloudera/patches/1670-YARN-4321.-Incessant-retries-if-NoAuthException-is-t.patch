From 9c097d64bdd56c7d2c74723260f2573994c8aeb3 Mon Sep 17 00:00:00 2001
From: Jian He <jianhe@apache.org>
Date: Mon, 2 Nov 2015 11:22:30 -0800
Subject: [PATCH 1670/2748] YARN-4321. Incessant retries if NoAuthException is
 thrown by Zookeeper in non HA mode.  Contributed
 by Varun Saxena

(cherry picked from commit ece1b1645bc6e7b526b817f55288a13146cc3b30)

Conflicts:
	hadoop-yarn-project/CHANGES.txt
	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java

Change-Id: I5426f484b57299b266de7c93b7b32b08a82a138e
---
 .../resourcemanager/recovery/ZKRMStateStore.java   |    2 +
 .../recovery/TestZKRMStateStore.java               |   46 ++++++++++++++++++--
 2 files changed, 44 insertions(+), 4 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
index da129dd..7835a83 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
@@ -1184,6 +1184,8 @@ T runWithRetries() throws Exception {
             // another RM becoming active. Even if not,
             // it is safer to assume we have been fenced
             throw new StoreFencedException();
+          } else {
+            throw nae;
           }
         } catch (KeeperException ke) {
           if (ke.code() == Code.NODEEXISTS) {
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
index 16d0b4f..23c233b 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
@@ -19,7 +19,13 @@
 package org.apache.hadoop.yarn.server.resourcemanager.recovery;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+import static org.mockito.Mockito.doThrow;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.when;
 
 import java.io.IOException;
 import java.util.List;
@@ -30,6 +36,7 @@
 import org.apache.hadoop.ha.HAServiceProtocol;
 import org.apache.hadoop.ha.HAServiceProtocol.StateChangeRequestInfo;
 import org.apache.hadoop.service.Service;
+import org.apache.hadoop.service.ServiceStateException;
 import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
 import org.apache.hadoop.yarn.api.records.ApplicationId;
 import org.apache.hadoop.yarn.api.records.ApplicationSubmissionContext;
@@ -39,6 +46,7 @@
 import org.apache.hadoop.yarn.server.records.Version;
 import org.apache.hadoop.yarn.server.records.impl.pb.VersionPBImpl;
 import org.apache.hadoop.yarn.server.resourcemanager.MockRM;
+import org.apache.hadoop.yarn.server.resourcemanager.RMZKUtils;
 import org.apache.hadoop.yarn.server.resourcemanager.ResourceManager;
 import org.apache.zookeeper.ZooDefs.Perms;
 import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.ApplicationStateData;
@@ -47,6 +55,7 @@
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.ZooKeeper;
 import org.apache.zookeeper.data.ACL;
+import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.data.Stat;
 import org.junit.Assert;
 import org.junit.Test;
@@ -60,7 +69,7 @@
 
     ZooKeeper client;
     TestZKRMStateStoreInternal store;
-    String workingZnode;
+    String workingZnode =  "/jira/issue/3077/rmstore";
 
     class TestZKRMStateStoreInternal extends ZKRMStateStore {
 
@@ -90,16 +99,27 @@ public String getAppNode(String appId) {
       }
     }
 
-    public RMStateStore getRMStateStore() throws Exception {
+    public RMStateStore getRMStateStore(ZooKeeper zk) throws Exception {
       YarnConfiguration conf = new YarnConfiguration();
-      workingZnode = "/jira/issue/3077/rmstore";
       conf.set(YarnConfiguration.RM_ZK_ADDRESS, hostPort);
       conf.set(YarnConfiguration.ZK_RM_STATE_STORE_PARENT_PATH, workingZnode);
-      this.client = createClient();
+      if (null == zk) {
+        this.client = createClient();
+      } else {
+        this.client = zk;
+      }
       this.store = new TestZKRMStateStoreInternal(conf, workingZnode);
       return this.store;
     }
 
+    public String getWorkingZNode() {
+      return workingZnode;
+    }
+
+    public RMStateStore getRMStateStore() throws Exception {
+      return getRMStateStore(null);
+    }
+
     @Override
     public boolean isFinalStateValid() throws Exception {
       List<String> nodes = client.getChildren(store.znodeWorkingPath, false);
@@ -348,4 +368,22 @@ public void testDuplicateRMAppDeletion() throws Exception {
     }
     store.close();
   }
+  
+  @Test
+  public void testNoAuthExceptionInNonHAMode() throws Exception {
+    TestZKRMStateStoreTester zkTester = new TestZKRMStateStoreTester();
+    String appRoot = zkTester.getWorkingZNode() + "/ZKRMStateRoot/RMAppRoot" ;
+    ZooKeeper zk = spy(createClient());
+    doThrow(new KeeperException.NoAuthException()).when(zk).
+        create(appRoot, null, RMZKUtils.getZKAcls(new Configuration()),
+            CreateMode.PERSISTENT);
+    try {
+      zkTester.getRMStateStore(zk);
+      fail("Expected exception to be thrown");
+    } catch(ServiceStateException e) {
+      assertNotNull(e.getCause());
+      assertTrue("Expected NoAuthException",
+          e.getCause() instanceof KeeperException.NoAuthException);
+    }
+  }
 }
-- 
1.7.9.5

