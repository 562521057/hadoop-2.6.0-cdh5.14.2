From cd7218fe6a34809a4c803230cae7af2bba7d4bda Mon Sep 17 00:00:00 2001
From: Robert Kanter <rkanter@cloudera.com>
Date: Fri, 9 Jun 2017 17:41:40 -0700
Subject: [PATCH 2517/2748] YARN-6050 Addendum. AMs can't be scheduled on
 racks or nodes (rkanter)

Added missing code that breaks certain configurations with FairScheduler
- Pulled in modified parts of YARN-5774 and YARN-6022 for normalizing resources correctly

Change-Id: Ibb90948435c1e5decf182f8650bb42d6b4ba69ec
---
 .../yarn/server/resourcemanager/RMAppManager.java  |    6 +-----
 .../scheduler/AbstractYarnScheduler.java           |   10 ++++++++++
 .../resourcemanager/scheduler/YarnScheduler.java   |    8 ++++++++
 .../scheduler/fair/FairScheduler.java              |   10 ++++++++++
 4 files changed, 29 insertions(+), 5 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java
index b473621..a70967a 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java
@@ -419,11 +419,7 @@ private RMAppImpl createAndPopulateNewRMApp(
               scheduler.getMaximumResourceCapability(),
               submissionContext.getQueue(), scheduler, isRecovery);
 
-          SchedulerUtils.normalizeRequest(amReq, scheduler.getResourceCalculator(),
-              scheduler.getClusterResource(),
-              scheduler.getMinimumResourceCapability(),
-              scheduler.getMaximumResourceCapability(),
-              scheduler.getMinimumResourceCapability());
+          scheduler.normalizeResource(amReq);
         }
         return amReqs;
       } catch (InvalidResourceRequestException e) {
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java
index 4c108ad..cec5287 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java
@@ -588,4 +588,14 @@ protected void refreshMaximumAllocation(Resource newMaxAlloc) {
   public List<NodeId> getNodeIds(String resourceName) {
     return nodeTracker.getNodeIdsByResourceName(resourceName);
   }
+
+  @Override
+  public void normalizeResource(ResourceRequest requestedResource) {
+    SchedulerUtils.normalizeRequest(requestedResource,
+        getResourceCalculator(),
+        null,
+        getMinimumResourceCapability(),
+        getMaximumResourceCapability(),
+        getMinimumResourceCapability());
+  }
 }
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/YarnScheduler.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/YarnScheduler.java
index ab042a8..b512d9c 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/YarnScheduler.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/YarnScheduler.java
@@ -287,4 +287,12 @@ void setEntitlement(String queue, QueueEntitlement entitlement)
    * @return SchedulerNode corresponds to nodeId
    */
   SchedulerNode getSchedulerNode(NodeId nodeId);
+
+  /**
+   * Normalize a resource request.
+   *
+   * @param requestedResource the resource to be normalized
+   * @return the normalized resource
+   */
+  public void normalizeResource(ResourceRequest requestedResource);
 }
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java
index 8614318..aa36c22 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java
@@ -762,6 +762,16 @@ private synchronized void removeNode(RMNode rmNode) {
   }
 
   @Override
+  public void normalizeResource(ResourceRequest requestedResource) {
+    SchedulerUtils.normalizeRequest(requestedResource,
+        DOMINANT_RESOURCE_CALCULATOR,
+        null,
+        minimumAllocation,
+        getMaximumResourceCapability(),
+        incrAllocation);
+  }
+
+  @Override
   public Allocation allocate(ApplicationAttemptId appAttemptId,
       List<ResourceRequest> ask, List<ContainerId> release,
       List<String> blacklistAdditions, List<String> blacklistRemovals) {
-- 
1.7.9.5

