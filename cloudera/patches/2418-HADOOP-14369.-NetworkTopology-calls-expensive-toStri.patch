From 6a2bda898d7e93faece53e40c53129804d2ff494 Mon Sep 17 00:00:00 2001
From: Andrew Wang <wang@apache.org>
Date: Tue, 2 May 2017 10:51:20 -0700
Subject: [PATCH 2418/2748] HADOOP-14369. NetworkTopology calls expensive
 toString() when logging. Contributed by Inigo
 Goiri.

(cherry picked from commit dcc292d7ded200a4976f6d348952ecba10f01db2)
(cherry picked from commit 484bab39442939e1fe8424def25d1aa4ca99a2e5)

 Conflicts:
	hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java

Change-Id: I9756bc975307a2add0a2ca23964c6155da583beb
---
 .../org/apache/hadoop/net/NetworkTopology.java     |   13 ++++++-------
 1 file changed, 6 insertions(+), 7 deletions(-)

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java
index 401f663..6911210 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java
@@ -404,14 +404,13 @@ public void add(Node node) {
     int newDepth = NodeBase.locationToDepth(node.getNetworkLocation()) + 1;
     netlock.writeLock().lock();
     try {
-      String oldTopoStr = this.toString();
       if( node instanceof InnerNode ) {
         throw new IllegalArgumentException(
           "Not allow to add an inner node: "+NodeBase.getPath(node));
       }
       if ((depthOfAllLeaves != -1) && (depthOfAllLeaves != newDepth)) {
-        LOG.error("Error: can't add leaf node " + NodeBase.getPath(node) +
-            " at depth " + newDepth + " to topology:\n" + oldTopoStr);
+        LOG.error("Error: can't add leaf node {} at depth {} to topology:{}\n",
+            NodeBase.getPath(node), newDepth, this);
         throw new InvalidTopologyException("Failed to add " + NodeBase.getPath(node) +
             ": You cannot have a rack and a non-rack node at the same " +
             "level of the network topology.");
@@ -433,7 +432,7 @@ public void add(Node node) {
           }
         }
       }
-      LOG.debug("NetworkTopology became:\n{}", this.toString());
+      LOG.debug("NetworkTopology became:\n{}", this);
     } finally {
       netlock.writeLock().unlock();
     }
@@ -506,7 +505,7 @@ public void remove(Node node) {
           numOfRacks--;
         }
       }
-      LOG.debug("NetworkTopology became:\n{}", this.toString());
+      LOG.debug("NetworkTopology became:\n{}", this);
     } finally {
       netlock.writeLock().unlock();
     }
@@ -765,7 +764,7 @@ private Node chooseRandom(final String scope, String excludedScope,
     }
     if (numOfDatanodes == 0) {
       LOG.debug("Failed to find datanode (scope=\"{}\" excludedScope=\"{}\").",
-          String.valueOf(scope), String.valueOf(excludedScope));
+          scope, excludedScope);
       return null;
     }
     Node ret = null;
@@ -778,7 +777,7 @@ private Node chooseRandom(final String scope, String excludedScope,
     }
     LOG.debug("Choosing random from {} available nodes on node {},"
         + " scope={}, excludedScope={}, excludeNodes={}", availableNodes,
-        innerNode.toString(), scope, excludedScope, excludedNodes);
+        innerNode, scope, excludedScope, excludedNodes);
     if (availableNodes > 0) {
       do {
         int leaveIndex = r.nextInt(numOfDatanodes);
-- 
1.7.9.5

