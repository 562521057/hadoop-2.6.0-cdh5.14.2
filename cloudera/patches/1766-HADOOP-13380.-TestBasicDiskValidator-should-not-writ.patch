From a0164e42907ad8485840a3fc3b98e4245582aa2c Mon Sep 17 00:00:00 2001
From: Lei Xu <lei@apache.org>
Date: Mon, 8 Aug 2016 15:04:11 -0700
Subject: [PATCH 1766/2748] HADOOP-13380. TestBasicDiskValidator should not
 write data to /tmp (Yufei Gu via lei)

(cherry picked from commit 6418edd6feeafc0204536e1860942eeb1cb1a9ce)
(cherry picked from commit 2cd4092c816ca77730e0c5c4134ac52019f480fe)

Change-Id: Ic570b9687296b244d676164876da1ade48359498
---
 .../apache/hadoop/util/TestBasicDiskValidator.java |    8 +----
 .../org/apache/hadoop/util/TestDiskChecker.java    |   35 +++++++++++++-------
 2 files changed, 24 insertions(+), 19 deletions(-)

diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestBasicDiskValidator.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestBasicDiskValidator.java
index c961ee8..d6964a4 100644
--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestBasicDiskValidator.java
+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestBasicDiskValidator.java
@@ -30,14 +30,8 @@
   @Override
   protected void checkDirs(boolean isDir, String perm, boolean success)
       throws Throwable {
-    File localDir = File.createTempFile("test", "tmp");
+    File localDir = isDir ? createTempDir() : createTempFile();
     try {
-      if (isDir) {
-        // reuse the file path generated by File#createTempFile to create a dir
-        localDir.delete();
-        localDir.mkdir();
-      }
-
       Shell.execCommand(Shell.getSetPermissionCommand(perm, false,
           localDir.getAbsolutePath()));
 
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestDiskChecker.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestDiskChecker.java
index 7a70e32..e2e152a 100644
--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestDiskChecker.java
+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestDiskChecker.java
@@ -18,6 +18,7 @@
 package org.apache.hadoop.util;
 
 import java.io.*;
+import java.nio.file.Files;
 
 import org.junit.Test;
 import static org.junit.Assert.*;
@@ -25,7 +26,6 @@
 import static org.mockito.Mockito.*;
 
 import static org.apache.hadoop.test.MockitoMaker.*;
-import static org.apache.hadoop.fs.permission.FsAction.*;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
@@ -33,7 +33,6 @@
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.fs.permission.FsPermission;
 import org.apache.hadoop.util.DiskChecker.DiskErrorException;
-import org.apache.hadoop.util.Shell;
 
 public class TestDiskChecker {
   final FsPermission defaultPerm = new FsPermission("755");
@@ -111,13 +110,29 @@ public void testCheckDir_notListable() throws Throwable {
     _checkDirs(true, new FsPermission("666"), false);   // not listable
   }
 
+  /**
+   * Create an empty file with a random name under test directory.
+   * @return the created file
+   * @throws java.io.IOException if any
+   */
+  protected File createTempFile() throws java.io.IOException {
+    File testDir = new File(System.getProperty("test.build.data"));
+    return Files.createTempFile(testDir.toPath(), "test", "tmp").toFile();
+  }
+
+  /**
+   * Create an empty directory with a random name under test directory.
+   * @return the created directory
+   * @throws java.io.IOException if any
+   */
+  protected File createTempDir() throws java.io.IOException {
+    File testDir = new File(System.getProperty("test.build.data"));
+    return Files.createTempDirectory(testDir.toPath(), "test").toFile();
+  }
+
   private void _checkDirs(boolean isDir, FsPermission perm, boolean success)
       throws Throwable {
-    File localDir = File.createTempFile("test", "tmp");
-    if (isDir) {
-      localDir.delete();
-      localDir.mkdir();
-    }
+    File localDir = isDir ? createTempDir() : createTempFile();
     Shell.execCommand(Shell.getSetPermissionCommand(String.format("%04o",
       perm.toShort()), false, localDir.getAbsolutePath()));
     try {
@@ -162,11 +177,7 @@ public void testCheckDir_notListable_local() throws Throwable {
 
   protected void checkDirs(boolean isDir, String perm, boolean success)
       throws Throwable {
-    File localDir = File.createTempFile("test", "tmp");
-    if (isDir) {
-      localDir.delete();
-      localDir.mkdir();
-    }
+    File localDir = isDir ? createTempDir() : createTempFile();
     Shell.execCommand(Shell.getSetPermissionCommand(perm, false,
                                                     localDir.getAbsolutePath()));
     try {
-- 
1.7.9.5

