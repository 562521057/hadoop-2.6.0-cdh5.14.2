From 30db7b47ef94d0aeef077bda78be7889820d179e Mon Sep 17 00:00:00 2001
From: Sean Mackrory <mackrorysd@apache.org>
Date: Wed, 21 Feb 2018 12:53:18 -0700
Subject: [PATCH 2745/2748] HADOOP-6852. apparent bug in concatenated-bzip2
 support (decoding). Contributed by Zsolt Venczel.

Ref.: CDH-65686

(cherry picked from commit 2bc3351eaf240ea685bcf5042d79f1554bf89e00)
(cherry picked from commit f392bc8217aa9f3df002c74923a835996bfb22e8)

Conflicts:
	hadoop-client-modules/hadoop-client-minicluster/pom.xml
	hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java
	hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestConcatenatedCompressedInput.java

Change-Id: I05aa5cd9d433202aaf8a237774988a15127bfdcc
---
 .../org/apache/hadoop/io/compress/BZip2Codec.java  |    3 +-
 .../mapred/TestConcatenatedCompressedInput.java    |   71 +++++++++++---------
 .../src/test/resources/testdata/concat.bz2         |  Bin 0 -> 208 bytes
 .../src/test/resources/testdata/concat.gz          |  Bin 0 -> 148 bytes
 .../testdata/testCompressThenConcat.txt.bz2        |  Bin 0 -> 3056 bytes
 .../testdata/testCompressThenConcat.txt.gz         |  Bin 0 -> 3413 bytes
 .../testdata/testConcatThenCompress.txt.bz2        |  Bin 0 -> 2567 bytes
 .../testdata/testConcatThenCompress.txt.gz         |  Bin 0 -> 2734 bytes
 8 files changed, 40 insertions(+), 34 deletions(-)
 create mode 100644 hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/concat.bz2
 create mode 100644 hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/concat.gz
 create mode 100644 hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/testCompressThenConcat.txt.bz2
 create mode 100644 hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/testCompressThenConcat.txt.gz
 create mode 100644 hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/testConcatThenCompress.txt.bz2
 create mode 100644 hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/testConcatThenCompress.txt.gz

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java
index c7ae0ae..65ee053 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java
@@ -174,7 +174,8 @@ public CompressionInputStream createInputStream(InputStream in,
     return Bzip2Factory.isNativeBzip2Loaded(conf) ? 
       new DecompressorStream(in, decompressor,
                              conf.getInt("io.file.buffer.size", 4*1024)) :
-      new BZip2CompressionInputStream(in);
+      new BZip2CompressionInputStream(
+              in, 0L, Long.MAX_VALUE, READ_MODE.BYBLOCK);
   }
 
   /**
diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestConcatenatedCompressedInput.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestConcatenatedCompressedInput.java
index 99221cb..f5dcf86 100644
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestConcatenatedCompressedInput.java
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapred/TestConcatenatedCompressedInput.java
@@ -36,13 +36,23 @@
 import org.apache.hadoop.util.LineReader;
 import org.apache.hadoop.util.ReflectionUtils;
 
-import org.junit.Ignore;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import java.io.ByteArrayInputStream;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.zip.Inflater;
+
 import org.junit.Test;
 import static org.junit.Assert.*;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-@Ignore
+/**
+ * Test class for concatenated {@link CompressionInputStream}.
+ */
 public class TestConcatenatedCompressedInput {
   private static final Log LOG =
     LogFactory.getLog(TestConcatenatedCompressedInput.class.getName());
@@ -76,13 +86,15 @@
     }
   }
 
+
+  private static final String DEFAULT_WORK_DIR = "target/test-classes/testdata";
   private static Path workDir =
-    new Path(new Path(System.getProperty("test.build.data", "/tmp")),
+    new Path(new Path(System.getProperty("test.build.data", DEFAULT_WORK_DIR)),
              "TestConcatenatedCompressedInput").makeQualified(localFs);
 
   private static LineReader makeStream(String str) throws IOException {
-    return new LineReader(new ByteArrayInputStream(str.getBytes("UTF-8")),
-                          defaultConf);
+    return new LineReader(new ByteArrayInputStream(
+        str.getBytes("UTF-8")), defaultConf);
   }
 
   private static void writeFile(FileSystem fs, Path name,
@@ -181,7 +193,8 @@ public void testGzip() throws IOException {
 
     // copy prebuilt (correct!) version of concat.gz to HDFS
     final String fn = "concat" + gzip.getDefaultExtension();
-    Path fnLocal = new Path(System.getProperty("test.concat.data", "/tmp"), fn);
+    Path fnLocal = new Path(
+            System.getProperty("test.concat.data", DEFAULT_WORK_DIR), fn);
     Path fnHDFS  = new Path(workDir, fn);
     localFs.copyFromLocalFile(fnLocal, fnHDFS);
 
@@ -218,7 +231,7 @@ public void testGzip() throws IOException {
   @Test
   public void testPrototypeInflaterGzip() throws IOException {
     CompressionCodec gzip = new GzipCodec();  // used only for file extension
-    localFs.delete(workDir, true);            // localFs = FileSystem instance
+    localFs.delete(workDir, true); // localFs = FileSystem instance
 
     System.out.println(COLOR_BR_BLUE + "testPrototypeInflaterGzip() using " +
       "non-native/Java Inflater and manual gzip header/trailer parsing" +
@@ -226,7 +239,8 @@ public void testPrototypeInflaterGzip() throws IOException {
 
     // copy prebuilt (correct!) version of concat.gz to HDFS
     final String fn = "concat" + gzip.getDefaultExtension();
-    Path fnLocal = new Path(System.getProperty("test.concat.data", "/tmp"), fn);
+    Path fnLocal = new Path(
+            System.getProperty("test.concat.data", DEFAULT_WORK_DIR), fn);
     Path fnHDFS  = new Path(workDir, fn);
     localFs.copyFromLocalFile(fnLocal, fnHDFS);
 
@@ -317,14 +331,16 @@ public void testBuiltInGzipDecompressor() throws IOException {
 
     // copy single-member test file to HDFS
     String fn1 = "testConcatThenCompress.txt" + gzip.getDefaultExtension();
-    Path fnLocal1 = new Path(System.getProperty("test.concat.data","/tmp"),fn1);
+    Path fnLocal1 = new Path(
+            System.getProperty("test.concat.data",DEFAULT_WORK_DIR),fn1);
     Path fnHDFS1  = new Path(workDir, fn1);
     localFs.copyFromLocalFile(fnLocal1, fnHDFS1);
 
     // copy multiple-member test file to HDFS
     // (actually in "seekable gzip" format, a la JIRA PIG-42)
     String fn2 = "testCompressThenConcat.txt" + gzip.getDefaultExtension();
-    Path fnLocal2 = new Path(System.getProperty("test.concat.data","/tmp"),fn2);
+    Path fnLocal2 = new Path(
+            System.getProperty("test.concat.data",DEFAULT_WORK_DIR),fn2);
     Path fnHDFS2  = new Path(workDir, fn2);
     localFs.copyFromLocalFile(fnLocal2, fnHDFS2);
 
@@ -475,7 +491,8 @@ public void testBzip2() throws IOException {
 
     // copy prebuilt (correct!) version of concat.bz2 to HDFS
     final String fn = "concat" + bzip2.getDefaultExtension();
-    Path fnLocal = new Path(System.getProperty("test.concat.data", "/tmp"), fn);
+    Path fnLocal = new Path(
+            System.getProperty("test.concat.data", DEFAULT_WORK_DIR), fn);
     Path fnHDFS  = new Path(workDir, fn);
     localFs.copyFromLocalFile(fnLocal, fnHDFS);
 
@@ -525,13 +542,15 @@ public void testMoreBzip2() throws IOException {
 
     // copy single-member test file to HDFS
     String fn1 = "testConcatThenCompress.txt" + bzip2.getDefaultExtension();
-    Path fnLocal1 = new Path(System.getProperty("test.concat.data","/tmp"),fn1);
+    Path fnLocal1 = new Path(
+            System.getProperty("test.concat.data",DEFAULT_WORK_DIR),fn1);
     Path fnHDFS1  = new Path(workDir, fn1);
     localFs.copyFromLocalFile(fnLocal1, fnHDFS1);
 
     // copy multiple-member test file to HDFS
     String fn2 = "testCompressThenConcat.txt" + bzip2.getDefaultExtension();
-    Path fnLocal2 = new Path(System.getProperty("test.concat.data","/tmp"),fn2);
+    Path fnLocal2 = new Path(
+            System.getProperty("test.concat.data",DEFAULT_WORK_DIR),fn2);
     Path fnHDFS2  = new Path(workDir, fn2);
     localFs.copyFromLocalFile(fnLocal2, fnHDFS2);
 
@@ -543,21 +562,6 @@ public void testMoreBzip2() throws IOException {
     assertEquals("concat bytes available", 2567, in1.available());
     assertEquals("concat bytes available", 3056, in2.available());
 
-/*
-    // FIXME
-    // The while-loop below dies at the beginning of the 2nd concatenated
-    // member (after 17 lines successfully read) with:
-    //
-    //   java.io.IOException: bad block header
-    //   at org.apache.hadoop.io.compress.bzip2.CBZip2InputStream.initBlock(
-    //   CBZip2InputStream.java:527)
-    //
-    // It is not critical to concatenated-gzip support, HADOOP-6835, so it's
-    // simply commented out for now (and HADOOP-6852 filed).  If and when the
-    // latter issue is resolved--perhaps by fixing an error here--this code
-    // should be reenabled.  Note that the doMultipleBzip2BufferSizes() test
-    // below uses the same testCompressThenConcat.txt.bz2 file but works fine.
-
     CompressionInputStream cin2 = bzip2.createInputStream(in2);
     LineReader in = new LineReader(cin2);
     Text out = new Text();
@@ -572,7 +576,6 @@ public void testMoreBzip2() throws IOException {
                  5346, totalBytes);
     assertEquals("total uncompressed lines in concatenated test file",
                  84, lineNum);
- */
 
     // test CBZip2InputStream with lots of different input-buffer sizes
     doMultipleBzip2BufferSizes(jobConf, false);
@@ -645,7 +648,8 @@ private static void doMultipleBzip2BufferSizes(JobConf jConf,
 
   // this tests both files (testCompressThenConcat, testConcatThenCompress); all
   // should work with existing Java bzip2 decoder and any future native version
-  private static void doSingleBzip2BufferSize(JobConf jConf) throws IOException {
+  private static void doSingleBzip2BufferSize(JobConf jConf)
+      throws IOException {
     TextInputFormat format = new TextInputFormat();
     format.configure(jConf);
     format.setMinSplitSize(5500);  // work around 256-byte/22-splits issue
@@ -654,7 +658,8 @@ private static void doSingleBzip2BufferSize(JobConf jConf) throws IOException {
     InputSplit[] splits = format.getSplits(jConf, 100);
     assertEquals("compressed splits == 2", 2, splits.length);
     FileSplit tmp = (FileSplit) splits[0];
-    if (tmp.getPath().getName().equals("testCompressThenConcat.txt.gz")) {
+    if (tmp.getPath()
+            .getName().equals("testdata/testCompressThenConcat.txt.gz")) {
       System.out.println("  (swapping)");
       splits[0] = splits[1];
       splits[1] = tmp;
diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/concat.bz2 b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/concat.bz2
new file mode 100644
index 0000000000000000000000000000000000000000..f31fb0c32bb5e5b7db4e5622d78c21202dcaf30a
GIT binary patch
literal 208
zcmZ>Y%CIzaj8qGbyyK_&f`NhaW&?wO1A_pAb^4tN3JiumYO|PqoaKT~Nxtg&GH+?9
z%`I1+JKLxCKRevi#W?A(WBIATcYH_hO!N~`F&FNtVsL_+SEgzt&A`9}GtW->ihu%x
z(k!{fR}xnQGq7B$T($6q(b@JO;VFVYc2Ckg)Y80BbHWXTe#-}wZZI&gfb@GXNHADI
m^f&u^nA~(~o0Y)WDXD)x&rQ)I%4hzgcOJ{RgxGC_q8R|WP)b<<

literal 0
HcmV?d00001

diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/concat.gz b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/concat.gz
new file mode 100644
index 0000000000000000000000000000000000000000..53d5a07fcaede992597112d3d05af8a71557fc30
GIT binary patch
literal 148
zcmb2|=3tPx^wpbz+55DPmR_L8`cpaq9_P+``{_IkI^lcP*Gu=2)_I+i0U9SYynI7X
zoIK;L`;3X<%dI~vv>6x}<bm2v!P<>ac_V8Mgz9Btc&Dt?Ee=)c1hEOpj#FSOf&$Ed
Nh9<l{UnK@q2>=1$IUWE2

literal 0
HcmV?d00001

diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/testCompressThenConcat.txt.bz2 b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/testCompressThenConcat.txt.bz2
new file mode 100644
index 0000000000000000000000000000000000000000..a21c0e2c10b6e7572cb330bf793d4e3aea7e25db
GIT binary patch
literal 3056
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

literal 0
HcmV?d00001

diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/testCompressThenConcat.txt.gz b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/testCompressThenConcat.txt.gz
new file mode 100644
index 0000000000000000000000000000000000000000..75e5f8c7f7405238ec5f36380b4026aa20411128
GIT binary patch
literal 3413
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

literal 0
HcmV?d00001

diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/testConcatThenCompress.txt.bz2 b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/testConcatThenCompress.txt.bz2
new file mode 100644
index 0000000000000000000000000000000000000000..5983e52cc034a6a9b482e7c0bdca8515bb99dad0
GIT binary patch
literal 2567
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

literal 0
HcmV?d00001

diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/testConcatThenCompress.txt.gz b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/resources/testdata/testConcatThenCompress.txt.gz
new file mode 100644
index 0000000000000000000000000000000000000000..6e8eaa56f78953871b3f1dd0081f7719c1e4b4fe
GIT binary patch
literal 2734
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

literal 0
HcmV?d00001

-- 
1.7.9.5

