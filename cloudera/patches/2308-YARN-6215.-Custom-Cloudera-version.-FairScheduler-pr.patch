From 193a60541f4e10ce53158983fb7a9e93bb9d8d78 Mon Sep 17 00:00:00 2001
From: Karthik Kambatla <kasha@apache.org>
Date: Sun, 26 Feb 2017 20:16:36 -0800
Subject: [PATCH 2308/2748] YARN-6215. Custom Cloudera version. FairScheduler
 preemption and update should not run
 concurrently. (Tao Jie via kasha)

C5.x (based on 2.6.0) FairScheduler locking is through synchroization on the scheduler object. Upstram (2.9.0+) uses separate read and write locks.
Accordingly, this commit applies YARN-6215 in principle: performs the preemption code under the same lock as the scheduler uses to run update.

(cherry picked from commit 815d53506fb0c5ca029c993d6b094db2ac0ca6eb)
(cherry picked from commit a95d3e1fe7d533990be305e6cf1d10c8c512908b)

Change-Id: If8006a6f5aef6eadcbd348caa2a0cd54354524a0
---
 .../scheduler/fair/FSPreemptionThread.java         |    9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java
index 9d7ab71..dc21a3a 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java
@@ -32,6 +32,7 @@
 import java.util.List;
 import java.util.Timer;
 import java.util.TimerTask;
+import java.util.concurrent.locks.Lock;
 
 /**
  * Thread that handles FairScheduler preemption.
@@ -68,7 +69,13 @@ public void run() {
       FSAppAttempt starvedApp;
       try{
         starvedApp = context.getStarvedApps().take();
-        preemptContainers(identifyContainersToPreempt(starvedApp));
+        // CLOUDERA-ONLY. In the upstream code, the scheduler has separate
+        // read/write locks, but our version just uses synchronized.
+        // Hold the scheduler lock so this is not concurrent with the
+        // update thread.
+        synchronized (scheduler) {
+          preemptContainers(identifyContainersToPreempt(starvedApp));
+        }
         starvedApp.preemptionTriggered(delayBeforeNextStarvationCheck);
       } catch (InterruptedException e) {
         LOG.info("Preemption thread interrupted! Exiting.");
-- 
1.7.9.5

