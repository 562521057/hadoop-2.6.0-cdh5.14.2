From 2a20e3e42908321292b9d15e69e046db1ec80e6c Mon Sep 17 00:00:00 2001
From: Wei-Chiu Chuang <weichiu@cloudera.com>
Date: Mon, 2 May 2016 06:44:44 -0700
Subject: [PATCH 1473/2748] HADOOP-12406. Fixed AbstractMapWritable.readFields
 to use the thread's ClassLoader to load class
 instead of System ClassLoader. Contributed by
 Nadeem Douba.

(cherry picked from commit 069c6c62def4a0f94382e9f149581d8e22f6d31c)
(cherry picked from commit 66072070d0c07573235a3c26a5b97fc6905c213a)

Change-Id: Ieb8d3ee6c1962039a99e6aad28a542bfb82d3a08
---
 .../org/apache/hadoop/io/AbstractMapWritable.java  |   16 +++++++++-------
 1 file changed, 9 insertions(+), 7 deletions(-)

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/AbstractMapWritable.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/AbstractMapWritable.java
index cc1e517..0aa4b70 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/AbstractMapWritable.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/AbstractMapWritable.java
@@ -197,20 +197,22 @@ public void write(DataOutput out) throws IOException {
   public void readFields(DataInput in) throws IOException {
     
     // Get the number of "unknown" classes
-    
     newClasses = in.readByte();
-    
+
+    // Use the classloader of the current thread to load classes instead of the
+    // system-classloader so as to support both client-only and inside-a-MR-job
+    // use-cases. The context-loader by default eventually falls back to the
+    // system one, so there should be no cases where changing this is an issue.
+    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
+
     // Then read in the class names and add them to our tables
-    
     for (int i = 0; i < newClasses; i++) {
       byte id = in.readByte();
       String className = in.readUTF();
       try {
-        addToMap(Class.forName(className), id);
-        
+        addToMap(classLoader.loadClass(className), id);
       } catch (ClassNotFoundException e) {
-        throw new IOException("can't find class: " + className + " because "+
-            e.getMessage());
+        throw new IOException(e);
       }
     }
   }    
-- 
1.7.9.5

