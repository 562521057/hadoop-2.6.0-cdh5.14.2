From f733441906ce139634e9ff8359fcb6cb6c40089b Mon Sep 17 00:00:00 2001
From: Tsuyoshi Ozawa <ozawa@apache.org>
Date: Wed, 21 Oct 2015 23:08:02 +0900
Subject: [PATCH 1258/2748] YARN-3798. ZKRMStateStore shouldn't create new
 session without occurrance of SESSIONEXPIED.
 (ozawa and Varun Saxena)

(cherry picked from commit b898f8014fcd54392a404d83de5c57c41b084c45)

Change-Id: I579beed46bf052bcb2309288e9b24f63b913ff46
---
 .../resourcemanager/recovery/ZKRMStateStore.java   |   78 +++++++++++++++++++-
 1 file changed, 76 insertions(+), 2 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
index 55e0e72..2588f22 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
@@ -28,6 +28,8 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -60,6 +62,7 @@
 import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.impl.pb.ApplicationStateDataPBImpl;
 import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.impl.pb.EpochPBImpl;
 import org.apache.hadoop.yarn.util.ConverterUtils;
+import org.apache.zookeeper.AsyncCallback;
 import org.apache.zookeeper.CreateMode;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.KeeperException.Code;
@@ -107,6 +110,20 @@
   private List<ACL> zkAcl;
   private List<ZKUtil.ZKAuthInfo> zkAuths;
 
+  class ZKSyncOperationCallback implements AsyncCallback.VoidCallback {
+    public final CountDownLatch latch = new CountDownLatch(1);
+    @Override
+    public void processResult(int rc, String path, Object ctx){
+      if (rc == Code.OK.intValue()) {
+        LOG.info("ZooKeeper sync operation succeeded. path: " + path);
+        latch.countDown();
+      } else {
+        LOG.fatal("ZooKeeper sync operation failed. Waiting for session " +
+            "timeout. path: " + path);
+      }
+    }
+  }
+
   /**
    *
    * ROOT_DIR_PATH
@@ -292,6 +309,7 @@ public synchronized void startInternal() throws Exception {
     createRootDir(delegationTokensRootPath);
     createRootDir(dtSequenceNumberPath);
     createRootDir(amrmTokenSecretManagerRoot);
+    syncInternal(zkRootNodePath);
   }
 
   private void createRootDir(final String rootPath) throws Exception {
@@ -876,6 +894,7 @@ public synchronized void processWatchEvent(ZooKeeper zk,
           // call listener to reconnect
           LOG.info("ZKRMStateStore Session expired");
           createConnection();
+          syncInternal(event.getPath());
           break;
         default:
           LOG.error("Unexpected Zookeeper" +
@@ -893,6 +912,27 @@ String getNodePath(String root, String nodeName) {
   }
 
   /**
+   * Helper method to call ZK's sync() after calling createConnection().
+   * Note that sync path is meaningless for now:
+   * http://mail-archives.apache.org/mod_mbox/zookeeper-user/201102.mbox/browser
+   * @param path path to sync, nullable value. If the path is null,
+   *             zkRootNodePath is used to sync.
+   * @return true if ZK.sync() succeededs, false if ZK.sync() fails.
+   * @throws InterruptedException
+   */
+  private boolean syncInternal(String path) throws InterruptedException {
+    ZKSyncOperationCallback cb = new ZKSyncOperationCallback();
+    if (path != null) {
+      zkClient.sync(path, cb, null);
+    } else {
+      zkClient.sync(zkRootNodePath, cb, null);
+    }
+    boolean succeededToSync = cb.latch.await(
+        zkSessionTimeout, TimeUnit.MILLISECONDS);
+    return succeededToSync;
+  }
+
+  /**
    * Helper method that creates fencing node, executes the passed operations,
    * and deletes the fencing node.
    */
@@ -1085,6 +1125,18 @@ private boolean shouldRetry(Code code) {
       switch (code) {
         case CONNECTIONLOSS:
         case OPERATIONTIMEOUT:
+          return true;
+        default:
+          break;
+      }
+      return false;
+    }
+
+    private boolean shouldRetryWithNewConnection(Code code) {
+      // For fast recovery, we choose to close current connection after
+      // SESSIONMOVED occurs. Latest state of a zknode path is ensured by
+      // following zk.sync(path) operation.
+      switch (code) {
         case SESSIONEXPIRED:
         case SESSIONMOVED:
           return true;
@@ -1117,12 +1169,34 @@ T runWithRetries() throws Exception {
           }
 
           LOG.info("Exception while executing a ZK operation.", ke);
-          if (shouldRetry(ke.code()) && ++retry < numRetries) {
+          retry++;
+          if (shouldRetry(ke.code()) && retry < numRetries) {
             LOG.info("Retrying operation on ZK. Retry no. " + retry);
             Thread.sleep(zkRetryInterval);
-            createConnection();
             continue;
           }
+          if (shouldRetryWithNewConnection(ke.code()) && retry < numRetries) {
+            LOG.info("Retrying operation on ZK with new Connection. " +
+                "Retry no. " + retry);
+            Thread.sleep(zkRetryInterval);
+            createConnection();
+            boolean succeededToSync = false;
+            try {
+              succeededToSync = syncInternal(ke.getPath());
+            } catch (InterruptedException ie) {
+              LOG.info("Interrupted sync operation. Giving up!");
+              Thread.currentThread().interrupt();
+              throw ke;
+            }
+            if (succeededToSync) {
+              // continue the operation.
+              continue;
+            } else {
+              // Giving up since new connection without sync can occur an
+              // unexpected view from the client like YARN-3798.
+              LOG.info("Failed to sync with ZK new connection.");
+            }
+          }
           LOG.info("Maxed out ZK retries. Giving up!");
           throw ke;
         }
-- 
1.7.9.5

