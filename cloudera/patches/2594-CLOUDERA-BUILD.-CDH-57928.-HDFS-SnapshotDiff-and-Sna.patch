From e16c33d9650eed5ce28fa16acd0187cc82696993 Mon Sep 17 00:00:00 2001
From: Manoj Govindassamy <manojg@cloudera.com>
Date: Wed, 16 Aug 2017 14:26:57 -0700
Subject: [PATCH 2594/2748] CLOUDERA-BUILD. CDH-57928. HDFS SnapshotDiff and
 SnapshotCopy should not include AclFeature from
 external auth providers.

Change-Id: I9d47c4bea2fd4d548ca2ab404db80b1d7f601854
---
 .../hdfs/server/namenode/INodeAttributes.java      |    2 +-
 .../hdfs/server/namenode/INodeDirectory.java       |   10 +-
 .../server/namenode/INodeDirectoryAttributes.java  |   10 +-
 .../hadoop/hdfs/server/namenode/INodeFile.java     |   10 +-
 .../hdfs/server/namenode/INodeFileAttributes.java  |   10 +-
 .../namenode/snapshot/TestSnapshotDiffReport.java  |  127 ++++++++++++++++++--
 6 files changed, 140 insertions(+), 29 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributes.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributes.java
index d96d701..0b90915 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributes.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeAttributes.java
@@ -96,7 +96,7 @@
     SnapshotCopy(INode inode) {
       this.name = inode.getLocalNameBytes();
       this.permission = inode.getPermissionLong();
-      this.aclFeature = inode.getAclFeature();
+      this.aclFeature = inode.getFsimageAclFeature();
       this.modificationTime = inode.getModificationTime();
       this.accessTime = inode.getAccessTime();
       this.xAttrFeature = inode.getXAttrFeature();
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java
index 4317f6f..96fcb09 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java
@@ -814,16 +814,18 @@ public void destroyAndCollectBlocks(final BlocksMapUpdateInfo collectedBlocks,
    * Compare the metadata with another INodeDirectory.
    * AclFeature needs equals() check on top of object reference
    * check as HDFS-7456 AclFeature de-duplication fix available
-   * in the upstream is not backported yet.
+   * in the upstream is not backported yet. Also just as in
+   * upstream, only local AclFeatures are used for comparison.
    */
   @Override
   public boolean metadataEquals(INodeDirectoryAttributes other) {
     return other != null
         && getQuotaCounts().equals(other.getQuotaCounts())
         && getPermissionLong() == other.getPermissionLong()
-        && ((getAclFeature() == other.getAclFeature()) ||
-        (getAclFeature() != null && other.getAclFeature() != null &&
-            getAclFeature().equals(other.getAclFeature())))
+        && ((getFsimageAclFeature() == other.getFsimageAclFeature()) ||
+        (getFsimageAclFeature() != null &&
+            other.getFsimageAclFeature() != null &&
+            getFsimageAclFeature().equals(other.getFsimageAclFeature())))
         && getXAttrFeature() == other.getXAttrFeature();
   }
   
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectoryAttributes.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectoryAttributes.java
index eedfbfb..fb8dd7c 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectoryAttributes.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectoryAttributes.java
@@ -53,16 +53,18 @@ public SnapshotCopy(INodeDirectory dir) {
      * Compare the metadata with another INodeDirectory.
      * AclFeature needs equals() check on top of object reference
      * check as HDFS-7456 AclFeature de-duplication fix available
-     * in the upstream is not backported yet.
+     * in the upstream is not backported yet. Also just as in
+     * upstream, only local AclFeatures are used for comparison.
      */
     @Override
     public boolean metadataEquals(INodeDirectoryAttributes other) {
       return other != null
           && getQuotaCounts().equals(other.getQuotaCounts())
           && getPermissionLong() == other.getPermissionLong()
-          && ((getAclFeature() == other.getAclFeature()) ||
-          (getAclFeature() != null && other.getAclFeature() != null &&
-              getAclFeature().equals(other.getAclFeature())))
+          && ((getFsimageAclFeature() == other.getFsimageAclFeature()) ||
+          (getFsimageAclFeature() != null &&
+              other.getFsimageAclFeature() != null &&
+              getFsimageAclFeature().equals(other.getFsimageAclFeature())))
           && getXAttrFeature() == other.getXAttrFeature();
     }
   }
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
index f2cc267..a278a87 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
@@ -162,16 +162,18 @@ public final INodeFile asFile() {
    * Compare the metadata with another INodeFile.
    * AclFeature needs equals() check on top of object reference
    * check as HDFS-7456 AclFeature de-duplication fix available
-   * in the upstream is not backported yet.
+   * in the upstream is not backported yet. Also just as in
+   * upstream, only local AclFeatures are used for comparison.
    */
   @Override
   public boolean metadataEquals(INodeFileAttributes other) {
     return other != null
         && getHeaderLong()== other.getHeaderLong()
         && getPermissionLong() == other.getPermissionLong()
-        && ((getAclFeature() == other.getAclFeature()) ||
-        (getAclFeature() != null && other.getAclFeature() != null &&
-            getAclFeature().equals(other.getAclFeature())))
+        && ((getFsimageAclFeature() == other.getFsimageAclFeature()) ||
+        (getFsimageAclFeature() != null &&
+            other.getFsimageAclFeature() != null &&
+            getFsimageAclFeature().equals(other.getFsimageAclFeature())))
         && getXAttrFeature() == other.getXAttrFeature();
   }
 
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFileAttributes.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFileAttributes.java
index 309d393..8e856a9 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFileAttributes.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFileAttributes.java
@@ -82,16 +82,18 @@ public long getHeaderLong() {
      * Compare the metadata with another INodeFile.
      * AclFeature needs equals() check on top of object reference
      * check as HDFS-7456 AclFeature de-duplication fix available
-     * in the upstream is not backported yet.
+     * in the upstream is not backported yet. Also just as in
+     * upstream, only local AclFeatures are used for comparison.
      */
     @Override
     public boolean metadataEquals(INodeFileAttributes other) {
       return other != null
           && getHeaderLong()== other.getHeaderLong()
           && getPermissionLong() == other.getPermissionLong()
-          && ((getAclFeature() == other.getAclFeature()) ||
-          (getAclFeature() != null && other.getAclFeature() != null &&
-              getAclFeature().equals(other.getAclFeature())))
+          && ((getFsimageAclFeature() == other.getFsimageAclFeature()) ||
+          (getFsimageAclFeature() != null &&
+              other.getFsimageAclFeature() != null &&
+              getFsimageAclFeature().equals(other.getFsimageAclFeature())))
           && getXAttrFeature() == other.getXAttrFeature();
     }
   }
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/snapshot/TestSnapshotDiffReport.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/snapshot/TestSnapshotDiffReport.java
index da05dd0..80dc8aa 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/snapshot/TestSnapshotDiffReport.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/snapshot/TestSnapshotDiffReport.java
@@ -35,6 +35,7 @@
 import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Random;
 
 import com.google.common.collect.Lists;
@@ -56,6 +57,7 @@
 import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport;
 import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport.DiffReportEntry;
 import org.apache.hadoop.hdfs.protocol.SnapshotDiffReport.DiffType;
+import org.apache.hadoop.hdfs.server.namenode.AclFeature;
 import org.apache.hadoop.hdfs.server.namenode.AclTestHelpers;
 import org.apache.hadoop.hdfs.server.namenode.NameNode;
 import org.apache.hadoop.hdfs.server.namenode.NameNodeAdapter;
@@ -696,9 +698,68 @@ public void testDiffReportWithOpenFiles() throws Exception {
 
   public static class TestAuthorizationProviderForSnapDiff
       extends MyAuthorizationProvider {
+    private static boolean useDefault = false;
+    private static final Map<Long, AclFeature> aclFeatureMap =
+        new HashMap<>();
+    private static final Map<Long, FsPermission> permissionMap =
+        new HashMap<>();
+
     @Override
     protected boolean useDefault(INodeAuthorizationInfo iNode) {
-      return true;
+      return useDefault;
+    }
+
+    @Override
+    public void setPermission(INodeAuthorizationInfo node,
+        FsPermission permission) {
+      if (useDefault(node)) {
+        super.setPermission(node, permission);
+      } else {
+        permissionMap.put(node.getId(), permission);
+      }
+    }
+
+    @Override
+    public FsPermission getFsPermission(
+        INodeAuthorizationInfo node, int snapshotId) {
+      FsPermission permission;
+      if (useDefault(node)) {
+        return super.getFsPermission(node, snapshotId);
+      } else {
+        permission = permissionMap.get(node.getId());
+        if (permission == null) {
+          return  new FsPermission((short)0770);
+        }
+        return permission;
+      }
+    }
+
+    @Override
+    public AclFeature getAclFeature(INodeAuthorizationInfo node,
+        int snapshotId) {
+      if (useDefault(node)) {
+        return super.getAclFeature(node, snapshotId);
+      } else {
+        return aclFeatureMap.get(node.getId());
+      }
+    }
+
+    @Override
+    public void removeAclFeature(INodeAuthorizationInfo node) {
+      if (useDefault(node)) {
+        super.removeAclFeature(node);
+      } else {
+        aclFeatureMap.remove(node.getId());
+      }
+    }
+
+    @Override
+    public void addAclFeature(INodeAuthorizationInfo node, AclFeature f) {
+      if (useDefault(node)) {
+        super.addAclFeature(node, f);
+      } else {
+        aclFeatureMap.put(node.getId(), f);
+      }
     }
   }
 
@@ -708,8 +769,32 @@ protected boolean useDefault(INodeAuthorizationInfo iNode) {
    * snapshot diff doesn't report such files as modified.
    */
   @Test
-  public void testSetSameACLAndSnapshotDiff() throws Exception {
+  public void testSetSameACLAndSnapDiffWithAuthProvider() throws Exception {
     tearDown();
+    TestAuthorizationProviderForSnapDiff.useDefault = false;
+    testSetSameACLAndSnapDiffImpl();
+  }
+
+  /**
+   * AclFeature in the SnapshotCopy and the AclFeature in the current version
+   * could be same contents wise. Make sure the snapshot diff doesn't report
+   * such files as modified.
+   */
+  @Test
+  public void testSetSameACLAndSnapDiffWithoutAuthProvider() throws Exception {
+    tearDown();
+    TestAuthorizationProviderForSnapDiff.useDefault = true;
+    testSetSameACLAndSnapDiffImpl();
+  }
+
+  /**
+   * Get Acls for a file/dir and set the same Acl again on to same file/dir.
+   * Verify the snapshot diff across setAcl() doesn't report the file/dir as
+   * modified. Restart the NameNode, verify if the snapshots are rebuilt
+   * properly and the snapshot diff gives the same result. Repeat the
+   * setAcl() verification after the NameNode restart.
+   */
+  private void testSetSameACLAndSnapDiffImpl() throws Exception {
     conf = new Configuration();
     conf.setBoolean(
         DFSConfigKeys.DFS_NAMENODE_SNAPSHOT_CAPTURE_OPENFILES, true);
@@ -728,8 +813,13 @@ public void testSetSameACLAndSnapshotDiff() throws Exception {
     SnapshotTestHelper.createSnapshot(hdfs, dirPath, "S0");
 
     List<AclEntry> dirAclSpec = Lists.newArrayList(
-        aclEntry(DEFAULT, USER, "hdfs", READ_EXECUTE));
-    hdfs.modifyAclEntries(dirPath, dirAclSpec);
+        aclEntry(ACCESS, USER, READ_EXECUTE),
+        aclEntry(ACCESS, USER, "hdfs", READ_EXECUTE),
+        aclEntry(ACCESS, GROUP, READ_EXECUTE),
+        aclEntry(ACCESS, GROUP, "hdfs", READ_EXECUTE),
+        aclEntry(ACCESS, OTHER, READ_EXECUTE));
+    hdfs.setAcl(dirPath, dirAclSpec);
+    hdfs.setPermission(dirPath, FsPermission.createImmutable((short)0755));
 
     List<AclEntry> fileAclSpec = Lists.newArrayList(
         aclEntry(ACCESS, USER, ALL),
@@ -744,11 +834,9 @@ public void testSetSameACLAndSnapshotDiff() throws Exception {
     AclEntry[] dirAcls = dirAclStatus.getEntries().toArray(new AclEntry[0]);
     assertArrayEquals(
         new AclEntry[] {
-            aclEntry(DEFAULT, USER, ALL),
-            aclEntry(DEFAULT, USER, "hdfs", READ_EXECUTE),
-            aclEntry(DEFAULT, GROUP, READ_EXECUTE),
-            aclEntry(DEFAULT, MASK, READ_EXECUTE),
-            aclEntry(DEFAULT, OTHER, READ_EXECUTE)
+            aclEntry(ACCESS, USER, "hdfs", READ_EXECUTE),
+            aclEntry(ACCESS, GROUP, READ_EXECUTE),
+            aclEntry(ACCESS, GROUP, "hdfs", READ_EXECUTE),
         }, dirAcls);
     AclTestHelpers.assertPermission(hdfs, dirPath, ((short)010755));
 
@@ -761,16 +849,31 @@ public void testSetSameACLAndSnapshotDiff() throws Exception {
         }, fileAcls);
     AclTestHelpers.assertPermission(hdfs, filePath, ((short)010755));
 
-    List<AclEntry> sameDirAclSpec = Lists.newArrayList(dirAcls);
-    hdfs.setAcl(dirPath, sameDirAclSpec);
+    hdfs.setAcl(dirPath, dirAclSpec);
     hdfs.setAcl(filePath, fileAclSpec);
     SnapshotTestHelper.createSnapshot(hdfs, dirPath, "S1");
 
-    hdfs.setAcl(dirPath, sameDirAclSpec);
+    hdfs.setAcl(dirPath, dirAclSpec);
     hdfs.setAcl(filePath, fileAclSpec);
     SnapshotTestHelper.createSnapshot(hdfs, dirPath, "S2");
 
     verifyDiffReport(dirPath, "S1", "S2",
         new DiffReportEntry(DiffType.MODIFY, DFSUtil.string2Bytes("")));
+
+    restartNameNode();
+    cluster.waitActive();
+
+    verifyDiffReport(dirPath, "S1", "S2",
+        new DiffReportEntry(DiffType.MODIFY, DFSUtil.string2Bytes("")));
+
+    hdfs.setAcl(dirPath, dirAclSpec);
+    hdfs.setAcl(filePath, fileAclSpec);
+    SnapshotTestHelper.createSnapshot(hdfs, dirPath, "S3");
+
+    verifyDiffReport(dirPath, "S2", "S3",
+        new DiffReportEntry(DiffType.MODIFY, DFSUtil.string2Bytes("")));
+
+    verifyDiffReport(dirPath, "S1", "S3",
+        new DiffReportEntry(DiffType.MODIFY, DFSUtil.string2Bytes("")));
   }
 }
\ No newline at end of file
-- 
1.7.9.5

