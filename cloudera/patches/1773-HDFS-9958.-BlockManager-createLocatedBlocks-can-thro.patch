From d884c09bd67a727ca2c46d10c577c8b086f77e16 Mon Sep 17 00:00:00 2001
From: Kihwal Lee <kihwal@apache.org>
Date: Thu, 28 Apr 2016 16:47:04 -0500
Subject: [PATCH 1773/2748] HDFS-9958. BlockManager#createLocatedBlocks can
 throw NPE for corruptBlocks on failed storages.
 Contributed by Kuhu Shukla.

(cherry picked from commit a3ece8b5b4eec25a732773e1c1ded9bb7b449f33)

 Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestFileCorruption.java

Change-Id: I7ac662b7688d5b4216c85699425b95fbeaa68ab1
---
 .../hdfs/server/blockmanagement/BlockManager.java  |   22 ++++-
 .../org/apache/hadoop/hdfs/TestFileCorruption.java |  103 +++++++++++++++++++-
 2 files changed, 119 insertions(+), 6 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java
index 862cf83..2768513 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java
@@ -885,8 +885,8 @@ private LocatedBlock createLocatedBlock(final BlockInfo blk, final long pos
     }
 
     final int numNodes = blocksMap.numNodes(blk);
-    final boolean isCorrupt = numCorruptNodes == numNodes;
-    final int numMachines = isCorrupt ? numNodes: numNodes - numCorruptNodes;
+    final boolean isCorrupt = numCorruptReplicas == numNodes;
+    final int numMachines = isCorrupt ? numNodes: numNodes - numCorruptReplicas;
     final DatanodeStorageInfo[] machines = new DatanodeStorageInfo[numMachines];
     int j = 0;
     if (numMachines > 0) {
@@ -1204,11 +1204,23 @@ public void findAndMarkBlockAsCorrupt(final ExtendedBlock blk,
           + " as corrupt because datanode " + dn + " (" + dn.getDatanodeUuid()
           + ") does not exist");
     }
-    
+
+    DatanodeStorageInfo storage = null;
+    if (storageID != null) {
+      storage = node.getStorageInfo(storageID);
+    }
+    if (storage == null) {
+      storage = storedBlock.findStorageInfo(node);
+    }
+
+    if (storage == null) {
+      blockLog.debug("BLOCK* findAndMarkBlockAsCorrupt: {} not found on {}",
+          blk, dn);
+      return;
+    }
     markBlockAsCorrupt(new BlockToMarkCorrupt(storedBlock,
             blk.getGenerationStamp(), reason, Reason.CORRUPTION_REPORTED),
-        storageID == null ? null : node.getStorageInfo(storageID),
-        node);
+        storage, node);
   }
 
   /**
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestFileCorruption.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestFileCorruption.java
index c1a7ebb..c4a456a 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestFileCorruption.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestFileCorruption.java
@@ -18,15 +18,24 @@
 
 package org.apache.hadoop.hdfs;
 
+import org.apache.hadoop.hdfs.protocol.Block;
+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeStorageInfo;
+import org.apache.hadoop.hdfs.server.protocol.DatanodeStorage;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
+import java.io.IOException;
+import java.io.File;
 import java.io.FileOutputStream;
 import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
+import java.util.Random;
+import java.util.Set;
 
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.ChecksumException;
@@ -36,12 +45,13 @@
 import org.apache.hadoop.hdfs.protocol.BlockListAsLongs.BlockReportReplica;
 import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
 import org.apache.hadoop.hdfs.protocol.ExtendedBlock;
+import org.apache.hadoop.hdfs.server.blockmanagement.BlockManager;
+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor;
 import org.apache.hadoop.hdfs.server.datanode.DataNode;
 import org.apache.hadoop.hdfs.server.datanode.DataNodeTestUtils;
 import org.apache.hadoop.hdfs.server.namenode.FSNamesystem;
 import org.apache.hadoop.hdfs.server.namenode.NameNode;
 import org.apache.hadoop.hdfs.server.protocol.DatanodeRegistration;
-import org.apache.hadoop.hdfs.server.protocol.DatanodeStorage;
 import org.apache.hadoop.test.GenericTestUtils;
 import org.apache.hadoop.test.PathUtils;
 import org.apache.log4j.Level;
@@ -178,4 +188,95 @@ private static ExtendedBlock getFirstBlock(DataNode dn, String bpid) {
     }
     return null;
   }
+
+  @Test
+  public void testCorruptionWithDiskFailure() throws Exception {
+    MiniDFSCluster cluster = null;
+    try {
+      Configuration conf = new HdfsConfiguration();
+      cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
+      cluster.waitActive();
+      BlockManager bm = cluster.getNamesystem().getBlockManager();
+      FileSystem fs = cluster.getFileSystem();
+      final Path FILE_PATH = new Path("/tmp.txt");
+      final long FILE_LEN = 1L;
+      DFSTestUtil.createFile(fs, FILE_PATH, FILE_LEN, (short) 3, 1L);
+
+      // get the block
+      final String bpid = cluster.getNamesystem().getBlockPoolId();
+      File storageDir = cluster.getInstanceStorageDir(0, 0);
+      File dataDir = MiniDFSCluster.getFinalizedDir(storageDir, bpid);
+      assertTrue("Data directory does not exist", dataDir.exists());
+      ExtendedBlock blk = getBlock(bpid, dataDir);
+      if (blk == null) {
+        blk = getBlock(bpid, dataDir);
+      }
+      assertFalse("Data directory does not contain any blocks or there was an" +
+          " " +
+          "IO error", blk == null);
+      ArrayList<DataNode> datanodes = cluster.getDataNodes();
+      assertEquals(datanodes.size(), 3);
+      FSNamesystem ns = cluster.getNamesystem();
+      //fail the storage on that node which has the block
+      try {
+        ns.writeLock();
+        updateAllStorages(bm, datanodes);
+      } finally {
+        ns.writeUnlock();
+      }
+      ns.writeLock();
+      try {
+        markAllBlocksAsCorrupt(bm, blk);
+      } finally {
+        ns.writeUnlock();
+      }
+
+      // open the file
+      fs.open(FILE_PATH);
+
+      //clean up
+      fs.delete(FILE_PATH, false);
+    } finally {
+      if (cluster != null) { cluster.shutdown(); }
+    }
+
+  }
+
+  private void markAllBlocksAsCorrupt(BlockManager bm,
+                                      ExtendedBlock blk) throws IOException {
+    for (DatanodeStorageInfo info : bm.getStorages(blk.getLocalBlock())) {
+      bm.findAndMarkBlockAsCorrupt(
+          blk, info.getDatanodeDescriptor(), info.getStorageID(), "STORAGE_ID");
+    }
+  }
+
+  private void updateAllStorages(BlockManager bm,
+                                 ArrayList<DataNode> datanodes) throws Exception {
+    for (DataNode dd : datanodes) {
+      DatanodeDescriptor descriptor =
+          bm.getDatanodeManager().getDatanode(dd.getDatanodeId());
+      Set<DatanodeStorageInfo> setInfos = new HashSet<DatanodeStorageInfo>();
+      DatanodeStorageInfo[] infos = descriptor.getStorageInfos();
+      Random random = new Random();
+      for (int i = 0; i < infos.length; i++) {
+        int blkId = random.nextInt(101);
+        DatanodeStorage storage = new DatanodeStorage(Integer.toString(blkId),
+            DatanodeStorage.State.FAILED, StorageType.DISK);
+        infos[i].updateFromStorage(storage);
+        setInfos.add(infos[i]);
+      }
+    }
+  }
+
+  public static ExtendedBlock getBlock(String bpid, File dataDir) {
+    List<File> metadataFiles = MiniDFSCluster.getAllBlockMetadataFiles(dataDir);
+    if (metadataFiles == null || metadataFiles.isEmpty()) {
+      return null;
+    }
+    File metadataFile = metadataFiles.get(0);
+    File blockFile = Block.metaToBlockFile(metadataFile);
+    return new ExtendedBlock(bpid, Block.getBlockId(blockFile.getName()),
+        blockFile.length(), Block.getGenerationStamp(metadataFile.getName()));
+  }
+
 }
-- 
1.7.9.5

