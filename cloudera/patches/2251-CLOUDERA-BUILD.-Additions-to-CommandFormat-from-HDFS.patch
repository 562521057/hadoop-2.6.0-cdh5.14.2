From 82dbdbc9b1a0656732c52c3c563729bf17e8ab43 Mon Sep 17 00:00:00 2001
From: Sean Mackrory <sean@cloudera.com>
Date: Tue, 17 Jan 2017 09:36:57 -0700
Subject: [PATCH 2251/2748] CLOUDERA-BUILD. Additions to CommandFormat from
 HDFS-7701

Change-Id: Ia582c581ba576dd3ec6d9470a0336d91460b2757
---
 .../org/apache/hadoop/fs/shell/CommandFormat.java  |   49 +++++++++++++++++++-
 1 file changed, 48 insertions(+), 1 deletion(-)

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandFormat.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandFormat.java
index e1aeea9..0f9aa38 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandFormat.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandFormat.java
@@ -31,6 +31,7 @@
 public class CommandFormat {
   final int minPar, maxPar;
   final Map<String, Boolean> options = new HashMap<String, Boolean>();
+  final Map<String, String> optionsWithValue = new HashMap<String, String>();
   boolean ignoreUnknownOpts = false;
   
   /**
@@ -64,6 +65,18 @@ public CommandFormat(int min, int max, String ... possibleOpt) {
     }
   }
 
+  /**
+   * add option with value
+   *
+   * @param option option name
+   */
+  public void addOptionWithValue(String option) {
+    if (options.containsKey(option)) {
+      throw new DuplicatedOptionException(option);
+    }
+    optionsWithValue.put(option, null);
+  }
+
   /** Parse parameters starting from the given position
    * Consider using the variant that directly takes a List
    * 
@@ -99,6 +112,17 @@ public void parse(List<String> args) {
       if (options.containsKey(opt)) {
         args.remove(pos);
         options.put(opt, Boolean.TRUE);
+      } else if (optionsWithValue.containsKey(opt)) {
+        args.remove(pos);
+        if (pos < args.size() && (args.size() > minPar)) {
+          arg = args.get(pos);
+          args.remove(pos);
+        } else {
+          arg = "";
+        }
+        if (!arg.startsWith("-") || arg.equals("-")) {
+          optionsWithValue.put(opt, arg);
+        }
       } else if (ignoreUnknownOpts) {
         pos++;
       } else {
@@ -122,7 +146,19 @@ public void parse(List<String> args) {
   public boolean getOpt(String option) {
     return options.containsKey(option) ? options.get(option) : false;
   }
-  
+
+  /**
+   * get the option's value
+   *
+   * @param option option name
+   * @return option value
+   * if option exists, but no value assigned, return ""
+   * if option not exists, return null
+   */
+  public String getOptValue(String option) {
+    return optionsWithValue.get(option);
+  }
+
   /** Returns all the options that are set
    * 
    * @return Set<String> of the enabled options
@@ -203,4 +239,15 @@ public String getOption() {
       return option;
     }
   }
+
+  /**
+   * Used when a duplicated option is supplied to a command.
+   */
+  public static class DuplicatedOptionException extends IllegalArgumentException {
+    private static final long serialVersionUID = 0L;
+
+    public DuplicatedOptionException(String duplicatedOption) {
+      super("option " + duplicatedOption + " already exsits!");
+    }
+  }
 }
-- 
1.7.9.5

