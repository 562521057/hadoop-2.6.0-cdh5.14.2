From 18ef4d15a4b3c21bec123f36e3a190616dc0bce9 Mon Sep 17 00:00:00 2001
From: Yufei Gu <yufei@apache.org>
Date: Fri, 23 Jun 2017 13:26:03 -0700
Subject: [PATCH 2527/2748] YARN-5876.
 TestResourceTrackerService#testGracefulDecommissionWithApp
 fails intermittently on trunk. (Robert Kanter via
 Yufei Gu)

(cherry picked from commit 0b77262890d76b0a3a35fa64befc8a406bc70b27)
(cherry picked from commit 4c59b446e27caeb4f0675f862970c1d20d88b987)

Conflicts:
	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/MockRM.java

Detailed Conflicts:
- MockRM
	- Methods and variables have been renamed, constants added, etc across many different wide-sweeping commits.  I made the same logical changes in our current code.

Change-Id: I79c2b652ac77acb04b2c8ff5cf957ab804c66310
---
 .../hadoop/yarn/server/resourcemanager/MockRM.java |   34 +++++++++++++++-----
 1 file changed, 26 insertions(+), 8 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/MockRM.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/MockRM.java
index 9e82119..e0e1b4a 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/MockRM.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/MockRM.java
@@ -558,18 +558,36 @@ public void sendNodeLost(MockNM nm) throws Exception {
     node.handle(new RMNodeEvent(nm.getNodeId(), RMNodeEventType.EXPIRE));
   }
 
+  private RMNode getRMNode(NodeId nodeId) {
+    RMNode node = getRMContext().getRMNodes().get(nodeId);
+    if (node == null) {
+      node = getRMContext().getInactiveRMNodes().get(nodeId);
+    }
+    return node;
+  }
+
   public void NMwaitForState(NodeId nodeid, NodeState finalState)
       throws Exception {
-    RMNode node = getRMContext().getRMNodes().get(nodeid);
-    if (node == null) {
-      node = getRMContext().getInactiveRMNodes().get(nodeid);
+    int timeWaiting = 0;
+    RMNode node = getRMNode(nodeid);
+    while (node == null) {
+      if (timeWaiting >= 20 * 1000) {
+        break;
+      }
+      node = getRMNode(nodeid);
+      Thread.sleep(10);
+      timeWaiting += 10;
     }
-    Assert.assertNotNull("node shouldn't be null", node);
-    int timeoutSecs = 0;
-    while (!finalState.equals(node.getState()) && timeoutSecs++ < 20) {
-      System.out.println("Node State is : " + node.getState()
+    Assert.assertNotNull("node shouldn't be null (timedout)", node);
+    while (!finalState.equals(node.getState())) {
+      if (timeWaiting >= 20 * 1000) {
+        break;
+      }
+
+      LOG.info("Node State is : " + node.getState()
           + " Waiting for state : " + finalState);
-      Thread.sleep(500);
+      Thread.sleep(10);
+      timeWaiting += 10;
     }
     System.out.println("Node State is : " + node.getState());
     Assert.assertEquals("Node state is not correct (timedout)", finalState,
-- 
1.7.9.5

