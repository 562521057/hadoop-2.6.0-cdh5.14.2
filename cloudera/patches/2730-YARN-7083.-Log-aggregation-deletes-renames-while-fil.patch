From a700c6431a60d69b42183275764eb3dbf3d6fffa Mon Sep 17 00:00:00 2001
From: Junping Du <junping_du@apache.org>
Date: Tue, 29 Aug 2017 13:18:49 -0700
Subject: [PATCH 2730/2748] YARN-7083. Log aggregation deletes/renames while
 file is open. Contributed by Jason Lowe.

(cherry picked from commit 79294b5f329317c30775f8b4dc61440f4b6c24cd)
(cherry picked from commit 12e35f4ef14071b8a0626ba7025dbcd8c23ad2dc)

Conflicts:
	hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java

Change-Id: If0ee0732e77a04d9a0b5370727000fecaaae28bd
(cherry picked from commit 36cce6eef8c1062e8bd8fda37180b895ca9c96e8)
---
 .../logaggregation/AppLogAggregatorImpl.java       |  121 ++++++++++----------
 1 file changed, 60 insertions(+), 61 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java
index 656cb58..6672b28 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java
@@ -242,6 +242,7 @@ private void uploadLogsForContainers(boolean appFinished) {
       }
     }
 
+    boolean uploadedLogsInThisCycle = false;
     try (LogWriter writer = createLogWriter()) {
       try {
         writer.initialize(this.conf, this.remoteNodeTmpLogFileForApp,
@@ -249,14 +250,12 @@ private void uploadLogsForContainers(boolean appFinished) {
         // Write ACLs once when the writer is created.
         writer.writeApplicationACLs(appAcls);
         writer.writeApplicationOwner(this.userUgi.getShortUserName());
-
       } catch (IOException e1) {
         LOG.error("Cannot create writer for app " + this.applicationId
-            + ". Skip log upload this time. ");
+            + ". Skip log upload this time. ", e1);
         return;
       }
 
-      boolean uploadedLogsInThisCycle = false;
       for (ContainerId container : pendingContainerInThisCycle) {
         ContainerLogAggregator aggregator = null;
         if (containerLogAggregators.containsKey(container)) {
@@ -286,70 +285,70 @@ private void uploadLogsForContainers(boolean appFinished) {
       if (uploadedLogsInThisCycle) {
         cleanOldLogs();
       }
+    }
 
-      long currentTime = System.currentTimeMillis();
-      final Path renamedPath = this.rollingMonitorInterval <= 0
-              ? remoteNodeLogFileForApp : new Path(
-                remoteNodeLogFileForApp.getParent(),
-                remoteNodeLogFileForApp.getName() + "_"
-                    + currentTime);
+    long currentTime = System.currentTimeMillis();
+    final Path renamedPath = this.rollingMonitorInterval <= 0
+            ? remoteNodeLogFileForApp : new Path(
+              remoteNodeLogFileForApp.getParent(),
+              remoteNodeLogFileForApp.getName() + "_"
+                  + currentTime);
 
-      String diagnosticMessage = "";
-      boolean logAggregationSucceedInThisCycle = true;
-      final boolean rename = uploadedLogsInThisCycle;
-      try {
-        userUgi.doAs(new PrivilegedExceptionAction<Object>() {
-          @Override
-          public Object run() throws Exception {
-            FileSystem remoteFS = remoteNodeLogFileForApp.getFileSystem(conf);
-            if (remoteFS.exists(remoteNodeTmpLogFileForApp)) {
-              if (rename) {
-                remoteFS.rename(remoteNodeTmpLogFileForApp, renamedPath);
-              } else {
-                remoteFS.delete(remoteNodeTmpLogFileForApp, false);
-              }
+    String diagnosticMessage = "";
+    boolean logAggregationSucceedInThisCycle = true;
+    final boolean rename = uploadedLogsInThisCycle;
+    try {
+      userUgi.doAs(new PrivilegedExceptionAction<Object>() {
+        @Override
+        public Object run() throws Exception {
+          FileSystem remoteFS = remoteNodeLogFileForApp.getFileSystem(conf);
+          if (remoteFS.exists(remoteNodeTmpLogFileForApp)) {
+            if (rename) {
+              remoteFS.rename(remoteNodeTmpLogFileForApp, renamedPath);
+            } else {
+              remoteFS.delete(remoteNodeTmpLogFileForApp, false);
             }
-            return null;
           }
-        });
-        diagnosticMessage =
-            "Log uploaded successfully for Application: " + appId
-                + " in NodeManager: "
-                + LogAggregationUtils.getNodeString(nodeId) + " at "
-                + Times.format(currentTime) + "\n";
-      } catch (Exception e) {
-        LOG.error(
-          "Failed to move temporary log file to final location: ["
-              + remoteNodeTmpLogFileForApp + "] to ["
-              + renamedPath + "]", e);
-        diagnosticMessage =
-            "Log uploaded failed for Application: " + appId
-                + " in NodeManager: "
-                + LogAggregationUtils.getNodeString(nodeId) + " at "
-                + Times.format(currentTime) + "\n";
-        renameTemporaryLogFileFailed = true;
-        logAggregationSucceedInThisCycle = false;
-      }
+          return null;
+        }
+      });
+      diagnosticMessage =
+          "Log uploaded successfully for Application: " + appId
+              + " in NodeManager: "
+              + LogAggregationUtils.getNodeString(nodeId) + " at "
+              + Times.format(currentTime) + "\n";
+    } catch (Exception e) {
+      LOG.error(
+        "Failed to move temporary log file to final location: ["
+            + remoteNodeTmpLogFileForApp + "] to ["
+            + renamedPath + "]", e);
+      diagnosticMessage =
+          "Log uploaded failed for Application: " + appId
+              + " in NodeManager: "
+              + LogAggregationUtils.getNodeString(nodeId) + " at "
+              + Times.format(currentTime) + "\n";
+      renameTemporaryLogFileFailed = true;
+      logAggregationSucceedInThisCycle = false;
+    }
 
-      LogAggregationReport report =
+    LogAggregationReport report =
+        Records.newRecord(LogAggregationReport.class);
+    report.setApplicationId(appId);
+    report.setDiagnosticMessage(diagnosticMessage);
+    report.setLogAggregationStatus(logAggregationSucceedInThisCycle
+        ? LogAggregationStatus.RUNNING
+        : LogAggregationStatus.RUNNING_WITH_FAILURE);
+    this.context.getLogAggregationStatusForApps().add(report);
+    if (appFinished) {
+      // If the app is finished, one extra final report with log aggregation
+      // status SUCCEEDED/FAILED will be sent to RM to inform the RM
+      // that the log aggregation in this NM is completed.
+      LogAggregationReport finalReport =
           Records.newRecord(LogAggregationReport.class);
-      report.setApplicationId(appId);
-      report.setDiagnosticMessage(diagnosticMessage);
-      report.setLogAggregationStatus(logAggregationSucceedInThisCycle
-          ? LogAggregationStatus.RUNNING
-          : LogAggregationStatus.RUNNING_WITH_FAILURE);
-      this.context.getLogAggregationStatusForApps().add(report);
-      if (appFinished) {
-        // If the app is finished, one extra final report with log aggregation
-        // status SUCCEEDED/FAILED will be sent to RM to inform the RM
-        // that the log aggregation in this NM is completed.
-        LogAggregationReport finalReport =
-            Records.newRecord(LogAggregationReport.class);
-        finalReport.setApplicationId(appId);
-        finalReport.setLogAggregationStatus(renameTemporaryLogFileFailed
-            ? LogAggregationStatus.FAILED : LogAggregationStatus.SUCCEEDED);
-        this.context.getLogAggregationStatusForApps().add(finalReport);
-      }
+      finalReport.setApplicationId(appId);
+      finalReport.setLogAggregationStatus(renameTemporaryLogFileFailed
+          ? LogAggregationStatus.FAILED : LogAggregationStatus.SUCCEEDED);
+      this.context.getLogAggregationStatusForApps().add(finalReport);
     }
   }
 
-- 
1.7.9.5

