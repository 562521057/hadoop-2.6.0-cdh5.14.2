From 46e8b762ebecbb0422a669adbc5ca33ff82c9d1b Mon Sep 17 00:00:00 2001
From: Lei Xu <lei@apache.org>
Date: Thu, 12 May 2016 15:42:54 -0700
Subject: [PATCH 1945/2748] HDFS-9389. Add maintenance states to AdminStates.
 (Ming Ma via lei)

(cherry picked from commit a2774debf71b809f9cd9202c0e75a41a8dd191d0)
(cherry picked from commit 782441d47ec43e96be1de898c52cca36d3ee213f)

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelperClient.java
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeInfo.java
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestNameNodeMXBean.java

Change-Id: I2f6ab3e403915308b37688f2fa856edb33975baa
---
 .../apache/hadoop/hdfs/protocol/DatanodeInfo.java  |  137 ++++++++++++++------
 .../apache/hadoop/hdfs/protocolPB/PBHelper.java    |    8 ++
 .../hadoop-hdfs/src/main/proto/hdfs.proto          |    2 +
 .../hdfs/server/namenode/TestNameNodeMXBean.java   |   33 ++++-
 4 files changed, 135 insertions(+), 45 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeInfo.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeInfo.java
index 30b8da7..9aae0b0 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeInfo.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/DatanodeInfo.java
@@ -34,7 +34,7 @@
 
 import static org.apache.hadoop.hdfs.DFSUtil.percent2String;
 
-/** 
+/**
  * This class extends the primary identifier of a Datanode with ephemeral
  * state, eg usage information, current administrative state, and the
  * network location that is communicated to clients.
@@ -53,13 +53,15 @@
   private String location = NetworkTopology.DEFAULT_RACK;
   private String softwareVersion;
   private List<String> dependentHostNames = new LinkedList<String>();
-  
-  
+
+
   // Datanode administrative states
   public enum AdminStates {
-    NORMAL("In Service"), 
-    DECOMMISSION_INPROGRESS("Decommission In Progress"), 
-    DECOMMISSIONED("Decommissioned");
+    NORMAL("In Service"),
+    DECOMMISSION_INPROGRESS("Decommission In Progress"),
+    DECOMMISSIONED("Decommissioned"),
+    ENTERING_MAINTENANCE("Entering Maintenance"),
+    IN_MAINTENANCE("In Maintenance");
 
     final String value;
 
@@ -71,7 +73,7 @@
     public String toString() {
       return value;
     }
-    
+
     public static AdminStates fromValue(final String value) {
       for (AdminStates as : AdminStates.values()) {
         if (as.value.equals(value)) return as;
@@ -106,14 +108,14 @@ public DatanodeInfo(DatanodeID nodeID) {
     this.cacheUsed = 0L;
     this.lastUpdate = 0L;
     this.xceiverCount = 0;
-    this.adminState = null;    
+    this.adminState = null;
   }
-  
+
   public DatanodeInfo(DatanodeID nodeID, String location) {
     this(nodeID);
     this.location = location;
   }
-  
+
   public DatanodeInfo(DatanodeID nodeID, String location,
       final long capacity, final long dfsUsed, final long remaining,
       final long blockPoolUsed, final long cacheCapacity, final long cacheUsed,
@@ -146,16 +148,16 @@ public DatanodeInfo(final String ipAddr, final String hostName,
     this.location = networkLocation;
     this.adminState = adminState;
   }
-  
+
   /** Network location name */
   @Override
   public String getName() {
     return getXferAddr();
   }
-  
+
   /** The raw capacity. */
   public long getCapacity() { return capacity; }
-  
+
   /** The used space by the data node. */
   public long getDfsUsed() { return dfsUsed; }
 
@@ -163,13 +165,13 @@ public String getName() {
   public long getBlockPoolUsed() { return blockPoolUsed; }
 
   /** The used space by the data node. */
-  public long getNonDfsUsed() { 
+  public long getNonDfsUsed() {
     long nonDFSUsed = capacity - dfsUsed - remaining;
     return nonDFSUsed < 0 ? 0 : nonDFSUsed;
   }
 
   /** The used space by the data node as percentage of present capacity */
-  public float getDfsUsedPercent() { 
+  public float getDfsUsedPercent() {
     return DFSUtil.getPercentUsed(dfsUsed, capacity);
   }
 
@@ -180,9 +182,9 @@ public float getDfsUsedPercent() {
   public float getBlockPoolUsedPercent() {
     return DFSUtil.getPercentUsed(blockPoolUsed, capacity);
   }
-  
+
   /** The remaining space as percentage of configured capacity. */
-  public float getRemainingPercent() { 
+  public float getRemainingPercent() {
     return DFSUtil.getPercentRemaining(remaining, capacity);
   }
 
@@ -229,23 +231,23 @@ public float getCacheRemainingPercent() {
   public int getXceiverCount() { return xceiverCount; }
 
   /** Sets raw capacity. */
-  public void setCapacity(long capacity) { 
-    this.capacity = capacity; 
+  public void setCapacity(long capacity) {
+    this.capacity = capacity;
   }
-  
+
   /** Sets the used space for the datanode. */
   public void setDfsUsed(long dfsUsed) {
     this.dfsUsed = dfsUsed;
   }
 
   /** Sets raw free space. */
-  public void setRemaining(long remaining) { 
-    this.remaining = remaining; 
+  public void setRemaining(long remaining) {
+    this.remaining = remaining;
   }
 
   /** Sets block pool used space */
-  public void setBlockPoolUsed(long bpUsed) { 
-    this.blockPoolUsed = bpUsed; 
+  public void setBlockPoolUsed(long bpUsed) {
+    this.blockPoolUsed = bpUsed;
   }
 
   /** Sets cache capacity. */
@@ -259,38 +261,38 @@ public void setCacheUsed(long cacheUsed) {
   }
 
   /** Sets time when this information was accurate. */
-  public void setLastUpdate(long lastUpdate) { 
-    this.lastUpdate = lastUpdate; 
+  public void setLastUpdate(long lastUpdate) {
+    this.lastUpdate = lastUpdate;
   }
 
   /** Sets number of active connections */
-  public void setXceiverCount(int xceiverCount) { 
-    this.xceiverCount = xceiverCount; 
+  public void setXceiverCount(int xceiverCount) {
+    this.xceiverCount = xceiverCount;
   }
 
   /** network location */
   public synchronized String getNetworkLocation() {return location;}
-    
+
   /** Sets the network location */
   public synchronized void setNetworkLocation(String location) {
     this.location = NodeBase.normalize(location);
   }
-  
+
   /** Add a hostname to a list of network dependencies */
   public void addDependentHostName(String hostname) {
     dependentHostNames.add(hostname);
   }
-  
+
   /** List of Network dependencies */
   public List<String> getDependentHostNames() {
     return dependentHostNames;
   }
-  
+
   /** Sets the network dependencies */
   public void setDependentHostNames(List<String> dependencyList) {
     dependentHostNames = dependencyList;
   }
-    
+
   /** A formatted string for reporting the status of the DataNode. */
   public String getDatanodeReport() {
     StringBuilder buffer = new StringBuilder();
@@ -322,6 +324,10 @@ public String getDatanodeReport() {
       buffer.append("Decommissioned\n");
     } else if (isDecommissionInProgress()) {
       buffer.append("Decommission in progress\n");
+    } else if (isInMaintenance()) {
+      buffer.append("In maintenance\n");
+    } else if (isEnteringMaintenance()) {
+      buffer.append("Entering maintenance\n");
     } else {
       buffer.append("Normal\n");
     }
@@ -360,6 +366,10 @@ public String dumpDatanode() {
       buffer.append(" DD");
     } else if (isDecommissionInProgress()) {
       buffer.append(" DP");
+    } else if (isInMaintenance()) {
+      buffer.append(" IM");
+    } else if (isEnteringMaintenance()) {
+      buffer.append(" EM");
     } else {
       buffer.append(" IN");
     }
@@ -413,6 +423,53 @@ public void setDecommissioned() {
   }
 
   /**
+   * Put a node to maintenance mode.
+   */
+  public void startMaintenance() {
+    adminState = AdminStates.ENTERING_MAINTENANCE;
+  }
+
+  /**
+   * Put a node to maintenance mode.
+   */
+  public void setInMaintenance() {
+    adminState = AdminStates.IN_MAINTENANCE;
+  }
+
+  /**
+   * Take the node out of maintenance mode.
+   */
+  public void stopMaintenance() {
+    adminState = null;
+  }
+
+  /**
+   * Returns true if the node is is entering_maintenance
+   */
+  public boolean isEnteringMaintenance() {
+    return adminState == AdminStates.ENTERING_MAINTENANCE;
+  }
+
+  /**
+   * Returns true if the node is in maintenance
+   */
+  public boolean isInMaintenance() {
+    return adminState == AdminStates.IN_MAINTENANCE;
+  }
+
+  /**
+   * Returns true if the node is entering or in maintenance
+   */
+  public boolean isMaintenance() {
+    return (adminState == AdminStates.ENTERING_MAINTENANCE ||
+        adminState == AdminStates.IN_MAINTENANCE);
+  }
+
+  public boolean isInService() {
+    return getAdminState() == AdminStates.NORMAL;
+  }
+
+  /**
    * Retrieves the admin state of this node.
    */
   public AdminStates getAdminState() {
@@ -421,14 +478,14 @@ public AdminStates getAdminState() {
     }
     return adminState;
   }
- 
+
   /**
-   * Check if the datanode is in stale state. Here if 
-   * the namenode has not received heartbeat msg from a 
+   * Check if the datanode is in stale state. Here if
+   * the namenode has not received heartbeat msg from a
    * datanode for more than staleInterval (default value is
    * {@link DFSConfigKeys#DFS_NAMENODE_STALE_DATANODE_INTERVAL_DEFAULT}),
    * the datanode will be treated as stale node.
-   * 
+   *
    * @param staleInterval
    *          the time interval for marking the node as stale. If the last
    *          update time is beyond the given time interval, the node will be
@@ -438,7 +495,7 @@ public AdminStates getAdminState() {
   public boolean isStale(long staleInterval) {
     return (Time.now() - lastUpdate) >= staleInterval;
   }
-  
+
   /**
    * Sets the admin state of this node.
    */
@@ -459,7 +516,7 @@ protected void setAdminState(AdminStates newState) {
   public Node getParent() { return parent; }
   @Override
   public void setParent(Node parent) {this.parent = parent;}
-   
+
   /** Return this node's level in the tree.
    * E.g. the root of a tree returns 0 and its children return 1
    */
@@ -473,7 +530,7 @@ public int hashCode() {
     // Super implementation is sufficient
     return super.hashCode();
   }
-  
+
   @Override
   public boolean equals(Object obj) {
     // Sufficient to use super equality as datanodes are uniquely identified
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java
index 3dcc296..3b0aee9 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/PBHelper.java
@@ -632,6 +632,10 @@ public static RecoveringBlock convert(RecoveringBlockProto b) {
     case DECOMMISSION_INPROGRESS: 
         return DatanodeInfoProto.AdminState.DECOMMISSION_INPROGRESS;
     case DECOMMISSIONED: return DatanodeInfoProto.AdminState.DECOMMISSIONED;
+    case ENTERING_MAINTENANCE:
+        return DatanodeInfoProto.AdminState.ENTERING_MAINTENANCE;
+    case IN_MAINTENANCE:
+        return DatanodeInfoProto.AdminState.IN_MAINTENANCE;
     default: return DatanodeInfoProto.AdminState.NORMAL;
     }
   }
@@ -752,6 +756,10 @@ public static AdminStates convert(AdminState adminState) {
       return AdminStates.DECOMMISSION_INPROGRESS;
     case DECOMMISSIONED:
       return AdminStates.DECOMMISSIONED;
+    case ENTERING_MAINTENANCE:
+      return AdminStates.ENTERING_MAINTENANCE;
+    case IN_MAINTENANCE:
+      return AdminStates.IN_MAINTENANCE;
     case NORMAL:
     default:
       return AdminStates.NORMAL;
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/proto/hdfs.proto b/hadoop-hdfs-project/hadoop-hdfs/src/main/proto/hdfs.proto
index 20ab299..8a70c51 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/proto/hdfs.proto
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/proto/hdfs.proto
@@ -92,6 +92,8 @@ message DatanodeInfoProto {
     NORMAL = 0;
     DECOMMISSION_INPROGRESS = 1;
     DECOMMISSIONED = 2;
+    ENTERING_MAINTENANCE = 3;
+    IN_MAINTENANCE = 4;
   }
 
   optional AdminState adminState = 10 [default = NORMAL];
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestNameNodeMXBean.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestNameNodeMXBean.java
index c33753f..6f75eab 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestNameNodeMXBean.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestNameNodeMXBean.java
@@ -38,6 +38,11 @@
 import org.apache.hadoop.hdfs.DFSConfigKeys;
 import org.apache.hadoop.hdfs.DFSTestUtil;
 import org.apache.hadoop.hdfs.MiniDFSCluster;
+import org.apache.hadoop.hdfs.MiniDFSNNTopology;
+import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants.SafeModeAction;
+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor;
+import org.apache.hadoop.hdfs.server.blockmanagement.DatanodeManager;
 import org.apache.hadoop.hdfs.server.datanode.DataNode;
 import org.apache.hadoop.hdfs.server.namenode.top.TopConf;
 import org.apache.hadoop.io.nativeio.NativeIO;
@@ -51,6 +56,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 /**
@@ -82,6 +88,14 @@ public void testNameNodeMXBeanInfo() throws Exception {
       cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
       cluster.waitActive();
 
+      // Put the DN to maintenance state.
+      DatanodeManager dm = cluster.getNameNode().getNamesystem().
+              getBlockManager().getDatanodeManager();
+      DatanodeDescriptor maintenanceNode = dm.getDatanode(
+          cluster.getDataNodes().get(1).getDatanodeId());
+      maintenanceNode.setInMaintenance();
+      String dnXferAddrInMaintenance = maintenanceNode.getXferAddr();
+
       FSNamesystem fsn = cluster.getNameNode().namesystem;
 
       MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
@@ -155,6 +169,11 @@ public void testNameNodeMXBeanInfo() throws Exception {
         assertTrue(((Long)liveNode.get("capacity")) > 0);
         assertTrue(liveNode.containsKey("numBlocks"));
         assertTrue(((Long)liveNode.get("numBlocks")) == 0);
+        // "adminState" is set to maintenance only for the specific dn.
+        String xferAddr = (String)liveNode.get("xferaddr");
+        boolean inMaintenance = liveNode.get("adminState").equals(
+            DatanodeInfo.AdminStates.IN_MAINTENANCE.toString());
+        assertFalse(xferAddr.equals(dnXferAddrInMaintenance) ^ inMaintenance);
       }
       assertEquals(fsn.getLiveNodes(), alivenodeinfo);
       // get attribute deadnodeinfo
@@ -177,7 +196,8 @@ public void testNameNodeMXBeanInfo() throws Exception {
       // get attribute NameJournalStatus
       String nameJournalStatus = (String) (mbs.getAttribute(mxbeanName,
           "NameJournalStatus"));
-      assertEquals("Bad value for NameJournalStatus", fsn.getNameJournalStatus(), nameJournalStatus);
+      assertEquals("Bad value for NameJournalStatus",
+          fsn.getNameJournalStatus(), nameJournalStatus);
       // get attribute JournalTransactionInfo
       String journalTxnInfo = (String) mbs.getAttribute(mxbeanName,
           "JournalTransactionInfo");
@@ -188,11 +208,13 @@ public void testNameNodeMXBeanInfo() throws Exception {
       assertEquals("Bad value for NNStarted", fsn.getNNStarted(), nnStarted);
       // get attribute "CompileInfo"
       String compileInfo = (String) mbs.getAttribute(mxbeanName, "CompileInfo");
-      assertEquals("Bad value for CompileInfo", fsn.getCompileInfo(), compileInfo);
+      assertEquals("Bad value for CompileInfo", fsn.getCompileInfo(),
+          compileInfo);
       // get attribute CorruptFiles
       String corruptFiles = (String) (mbs.getAttribute(mxbeanName,
           "CorruptFiles"));
-      assertEquals("Bad value for CorruptFiles", fsn.getCorruptFiles(), corruptFiles);
+      assertEquals("Bad value for CorruptFiles", fsn.getCorruptFiles(),
+          corruptFiles);
       // get attribute NameDirStatuses
       String nameDirStatuses = (String) (mbs.getAttribute(mxbeanName,
           "NameDirStatuses"));
@@ -204,11 +226,12 @@ public void testNameNodeMXBeanInfo() throws Exception {
         File nameDir = new File(nameDirUri);
         System.out.println("Checking for the presence of " + nameDir +
             " in active name dirs.");
-        assertTrue(statusMap.get("active").containsKey(nameDir.getAbsolutePath()));
+        assertTrue(statusMap.get("active").containsKey(
+            nameDir.getAbsolutePath()));
       }
       assertEquals(2, statusMap.get("active").size());
       assertEquals(0, statusMap.get("failed").size());
-      
+
       // This will cause the first dir to fail.
       File failedNameDir = new File(nameDirUris.iterator().next());
       assertEquals(0, FileUtil.chmod(
-- 
1.7.9.5

