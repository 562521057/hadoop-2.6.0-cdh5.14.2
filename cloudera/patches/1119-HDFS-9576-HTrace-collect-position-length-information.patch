From bd9cc1dbe72a1e17d2222217b843d7ac1512f216 Mon Sep 17 00:00:00 2001
From: Zhe Zhang <zhz@apache.org>
Date: Thu, 21 Jan 2016 15:57:03 -0800
Subject: [PATCH 1119/2748] HDFS-9576: HTrace: collect position/length
 information on read operations (zhz via cmccabe)

(cherry picked from commit 7905788db94d560e6668af0d4bed22b326961aaf)

Change-Id: Ib2f0885c67fe0bab95ac485634e5761716c015f1
---
 .../java/org/apache/hadoop/hdfs/DFSClient.java     |   19 +++++++++++++
 .../org/apache/hadoop/hdfs/DFSInputStream.java     |   28 +++++++++++++++-----
 2 files changed, 41 insertions(+), 6 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
index 4e4df19..9782b24 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
@@ -3629,6 +3629,25 @@ TraceScope newSrcDstTraceScope(String description, String src, String dst) {
     return scope;
   }
 
+  /**
+   * Full detailed tracing for read requests: path, position in the file,
+   * and length.
+   *
+   * @param reqLen requested length
+   */
+  TraceScope newReaderTraceScope(String description, String path, long pos,
+      int reqLen) {
+    TraceScope scope = newPathTraceScope(description, path);
+    scope.addKVAnnotation("pos", Long.toString(pos));
+    scope.addKVAnnotation("reqLen", Integer.toString(reqLen));
+    return scope;
+  }
+
+  /** Add the returned length info to the scope. */
+  void addRetLenToReaderScope(TraceScope scope, int retLen) {
+    scope.addKVAnnotation("retLen", Integer.toString(retLen));
+  }
+
   Tracer getTracer() {
     return tracer;
   }
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java
index 7135d46..33c706e 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java
@@ -898,9 +898,14 @@ private synchronized int readWithStrategy(ReaderStrategy strategy, int off, int
   public synchronized int read(final byte buf[], int off, int len) throws IOException {
     ReaderStrategy byteArrayReader = new ByteArrayStrategy(buf);
     TraceScope scope =
-        dfsClient.newPathTraceScope("DFSInputStream#byteArrayRead", src);
+        dfsClient.newReaderTraceScope("DFSInputStream#byteArrayRead", src,
+            getPos(), len);
     try {
-      return readWithStrategy(byteArrayReader, off, len);
+      int retLen = readWithStrategy(byteArrayReader, off, len);
+      if (retLen < len) {
+        dfsClient.addRetLenToReaderScope(scope, retLen);
+      }
+      return retLen;
     } finally {
       scope.close();
     }
@@ -909,10 +914,16 @@ public synchronized int read(final byte buf[], int off, int len) throws IOExcept
   @Override
   public synchronized int read(final ByteBuffer buf) throws IOException {
     ReaderStrategy byteBufferReader = new ByteBufferStrategy(buf);
+    int reqLen = buf.remaining();
     TraceScope scope =
-        dfsClient.newPathTraceScope("DFSInputStream#byteBufferRead", src);
+        dfsClient.newReaderTraceScope("DFSInputStream#byteBufferRead", src,
+            getPos(), reqLen);
     try {
-      return readWithStrategy(byteBufferReader, 0, buf.remaining());
+      int retLen = readWithStrategy(byteBufferReader, 0, reqLen);
+      if (retLen < reqLen) {
+        dfsClient.addRetLenToReaderScope(scope, retLen);
+      }
+      return retLen;
     } finally {
       scope.close();
     }
@@ -1377,9 +1388,14 @@ private static boolean tokenRefetchNeeded(IOException ex,
   public int read(long position, byte[] buffer, int offset, int length)
       throws IOException {
     TraceScope scope = dfsClient.
-        newPathTraceScope("DFSInputStream#byteArrayPread", src);
+        newReaderTraceScope("DFSInputStream#byteArrayPread", src,
+            position, length);
     try {
-      return pread(position, buffer, offset, length);
+      int retLen = pread(position, buffer, offset, length);
+      if (retLen < length) {
+        dfsClient.addRetLenToReaderScope(scope, retLen);
+      }
+      return retLen;
     } finally {
       scope.close();
     }
-- 
1.7.9.5

