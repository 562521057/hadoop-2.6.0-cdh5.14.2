From 4e1e1aec710469acd68ac6b01a9b9228ee85e961 Mon Sep 17 00:00:00 2001
From: Xiao Chen <xiao@apache.org>
Date: Wed, 17 Aug 2016 15:22:42 -0700
Subject: [PATCH 1780/2748] HDFS-10549. Correctly revoke file leases when
 closing files. Contributed by Yiqun Lin.

(cherry picked from commit 85aacaadb5a3f8c78b191867c0bde09b3c4b3c3c)

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSStripedOutputStream.java

(cherry picked from commit a20b943cf951cf38eb4950177c826bbcf424aade)
(cherry picked from commit b89d79ca1daf390ceb48ed9ce35d801539ae3e77)

Conflicts:
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
	hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java
	hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDistributedFileSystem.java

Change-Id: Ibcdfc6ce48c9ec2e21d991e47a88dee6647a18cb
---
 .../org/apache/hadoop/hdfs/DFSOutputStream.java    |   31 ++++++++++++++++--
 .../hadoop/hdfs/TestDistributedFileSystem.java     |   34 ++++++++++++++++++++
 2 files changed, 62 insertions(+), 3 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java
index 2c80bef..576c794 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java
@@ -86,6 +86,7 @@
 import org.apache.hadoop.hdfs.util.ByteArrayManager;
 import org.apache.hadoop.io.EnumSetWritable;
 import org.apache.hadoop.io.IOUtils;
+import org.apache.hadoop.io.MultipleIOException;
 import org.apache.hadoop.ipc.RemoteException;
 import org.apache.hadoop.net.NetUtils;
 import org.apache.hadoop.security.AccessControlException;
@@ -2465,15 +2466,28 @@ private synchronized void start() {
    * resources associated with this stream.
    */
   void abort() throws IOException {
+    final List<IOException> ioes = new LinkedList<>();
     synchronized (this) {
       if (isClosed()) {
         return;
       }
       streamer.setLastException(new IOException("Lease timeout of "
           + (dfsClient.getHdfsTimeout() / 1000) + " seconds expired."));
-      closeThreads(true);
+      try {
+        closeThreads(true);
+      } catch (IOException e) {
+        ioes.add(e);
+      }
+    }
+    try {
+      dfsClient.endFileLease(fileId);
+    } catch (IOException e) {
+      ioes.add(e);
+    }
+    final IOException ioe = MultipleIOException.createIOException(ioes);
+    if (ioe != null) {
+      throw ioe;
     }
-    dfsClient.endFileLease(fileId);
   }
 
   boolean isClosed() {
@@ -2519,16 +2533,27 @@ private void closeThreads(boolean force) throws IOException {
    */
   @Override
   public void close() throws IOException {
+    final List<IOException> ioes = new LinkedList<>();
     synchronized (this) {
       TraceScope scope = dfsClient.newPathTraceScope("DFSOutputStream#close",
           src);
       try {
         closeImpl();
+      } catch (IOException e) {
+        ioes.add(e);
       } finally {
         scope.close();
       }
     }
-    dfsClient.endFileLease(fileId);
+    try {
+      dfsClient.endFileLease(fileId);
+    } catch (IOException e) {
+      ioes.add(e);
+    }
+    final IOException ioe = MultipleIOException.createIOException(ioes);
+    if (ioe != null) {
+      throw ioe;
+    }
   }
 
   private synchronized void closeImpl() throws IOException {
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDistributedFileSystem.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDistributedFileSystem.java
index 70e6339..1f6a6e6 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDistributedFileSystem.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDistributedFileSystem.java
@@ -1140,4 +1140,38 @@ public void testGetServerDefaults() throws IOException {
       cluster.shutdown();
     }
   }
+
+  @Test
+  public void testDFSCloseFilesBeingWritten() throws Exception {
+    Configuration conf = getTestConfiguration();
+    MiniDFSCluster cluster = null;
+    try {
+      cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
+      DistributedFileSystem fileSys = cluster.getFileSystem();
+
+      // Create one file then delete it to trigger the FileNotFoundException
+      // when closing the file.
+      fileSys.create(new Path("/test/dfsclose/file-0"));
+      fileSys.delete(new Path("/test/dfsclose/file-0"), true);
+
+      DFSClient dfsClient = fileSys.getClient();
+      // Construct a new dfsClient to get the same LeaseRenewer instance,
+      // to avoid the original client being added to the leaseRenewer again.
+      DFSClient newDfsClient =
+          new DFSClient(cluster.getFileSystem(0).getUri(), conf);
+      LeaseRenewer leaseRenewer = newDfsClient.getLeaseRenewer();
+
+      dfsClient.closeAllFilesBeingWritten(false);
+      // Remove new dfsClient in leaseRenewer
+      leaseRenewer.closeClient(newDfsClient);
+
+      // The list of clients corresponding to this renewer should be empty
+      assertEquals(true, leaseRenewer.isEmpty());
+      assertEquals(true, dfsClient.isFilesBeingWrittenEmpty());
+    } finally {
+      if (cluster != null) {
+        cluster.shutdown();
+      }
+    }
+  }
 }
-- 
1.7.9.5

