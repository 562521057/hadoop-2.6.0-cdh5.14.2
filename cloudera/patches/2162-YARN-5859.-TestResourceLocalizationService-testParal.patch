From c208322f741134792b3aeb19068ab6ac1d63373a Mon Sep 17 00:00:00 2001
From: Jason Lowe <jlowe@apache.org>
Date: Mon, 21 Nov 2016 16:36:08 +0000
Subject: [PATCH 2162/2748] YARN-5859.
 TestResourceLocalizationService#testParallelDownloadAttemptsForPublicResource
 sometimes fails. Contributed by Eric Badger

(cherry picked from commit 009452bb6dbe5dffb0b304d67a2f360fe0eee1e2)

Change-Id: I7ac066b28fcabf0a9171e9cc262914407764b5e0
---
 .../localizer/TestResourceLocalizationService.java |   18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/TestResourceLocalizationService.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/TestResourceLocalizationService.java
index e90fc83..c1f2950 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/TestResourceLocalizationService.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/TestResourceLocalizationService.java
@@ -1775,7 +1775,7 @@ public void testParallelDownloadAttemptsForPrivateResource() throws Exception {
         createContainerLocalizationEvent(container1,
           LocalResourceVisibility.PRIVATE, req));
       Assert
-        .assertTrue(waitForPrivateDownloadToStart(rls, localizerId1, 1, 200));
+        .assertTrue(waitForPrivateDownloadToStart(rls, localizerId1, 1, 5000));
 
       // Container - 2 now makes the request.
       ContainerImpl container2 = createMockContainer(user, 2);
@@ -1789,7 +1789,7 @@ public void testParallelDownloadAttemptsForPrivateResource() throws Exception {
         createContainerLocalizationEvent(container2,
           LocalResourceVisibility.PRIVATE, req));
       Assert
-        .assertTrue(waitForPrivateDownloadToStart(rls, localizerId2, 1, 200));
+        .assertTrue(waitForPrivateDownloadToStart(rls, localizerId2, 1, 5000));
 
       // Retrieving localized resource.
       LocalResourcesTracker tracker =
@@ -1831,7 +1831,7 @@ public void testParallelDownloadAttemptsForPrivateResource() throws Exception {
       Assert
         .assertTrue(waitForResourceState(lr, rls, req,
           LocalResourceVisibility.PRIVATE, user, appId, ResourceState.FAILED,
-          200));
+          5000));
       Assert.assertTrue(lr.getState().equals(ResourceState.FAILED));
       Assert.assertEquals(0, localizerRunner1.scheduled.size());
 
@@ -1947,7 +1947,7 @@ public void testLocalResourcePath() throws Exception {
       // Now waiting for resource download to start. Here actual will not start
       // Only the resources will be populated into pending list.
       Assert
-        .assertTrue(waitForPrivateDownloadToStart(rls, localizerId1, 2, 500));
+        .assertTrue(waitForPrivateDownloadToStart(rls, localizerId1, 2, 5000));
 
       // Validating user and application cache paths
 
@@ -2097,10 +2097,10 @@ public void testParallelDownloadAttemptsForPublicResource() throws Exception {
       // Waiting for resource to change into DOWNLOADING state.
       Assert.assertTrue(waitForResourceState(null, spyService, req,
         LocalResourceVisibility.PUBLIC, user, null, ResourceState.DOWNLOADING,
-        200));
+        5000));
 
       // Waiting for download to start.
-      Assert.assertTrue(waitForPublicDownloadToStart(spyService, 1, 200));
+      Assert.assertTrue(waitForPublicDownloadToStart(spyService, 1, 5000));
 
       LocalizedResource lr =
           getLocalizedResource(spyService, req, LocalResourceVisibility.PUBLIC,
@@ -2123,7 +2123,7 @@ public void testParallelDownloadAttemptsForPublicResource() throws Exception {
 
       // Waiting for download to start. This should return false as new download
       // will not start
-      Assert.assertFalse(waitForPublicDownloadToStart(spyService, 2, 100));
+      Assert.assertFalse(waitForPublicDownloadToStart(spyService, 2, 5000));
 
       // Now Failing the resource download. As a part of it
       // resource state is changed and then lock is released.
@@ -2135,7 +2135,7 @@ public void testParallelDownloadAttemptsForPublicResource() throws Exception {
 
       // Waiting for resource to change into FAILED state.
       Assert.assertTrue(waitForResourceState(lr, spyService, req,
-        LocalResourceVisibility.PUBLIC, user, null, ResourceState.FAILED, 200));
+        LocalResourceVisibility.PUBLIC, user, null, ResourceState.FAILED, 5000));
       // releasing lock as a part of download failed process.
       lr.unlock();
       // removing pending download request.
@@ -2151,7 +2151,7 @@ public void testParallelDownloadAttemptsForPublicResource() throws Exception {
       dispatcher1.getEventHandler().handle(localizerEvent);
       // Waiting for download to start. This should return false as new download
       // will not start
-      Assert.assertFalse(waitForPublicDownloadToStart(spyService, 1, 100));
+      Assert.assertFalse(waitForPublicDownloadToStart(spyService, 1, 5000));
       // Checking available permits now.
       Assert.assertEquals(1, lr.sem.availablePermits());
 
-- 
1.7.9.5

