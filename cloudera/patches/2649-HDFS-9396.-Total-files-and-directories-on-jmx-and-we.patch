From 4a88a4c498ac24aa362e99147e77027d3eb01450 Mon Sep 17 00:00:00 2001
From: Xiao Chen <xiao@cloudera.com>
Date: Mon, 2 Oct 2017 19:22:23 -0700
Subject: [PATCH 2649/2748] HDFS-9396. Total files and directories on jmx and
 web UI on standby is uninitialized. Contributed
 by Kihwal Lee. (cherry picked from commit
 a2a104f3d30182953db6690304146f0a582ed241)

(cherry picked from commit 8726a5e02004bc5c7e30acb39982c23b09eaec10)

 Conflicts:
	hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java

Change-Id: If9c8e29f220e5709d93ec86a506af3cac6c89db1
---
 .../hadoop/hdfs/server/namenode/FSDirectory.java   |    8 +--
 .../hdfs/server/namenode/ha/TestHAMetrics.java     |   56 ++++++++++++++++++++
 2 files changed, 57 insertions(+), 7 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java
index 6781097..8bfbe41 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java
@@ -2598,13 +2598,7 @@ INodeDirectory setQuota(String src, long nsQuota, long dsQuota)
   }
   
   long totalInodes() {
-    readLock();
-    try {
-      return rootDir.getDirectoryWithQuotaFeature().getSpaceConsumed()
-          .get(Quota.NAMESPACE);
-    } finally {
-      readUnlock();
-    }
+    return getInodeMapSize();
   }
 
   /**
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestHAMetrics.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestHAMetrics.java
index 6f9fc6e..432f7df 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestHAMetrics.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestHAMetrics.java
@@ -24,8 +24,10 @@
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hdfs.DFSConfigKeys;
 import org.apache.hadoop.hdfs.DFSTestUtil;
+import org.apache.hadoop.hdfs.DistributedFileSystem;
 import org.apache.hadoop.hdfs.MiniDFSCluster;
 import org.apache.hadoop.hdfs.MiniDFSNNTopology;
+import org.apache.hadoop.hdfs.protocol.HdfsConstants.SafeModeAction;
 import org.apache.hadoop.hdfs.server.namenode.FSNamesystem;
 import org.apache.hadoop.io.IOUtils;
 import org.junit.Test;
@@ -119,4 +121,58 @@ public void testHAMetrics() throws Exception {
       cluster.shutdown();
     }
   }
+
+  @Test
+  public void testHAInodeCount() throws Exception {
+    Configuration conf = new Configuration();
+    conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY, 1);
+    conf.setInt(DFSConfigKeys.DFS_HA_LOGROLL_PERIOD_KEY, Integer.MAX_VALUE);
+
+    MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf)
+        .nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(1)
+        .build();
+    FileSystem fs = null;
+    try {
+      cluster.waitActive();
+
+      FSNamesystem nn0 = cluster.getNamesystem(0);
+      FSNamesystem nn1 = cluster.getNamesystem(1);
+
+      cluster.transitionToActive(0);
+      fs = HATestUtil.configureFailoverFs(cluster, conf);
+      DFSTestUtil.createFile(fs, new Path("/testHAInodeCount1"),
+          10, (short)1, 1L);
+      DFSTestUtil.createFile(fs, new Path("/testHAInodeCount2"),
+          10, (short)1, 1L);
+      DFSTestUtil.createFile(fs, new Path("/testHAInodeCount3"),
+          10, (short)1, 1L);
+      DFSTestUtil.createFile(fs, new Path("/testHAInodeCount4"),
+          10, (short)1, 1L);
+
+      // 1 dir and 4 files
+      assertEquals(5, nn0.getFilesTotal());
+      // The SBN still has one dir, which is "/".
+      assertEquals(1, nn1.getFilesTotal());
+
+      // Save fsimage so that nn does not build up namesystem by replaying
+      // edits, but load from the image.
+      ((DistributedFileSystem)fs).setSafeMode(SafeModeAction.SAFEMODE_ENTER);
+      ((DistributedFileSystem)fs).saveNamespace();
+
+      // Flip the two namenodes and restart the standby, which will load
+      // the fsimage.
+      cluster.transitionToStandby(0);
+      cluster.transitionToActive(1);
+      cluster.restartNameNode(0);
+      assertEquals(nn0.getHAState(), "standby");
+
+      // The restarted standby should report the correct count
+      nn0 = cluster.getNamesystem(0);
+      assertEquals(5, nn0.getFilesTotal());
+    } finally {
+      IOUtils.cleanup(LOG, fs);
+      cluster.shutdown();
+    }
+
+  }
 }
-- 
1.7.9.5

