From 53eaa506b6ed11f9977363da9a4e07dba45a7484 Mon Sep 17 00:00:00 2001
From: Daniel Templeton <daniel@cloudera.com>
Date: Mon, 11 Jul 2016 18:30:26 -0700
Subject: [PATCH 1662/2748] =?UTF-8?q?Revert=20"YARN-4209.=20RMStateStore=20F?=
 =?UTF-8?q?ENCED=20state=20doesn=E2=80=99t=20work=20due=20to=20updateFencedS?=
 =?UTF-8?q?tate=20called=20by=20stateMachine.doTransition.=20(Zhihai=20Xu=20?=
 =?UTF-8?q?via=20rohithsharmaks)"?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This reverts commit b5b66bfde4809a3af80a7efcf42124b371e574ba.

Change-Id: I698efc3d1ef34bab0103e8870bca1cac83ec5054
(cherry picked from commit 9c8e8bfbf10570cdd8176bdc671523021d55a18d)
(cherry picked from commit 9f2349d035e17ab790b28216e6e6e50b99acd56b)
---
 .../resourcemanager/recovery/RMStateStore.java     |  228 +++++++-------------
 .../recovery/TestMemoryRMStateStore.java           |   65 ------
 2 files changed, 77 insertions(+), 216 deletions(-)
 delete mode 100644 hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestMemoryRMStateStore.java

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
index 1f5f753..54bf93c 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
@@ -65,7 +65,7 @@
 import org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt.RMAppAttemptEvent;
 import org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt.RMAppAttemptEventType;
 import org.apache.hadoop.yarn.state.InvalidStateTransitonException;
-import org.apache.hadoop.yarn.state.MultipleArcTransition;
+import org.apache.hadoop.yarn.state.SingleArcTransition;
 import org.apache.hadoop.yarn.state.StateMachine;
 import org.apache.hadoop.yarn.state.StateMachineFactory;
 
@@ -96,10 +96,7 @@
 
   public static final Log LOG = LogFactory.getLog(RMStateStore.class);
 
-  /**
-   * The enum defines state of RMStateStore.
-   */
-  public enum RMStateStoreState {
+  private enum RMStateStoreState {
     ACTIVE,
     FENCED
   };
@@ -113,47 +110,16 @@
                                                     RMStateStoreEventType,
                                                     RMStateStoreEvent>(
       RMStateStoreState.ACTIVE)
-      .addTransition(RMStateStoreState.ACTIVE,
-          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
           RMStateStoreEventType.STORE_APP, new StoreAppTransition())
-      .addTransition(RMStateStoreState.ACTIVE,
-          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
           RMStateStoreEventType.UPDATE_APP, new UpdateAppTransition())
-      .addTransition(RMStateStoreState.ACTIVE,
-          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
           RMStateStoreEventType.REMOVE_APP, new RemoveAppTransition())
-      .addTransition(RMStateStoreState.ACTIVE,
-          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-          RMStateStoreEventType.STORE_APP_ATTEMPT,
-          new StoreAppAttemptTransition())
-      .addTransition(RMStateStoreState.ACTIVE,
-          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-          RMStateStoreEventType.UPDATE_APP_ATTEMPT,
-          new UpdateAppAttemptTransition())
-      .addTransition(RMStateStoreState.ACTIVE,
-          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-          RMStateStoreEventType.STORE_MASTERKEY,
-          new StoreRMDTMasterKeyTransition())
-      .addTransition(RMStateStoreState.ACTIVE,
-          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-          RMStateStoreEventType.REMOVE_MASTERKEY,
-          new RemoveRMDTMasterKeyTransition())
-      .addTransition(RMStateStoreState.ACTIVE,
-          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-          RMStateStoreEventType.STORE_DELEGATION_TOKEN,
-          new StoreRMDTTransition())
-      .addTransition(RMStateStoreState.ACTIVE,
-          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-          RMStateStoreEventType.REMOVE_DELEGATION_TOKEN,
-          new RemoveRMDTTransition())
-      .addTransition(RMStateStoreState.ACTIVE,
-          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-          RMStateStoreEventType.UPDATE_DELEGATION_TOKEN,
-          new UpdateRMDTTransition())
-      .addTransition(RMStateStoreState.ACTIVE,
-          EnumSet.of(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED),
-          RMStateStoreEventType.UPDATE_AMRM_TOKEN,
-          new StoreOrUpdateAMRMTokenTransition())
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          RMStateStoreEventType.STORE_APP_ATTEMPT, new StoreAppAttemptTransition())
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          RMStateStoreEventType.UPDATE_APP_ATTEMPT, new UpdateAppAttemptTransition())
       .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.FENCED,
           RMStateStoreEventType.FENCED)
       .addTransition(RMStateStoreState.FENCED, RMStateStoreState.FENCED,
@@ -163,24 +129,39 @@
           RMStateStoreEventType.REMOVE_APP,
           RMStateStoreEventType.STORE_APP_ATTEMPT,
           RMStateStoreEventType.UPDATE_APP_ATTEMPT,
-          RMStateStoreEventType.FENCED));
+          RMStateStoreEventType.FENCED))
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          RMStateStoreEventType.STORE_MASTERKEY,
+              new StoreRMDTMasterKeyTransition())
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          RMStateStoreEventType.REMOVE_MASTERKEY,
+              new RemoveRMDTMasterKeyTransition())
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          RMStateStoreEventType.STORE_DELEGATION_TOKEN,
+              new StoreRMDTTransition())
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          RMStateStoreEventType.REMOVE_DELEGATION_TOKEN,
+              new RemoveRMDTTransition())
+      .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+          RMStateStoreEventType.UPDATE_DELEGATION_TOKEN,
+              new UpdateRMDTTransition())
+       .addTransition(RMStateStoreState.ACTIVE, RMStateStoreState.ACTIVE,
+           RMStateStoreEventType.UPDATE_AMRM_TOKEN,
+              new StoreOrUpdateAMRMTokenTransition());
 
   private final StateMachine<RMStateStoreState,
                              RMStateStoreEventType,
                              RMStateStoreEvent> stateMachine;
 
   private static class StoreAppTransition
-      implements MultipleArcTransition<RMStateStore, RMStateStoreEvent,
-          RMStateStoreState> {
+      implements SingleArcTransition<RMStateStore, RMStateStoreEvent> {
     @Override
-    public RMStateStoreState transition(RMStateStore store,
-        RMStateStoreEvent event) {
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
       if (!(event instanceof RMStateStoreAppEvent)) {
         // should never happen
         LOG.error("Illegal event type: " + event.getClass());
-        return RMStateStoreState.ACTIVE;
+        return;
       }
-      boolean isFenced = false;
       ApplicationStateData appState =
           ((RMStateStoreAppEvent) event).getAppState();
       ApplicationId appId =
@@ -192,24 +173,20 @@ public RMStateStoreState transition(RMStateStore store,
                RMAppEventType.APP_NEW_SAVED));
       } catch (Exception e) {
         LOG.error("Error storing app: " + appId, e);
-        isFenced = store.notifyStoreOperationFailedInternal(e);
+        store.notifyStoreOperationFailed(e);
       }
-      return finalState(isFenced);
     };
   }
 
   private static class UpdateAppTransition implements
-      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
-          RMStateStoreState> {
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
     @Override
-    public RMStateStoreState transition(RMStateStore store,
-        RMStateStoreEvent event) {
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
       if (!(event instanceof RMStateUpdateAppEvent)) {
         // should never happen
         LOG.error("Illegal event type: " + event.getClass());
-        return RMStateStoreState.ACTIVE;
+        return;
       }
-      boolean isFenced = false;
       ApplicationStateData appState =
           ((RMStateUpdateAppEvent) event).getAppState();
       ApplicationId appId =
@@ -218,27 +195,23 @@ public RMStateStoreState transition(RMStateStore store,
       try {
         store.updateApplicationStateInternal(appId, appState);
         store.notifyApplication(new RMAppEvent(appId,
-            RMAppEventType.APP_UPDATE_SAVED));
+               RMAppEventType.APP_UPDATE_SAVED));
       } catch (Exception e) {
         LOG.error("Error updating app: " + appId, e);
-        isFenced = store.notifyStoreOperationFailedInternal(e);
+        store.notifyStoreOperationFailed(e);
       }
-      return finalState(isFenced);
     };
   }
 
   private static class RemoveAppTransition implements
-      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
-          RMStateStoreState> {
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
     @Override
-    public RMStateStoreState transition(RMStateStore store,
-        RMStateStoreEvent event) {
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
       if (!(event instanceof RMStateStoreRemoveAppEvent)) {
         // should never happen
         LOG.error("Illegal event type: " + event.getClass());
-        return RMStateStoreState.ACTIVE;
+        return;
       }
-      boolean isFenced = false;
       ApplicationStateData appState =
           ((RMStateStoreRemoveAppEvent) event).getAppState();
       ApplicationId appId =
@@ -248,24 +221,20 @@ public RMStateStoreState transition(RMStateStore store,
         store.removeApplicationStateInternal(appState);
       } catch (Exception e) {
         LOG.error("Error removing app: " + appId, e);
-        isFenced = store.notifyStoreOperationFailedInternal(e);
+        store.notifyStoreOperationFailed(e);
       }
-      return finalState(isFenced);
     };
   }
 
   private static class StoreAppAttemptTransition implements
-      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
-          RMStateStoreState> {
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
     @Override
-    public RMStateStoreState transition(RMStateStore store,
-        RMStateStoreEvent event) {
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
       if (!(event instanceof RMStateStoreAppAttemptEvent)) {
         // should never happen
         LOG.error("Illegal event type: " + event.getClass());
-        return RMStateStoreState.ACTIVE;
+        return;
       }
-      boolean isFenced = false;
       ApplicationAttemptStateData attemptState =
           ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();
       try {
@@ -279,24 +248,20 @@ public RMStateStoreState transition(RMStateStore store,
                RMAppAttemptEventType.ATTEMPT_NEW_SAVED));
       } catch (Exception e) {
         LOG.error("Error storing appAttempt: " + attemptState.getAttemptId(), e);
-        isFenced = store.notifyStoreOperationFailedInternal(e);
+        store.notifyStoreOperationFailed(e);
       }
-      return finalState(isFenced);
     };
   }
 
   private static class UpdateAppAttemptTransition implements
-      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
-          RMStateStoreState> {
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
     @Override
-    public RMStateStoreState transition(RMStateStore store,
-        RMStateStoreEvent event) {
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
       if (!(event instanceof RMStateUpdateAppAttemptEvent)) {
         // should never happen
         LOG.error("Illegal event type: " + event.getClass());
-        return RMStateStoreState.ACTIVE;
+        return;
       }
-      boolean isFenced = false;
       ApplicationAttemptStateData attemptState =
           ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();
       try {
@@ -310,24 +275,20 @@ public RMStateStoreState transition(RMStateStore store,
                RMAppAttemptEventType.ATTEMPT_UPDATE_SAVED));
       } catch (Exception e) {
         LOG.error("Error updating appAttempt: " + attemptState.getAttemptId(), e);
-        isFenced = store.notifyStoreOperationFailedInternal(e);
+        store.notifyStoreOperationFailed(e);
       }
-      return finalState(isFenced);
     };
   }
 
   private static class StoreRMDTTransition implements
-      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
-          RMStateStoreState> {
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
     @Override
-    public RMStateStoreState transition(RMStateStore store,
-        RMStateStoreEvent event) {
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
       if (!(event instanceof RMStateStoreRMDTEvent)) {
         // should never happen
         LOG.error("Illegal event type: " + event.getClass());
-        return RMStateStoreState.ACTIVE;
+        return;
       }
-      boolean isFenced = false;
       RMStateStoreRMDTEvent dtEvent = (RMStateStoreRMDTEvent) event;
       try {
         LOG.info("Storing RMDelegationToken and SequenceNumber");
@@ -336,24 +297,20 @@ public RMStateStoreState transition(RMStateStore store,
       } catch (Exception e) {
         LOG.error("Error While Storing RMDelegationToken and SequenceNumber ",
             e);
-        isFenced = store.notifyStoreOperationFailedInternal(e);
+        store.notifyStoreOperationFailed(e);
       }
-      return finalState(isFenced);
     }
   }
 
   private static class RemoveRMDTTransition implements
-      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
-          RMStateStoreState> {
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
     @Override
-    public RMStateStoreState transition(RMStateStore store,
-        RMStateStoreEvent event) {
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
       if (!(event instanceof RMStateStoreRMDTEvent)) {
         // should never happen
         LOG.error("Illegal event type: " + event.getClass());
-        return RMStateStoreState.ACTIVE;
+        return;
       }
-      boolean isFenced = false;
       RMStateStoreRMDTEvent dtEvent = (RMStateStoreRMDTEvent) event;
       try {
         LOG.info("Removing RMDelegationToken and SequenceNumber");
@@ -361,24 +318,21 @@ public RMStateStoreState transition(RMStateStore store,
       } catch (Exception e) {
         LOG.error("Error While Removing RMDelegationToken and SequenceNumber ",
             e);
-        isFenced = store.notifyStoreOperationFailedInternal(e);
+        store.notifyStoreOperationFailed(e);
       }
-      return finalState(isFenced);
     }
   }
 
   private static class UpdateRMDTTransition implements
-      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
-          RMStateStoreState> {
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
     @Override
-    public RMStateStoreState transition(RMStateStore store,
-        RMStateStoreEvent event) {
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
       if (!(event instanceof RMStateStoreRMDTEvent)) {
         // should never happen
         LOG.error("Illegal event type: " + event.getClass());
-        return RMStateStoreState.ACTIVE;
+        return;
       }
-      boolean isFenced = false;
+
       RMStateStoreRMDTEvent dtEvent = (RMStateStoreRMDTEvent) event;
       try {
         LOG.info("Updating RMDelegationToken and SequenceNumber");
@@ -387,24 +341,20 @@ public RMStateStoreState transition(RMStateStore store,
       } catch (Exception e) {
         LOG.error("Error While Updating RMDelegationToken and SequenceNumber ",
             e);
-        isFenced = store.notifyStoreOperationFailedInternal(e);
+        store.notifyStoreOperationFailed(e);
       }
-      return finalState(isFenced);
     }
   }
 
   private static class StoreRMDTMasterKeyTransition implements
-      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
-          RMStateStoreState> {
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
     @Override
-    public RMStateStoreState transition(RMStateStore store,
-        RMStateStoreEvent event) {
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
       if (!(event instanceof RMStateStoreRMDTMasterKeyEvent)) {
         // should never happen
         LOG.error("Illegal event type: " + event.getClass());
-        return RMStateStoreState.ACTIVE;
+        return;
       }
-      boolean isFenced = false;
       RMStateStoreRMDTMasterKeyEvent dtEvent =
           (RMStateStoreRMDTMasterKeyEvent) event;
       try {
@@ -412,24 +362,20 @@ public RMStateStoreState transition(RMStateStore store,
         store.storeRMDTMasterKeyState(dtEvent.getDelegationKey());
       } catch (Exception e) {
         LOG.error("Error While Storing RMDTMasterKey.", e);
-        isFenced = store.notifyStoreOperationFailedInternal(e);
+        store.notifyStoreOperationFailed(e);
       }
-      return finalState(isFenced);
     }
   }
 
   private static class RemoveRMDTMasterKeyTransition implements
-      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
-          RMStateStoreState> {
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
     @Override
-    public RMStateStoreState transition(RMStateStore store,
-        RMStateStoreEvent event) {
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
       if (!(event instanceof RMStateStoreRMDTMasterKeyEvent)) {
         // should never happen
         LOG.error("Illegal event type: " + event.getClass());
-        return RMStateStoreState.ACTIVE;
+        return;
       }
-      boolean isFenced = false;
       RMStateStoreRMDTMasterKeyEvent dtEvent =
           (RMStateStoreRMDTMasterKeyEvent) event;
       try {
@@ -437,41 +383,33 @@ public RMStateStoreState transition(RMStateStore store,
         store.removeRMDTMasterKeyState(dtEvent.getDelegationKey());
       } catch (Exception e) {
         LOG.error("Error While Removing RMDTMasterKey.", e);
-        isFenced = store.notifyStoreOperationFailedInternal(e);
+        store.notifyStoreOperationFailed(e);
       }
-      return finalState(isFenced);
     }
   }
 
   private static class StoreOrUpdateAMRMTokenTransition implements
-      MultipleArcTransition<RMStateStore, RMStateStoreEvent,
-          RMStateStoreState> {
+      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
     @Override
-    public RMStateStoreState transition(RMStateStore store,
-        RMStateStoreEvent event) {
+    public void transition(RMStateStore store, RMStateStoreEvent event) {
       if (!(event instanceof RMStateStoreAMRMTokenEvent)) {
         // should never happen
         LOG.error("Illegal event type: " + event.getClass());
-        return RMStateStoreState.ACTIVE;
+        return;
       }
       RMStateStoreAMRMTokenEvent amrmEvent = (RMStateStoreAMRMTokenEvent) event;
-      boolean isFenced = false;
+
       try {
         LOG.info("Updating AMRMToken");
         store.storeOrUpdateAMRMTokenSecretManagerState(
             amrmEvent.getAmrmTokenSecretManagerState(), amrmEvent.isUpdate());
       } catch (Exception e) {
         LOG.error("Error storing info for AMRMTokenSecretManager", e);
-        isFenced = store.notifyStoreOperationFailedInternal(e);
+        store.notifyStoreOperationFailed(e);
       }
-      return finalState(isFenced);
     }
   }
 
-  private static RMStateStoreState finalState(boolean isFenced) {
-    return isFenced ? RMStateStoreState.FENCED : RMStateStoreState.ACTIVE;
-  }
-
   public RMStateStore() {
     super(RMStateStore.class.getName());
     ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
@@ -907,28 +845,17 @@ protected void handleStoreEvent(RMStateStoreEvent event) {
     }
   }
 
+  @SuppressWarnings("unchecked")
   /**
    * This method is called to notify the ResourceManager that the store
    * operation has failed.
    * @param failureCause the exception due to which the operation failed
    */
   protected void notifyStoreOperationFailed(Exception failureCause) {
-    if (isFencedState()) {
-      return;
-    }
-    if (notifyStoreOperationFailedInternal(failureCause)) {
-      updateFencedState();
-    }
-  }
-
-  @SuppressWarnings("unchecked")
-  private boolean notifyStoreOperationFailedInternal(
-      Exception failureCause) {
-    boolean isFenced = false;
     LOG.error("State store operation failed ", failureCause);
     if (HAUtil.isHAEnabled(getConfig())) {
       LOG.warn("State-store fenced ! Transitioning RM to standby");
-      isFenced = true;
+      updateFencedState();
       Thread standByTransitionThread =
           new Thread(new StandByTransitionThread());
       standByTransitionThread.setName("StandByTransitionThread Handler");
@@ -941,7 +868,6 @@ private boolean notifyStoreOperationFailedInternal(
     } else {
       LOG.warn("Skip the state-store error.");
     }
-    return isFenced;
   }
  
   @SuppressWarnings("unchecked")
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestMemoryRMStateStore.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestMemoryRMStateStore.java
deleted file mode 100644
index 89b9e2b..0000000
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestMemoryRMStateStore.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.yarn.server.resourcemanager.recovery;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.yarn.conf.YarnConfiguration;
-import org.apache.hadoop.yarn.security.client.RMDelegationTokenIdentifier;
-import org.apache.hadoop.yarn.server.resourcemanager.ResourceManager;
-import org.junit.Test;
-
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-
-public class TestMemoryRMStateStore {
-
-  @Test
-  public void testNotifyStoreOperationFailed() throws Exception {
-    RMStateStore store = new MemoryRMStateStore() {
-      @Override
-      public synchronized void removeRMDelegationTokenState(
-          RMDelegationTokenIdentifier rmDTIdentifier) throws Exception {
-        throw new Exception("testNotifyStoreOperationFailed");
-      }
-    };
-    Configuration conf = new Configuration();
-    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);
-    store.init(conf);
-    ResourceManager mockRM = mock(ResourceManager.class);
-    store.setResourceManager(mockRM);
-    RMDelegationTokenIdentifier mockTokenId =
-        mock(RMDelegationTokenIdentifier.class);
-    store.removeRMDelegationToken(mockTokenId);
-    assertTrue("RMStateStore should have been in fenced state",
-        store.isFencedState());
-    store = new MemoryRMStateStore() {
-      @Override
-      public synchronized void removeRMDelegationToken(
-          RMDelegationTokenIdentifier rmDTIdentifier) {
-        notifyStoreOperationFailed(new Exception(
-            "testNotifyStoreOperationFailed"));
-      }
-    };
-    store.init(conf);
-    store.setResourceManager(mockRM);
-    store.removeRMDelegationToken(mockTokenId);
-    assertTrue("RMStateStore should have been in fenced state",
-        store.isFencedState());
-  }
-}
-- 
1.7.9.5

