From a374c0bad006f4810c238db2b9ae64f608f54354 Mon Sep 17 00:00:00 2001
From: Yufei Gu <yufei@apache.org>
Date: Thu, 24 Aug 2017 17:52:41 -0700
Subject: [PATCH 2650/2748] YARN-7049. FSAppAttempt preemption related fields
 have confusing names. (Contributed by Karthik
 Kambatla via Yufei Gu)

(cherry picked from commit 9e2699ac2c99d8df85191dd7fbf9468b00f5b5aa)
(cherry picked from commit 389b659c940979727a30c10114e982817b75ea26)

Change-Id: I80183cef6ecd5d41c83eab372e8c94b403e21fc8
---
 .../scheduler/fair/FSAppAttempt.java               |   22 +++++++++++---------
 1 file changed, 12 insertions(+), 10 deletions(-)

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
index e122253..105449d 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
@@ -82,8 +82,9 @@
 
   // Preemption related variables
   private final Object preemptionVariablesLock = new Object();
-  private final Resource preemptedResources = Resources.clone(Resources.none());
-  private final Set<RMContainer> containersToPreempt = new HashSet<>();
+  private final Set<RMContainer> containersToBePreempted = new HashSet<>();
+  private final Resource resourcesToBePreempted =
+      Resources.clone(Resources.none());
 
   private Resource fairshareStarvation = Resources.none();
   private long lastTimeAtFairShare;
@@ -479,16 +480,17 @@ void resetMinshareStarvation() {
 
   void trackContainerForPreemption(RMContainer container) {
     synchronized (preemptionVariablesLock) {
-      if (containersToPreempt.add(container)) {
-        Resources.addTo(preemptedResources, container.getAllocatedResource());
+      if (containersToBePreempted.add(container)) {
+        Resources.addTo(resourcesToBePreempted,
+            container.getAllocatedResource());
       }
     }
   }
 
   private void untrackContainerForPreemption(RMContainer container) {
     synchronized (preemptionVariablesLock) {
-      if (containersToPreempt.remove(container)) {
-        Resources.subtractFrom(preemptedResources,
+      if (containersToBePreempted.remove(container)) {
+        Resources.subtractFrom(resourcesToBePreempted,
             container.getAllocatedResource());
       }
     }
@@ -497,7 +499,7 @@ private void untrackContainerForPreemption(RMContainer container) {
   Set<ContainerId> getPreemptionContainerIds() {
     synchronized (preemptionVariablesLock) {
       Set<ContainerId> preemptionContainerIds = new HashSet<>();
-      for (RMContainer container : containersToPreempt) {
+      for (RMContainer container : containersToBePreempted) {
         preemptionContainerIds.add(container.getContainerId());
       }
       return preemptionContainerIds;
@@ -514,7 +516,7 @@ boolean canContainerBePreempted(RMContainer container) {
     }
 
     synchronized (preemptionVariablesLock) {
-      if (containersToPreempt.contains(container)) {
+      if (containersToBePreempted.contains(container)) {
         // The container is already under consideration for preemption
         return false;
       }
@@ -1109,9 +1111,9 @@ public Resource getResourceUsage() {
     // Subtract copies the object, so that we have a snapshot,
     // in case usage changes, while the caller is using the value
     synchronized (preemptionVariablesLock) {
-      return containersToPreempt.isEmpty()
+      return containersToBePreempted.isEmpty()
           ? getCurrentConsumption()
-          : Resources.subtract(getCurrentConsumption(), preemptedResources);
+          : Resources.subtract(getCurrentConsumption(), resourcesToBePreempted);
     }
   }
 
-- 
1.7.9.5

