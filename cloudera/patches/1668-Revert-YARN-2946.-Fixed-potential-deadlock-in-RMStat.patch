From b3f8685948125e85fea18b4554713fcac6c64fd3 Mon Sep 17 00:00:00 2001
From: Daniel Templeton <daniel@cloudera.com>
Date: Mon, 11 Jul 2016 18:44:26 -0700
Subject: [PATCH 1668/2748] Revert "YARN-2946. Fixed potential deadlock in
 RMStateStore. Contributed by Rohith Sharmaks"

This reverts commit 04de176785f8501190852b8aa19b98dccc188540.

Change-Id: I494876c3b4078dffe5b74e7741b998559b3b9a7b
(cherry picked from commit 1264977f3c7416accac1500b8a3d3408c0daf7c6)
(cherry picked from commit fdc4d20b8a5f98c358e4bcb538673c1d9380ff91)
---
 .../recovery/FileSystemRMStateStore.java           |   17 +-
 .../resourcemanager/recovery/RMStateStore.java     |  244 +++-----------------
 .../recovery/RMStateStoreAMRMTokenEvent.java       |   46 ----
 .../recovery/RMStateStoreEventType.java            |   10 +-
 .../recovery/RMStateStoreRMDTEvent.java            |   45 ----
 .../recovery/RMStateStoreRMDTMasterKeyEvent.java   |   39 ----
 .../resourcemanager/recovery/ZKRMStateStore.java   |   11 +-
 .../security/AMRMTokenSecretManager.java           |   12 +-
 .../yarn/server/resourcemanager/TestRMRestart.java |   10 +-
 .../recovery/RMStateStoreTestBase.java             |    5 +-
 10 files changed, 63 insertions(+), 376 deletions(-)
 delete mode 100644 hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreAMRMTokenEvent.java
 delete mode 100644 hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreRMDTEvent.java
 delete mode 100644 hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreRMDTMasterKeyEvent.java

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java
index 194ec69..192157c 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java
@@ -618,17 +618,22 @@ Path getNodePath(Path root, String nodeName) {
 
   @Override
   public synchronized void storeOrUpdateAMRMTokenSecretManagerState(
-      AMRMTokenSecretManagerState amrmTokenSecretManagerState, boolean isUpdate)
-      throws Exception {
+      AMRMTokenSecretManagerState amrmTokenSecretManagerState,
+      boolean isUpdate){
     Path nodeCreatePath =
         getNodePath(amrmTokenSecretManagerRoot, AMRMTOKEN_SECRET_MANAGER_NODE);
     AMRMTokenSecretManagerState data =
         AMRMTokenSecretManagerState.newInstance(amrmTokenSecretManagerState);
     byte[] stateData = data.getProto().toByteArray();
-    if (isUpdate) {
-      updateFile(nodeCreatePath, stateData);
-    } else {
-      writeFile(nodeCreatePath, stateData);
+    try {
+      if (isUpdate) {
+        updateFile(nodeCreatePath, stateData);
+      } else {
+        writeFile(nodeCreatePath, stateData);
+      }
+    } catch (Exception ex) {
+      LOG.info("Error storing info for AMRMTokenSecretManager", ex);
+      notifyStoreOperationFailed(ex);
     }
   }
 
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
index 67c3eb7..00e4b06 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
@@ -23,9 +23,6 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
 
 import javax.crypto.SecretKey;
 
@@ -88,8 +85,6 @@
   protected static final String VERSION_NODE = "RMVersionNode";
   protected static final String EPOCH_NODE = "EpochNode";
   private ResourceManager resourceManager;
-  private final ReadLock readLock;
-  private final WriteLock writeLock;
 
   public static final Log LOG = LogFactory.getLog(RMStateStore.class);
 
@@ -115,25 +110,7 @@
       .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
           RMStateStoreEventType.STORE_APP_ATTEMPT, new StoreAppAttemptTransition())
       .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
-          RMStateStoreEventType.UPDATE_APP_ATTEMPT, new UpdateAppAttemptTransition())
-      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
-          RMStateStoreEventType.STORE_MASTERKEY,
-              new StoreRMDTMasterKeyTransition())
-      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
-          RMStateStoreEventType.REMOVE_MASTERKEY,
-              new RemoveRMDTMasterKeyTransition())
-      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
-          RMStateStoreEventType.STORE_DELEGATION_TOKEN,
-              new StoreRMDTTransition())
-      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
-          RMStateStoreEventType.REMOVE_DELEGATION_TOKEN,
-              new RemoveRMDTTransition())
-      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
-          RMStateStoreEventType.UPDATE_DELEGATION_TOKEN,
-              new UpdateRMDTTransition())
-       .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
-           RMStateStoreEventType.UPDATE_AMRM_TOKEN,
-              new StoreOrUpdateAMRMTokenTransition());
+          RMStateStoreEventType.UPDATE_APP_ATTEMPT, new UpdateAppAttemptTransition());
 
   private final StateMachine<RMStateStoreState,
                              RMStateStoreEventType,
@@ -266,141 +243,8 @@ public void transition(RMStateStore store, RMStateStoreEvent event) {
     };
   }
 
-  private static class StoreRMDTTransition implements
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
-    @Override
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
-      if (!(event instanceof RMStateStoreRMDTEvent)) {
-        // should never happen
-        LOG.error("Illegal event type: " + event.getClass());
-        return;
-      }
-      RMStateStoreRMDTEvent dtEvent = (RMStateStoreRMDTEvent) event;
-      try {
-        LOG.info("Storing RMDelegationToken and SequenceNumber");
-        store.storeRMDelegationTokenState(
-                dtEvent.getRmDTIdentifier(), dtEvent.getRenewDate());
-      } catch (Exception e) {
-        LOG.error("Error While Storing RMDelegationToken and SequenceNumber ",
-            e);
-        store.notifyStoreOperationFailed(e);
-      }
-    }
-  }
-
-  private static class RemoveRMDTTransition implements
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
-    @Override
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
-      if (!(event instanceof RMStateStoreRMDTEvent)) {
-        // should never happen
-        LOG.error("Illegal event type: " + event.getClass());
-        return;
-      }
-      RMStateStoreRMDTEvent dtEvent = (RMStateStoreRMDTEvent) event;
-      try {
-        LOG.info("Removing RMDelegationToken and SequenceNumber");
-        store.removeRMDelegationTokenState(dtEvent.getRmDTIdentifier());
-      } catch (Exception e) {
-        LOG.error("Error While Removing RMDelegationToken and SequenceNumber ",
-            e);
-        store.notifyStoreOperationFailed(e);
-      }
-    }
-  }
-
-  private static class UpdateRMDTTransition implements
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
-    @Override
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
-      if (!(event instanceof RMStateStoreRMDTEvent)) {
-        // should never happen
-        LOG.error("Illegal event type: " + event.getClass());
-        return;
-      }
-
-      RMStateStoreRMDTEvent dtEvent = (RMStateStoreRMDTEvent) event;
-      try {
-        LOG.info("Updating RMDelegationToken and SequenceNumber");
-        store.updateRMDelegationTokenState(
-                dtEvent.getRmDTIdentifier(), dtEvent.getRenewDate());
-      } catch (Exception e) {
-        LOG.error("Error While Updating RMDelegationToken and SequenceNumber ",
-            e);
-        store.notifyStoreOperationFailed(e);
-      }
-    }
-  }
-
-  private static class StoreRMDTMasterKeyTransition implements
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
-    @Override
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
-      if (!(event instanceof RMStateStoreRMDTMasterKeyEvent)) {
-        // should never happen
-        LOG.error("Illegal event type: " + event.getClass());
-        return;
-      }
-      RMStateStoreRMDTMasterKeyEvent dtEvent =
-          (RMStateStoreRMDTMasterKeyEvent) event;
-      try {
-        LOG.info("Storing RMDTMasterKey.");
-        store.storeRMDTMasterKeyState(dtEvent.getDelegationKey());
-      } catch (Exception e) {
-        LOG.error("Error While Storing RMDTMasterKey.", e);
-        store.notifyStoreOperationFailed(e);
-      }
-    }
-  }
-
-  private static class RemoveRMDTMasterKeyTransition implements
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
-    @Override
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
-      if (!(event instanceof RMStateStoreRMDTMasterKeyEvent)) {
-        // should never happen
-        LOG.error("Illegal event type: " + event.getClass());
-        return;
-      }
-      RMStateStoreRMDTMasterKeyEvent dtEvent =
-          (RMStateStoreRMDTMasterKeyEvent) event;
-      try {
-        LOG.info("Removing RMDTMasterKey.");
-        store.removeRMDTMasterKeyState(dtEvent.getDelegationKey());
-      } catch (Exception e) {
-        LOG.error("Error While Removing RMDTMasterKey.", e);
-        store.notifyStoreOperationFailed(e);
-      }
-    }
-  }
-
-  private static class StoreOrUpdateAMRMTokenTransition implements
-      SingleArcTransition<RMStateStore, RMStateStoreEvent> {
-    @Override
-    public void transition(RMStateStore store, RMStateStoreEvent event) {
-      if (!(event instanceof RMStateStoreAMRMTokenEvent)) {
-        // should never happen
-        LOG.error("Illegal event type: " + event.getClass());
-        return;
-      }
-      RMStateStoreAMRMTokenEvent amrmEvent = (RMStateStoreAMRMTokenEvent) event;
-
-      try {
-        LOG.info("Updating AMRMToken");
-        store.storeOrUpdateAMRMTokenSecretManagerState(
-            amrmEvent.getAmrmTokenSecretManagerState(), amrmEvent.isUpdate());
-      } catch (Exception e) {
-        LOG.error("Error storing info for AMRMTokenSecretManager", e);
-        store.notifyStoreOperationFailed(e);
-      }
-    }
-  }
-
   public RMStateStore() {
     super(RMStateStore.class.getName());
-    ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
-    this.readLock = lock.readLock();
-    this.writeLock = lock.writeLock();
     stateMachine = stateMachineFactory.make(this);
   }
 
@@ -648,10 +492,13 @@ protected abstract void updateApplicationAttemptStateInternal(
    * RMDTSecretManager call this to store the state of a delegation token
    * and sequence number
    */
-  public void storeRMDelegationToken(
+  public synchronized void storeRMDelegationToken(
       RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate) {
-    handleStoreEvent(new RMStateStoreRMDTEvent(rmDTIdentifier, renewDate,
-         RMStateStoreEventType.STORE_DELEGATION_TOKEN));
+    try {
+      storeRMDelegationTokenState(rmDTIdentifier, renewDate);
+    } catch (Exception e) {
+      notifyStoreOperationFailed(e);
+    }
   }
 
   /**
@@ -666,10 +513,13 @@ protected abstract void storeRMDelegationTokenState(
   /**
    * RMDTSecretManager call this to remove the state of a delegation token
    */
-  public void removeRMDelegationToken(
+  public synchronized void removeRMDelegationToken(
       RMDelegationTokenIdentifier rmDTIdentifier) {
-    handleStoreEvent(new RMStateStoreRMDTEvent(rmDTIdentifier, null,
-         RMStateStoreEventType.REMOVE_DELEGATION_TOKEN));
+    try {
+      removeRMDelegationTokenState(rmDTIdentifier);
+    } catch (Exception e) {
+      notifyStoreOperationFailed(e);
+    }
   }
 
   /**
@@ -683,10 +533,13 @@ protected abstract void removeRMDelegationTokenState(
    * RMDTSecretManager call this to update the state of a delegation token
    * and sequence number
    */
-  public void updateRMDelegationToken(
+  public synchronized void updateRMDelegationToken(
       RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate) {
-    handleStoreEvent(new RMStateStoreRMDTEvent(rmDTIdentifier, renewDate,
-        RMStateStoreEventType.UPDATE_DELEGATION_TOKEN));
+    try {
+      updateRMDelegationTokenState(rmDTIdentifier, renewDate);
+    } catch (Exception e) {
+      notifyStoreOperationFailed(e);
+    }
   }
 
   /**
@@ -701,9 +554,12 @@ protected abstract void updateRMDelegationTokenState(
   /**
    * RMDTSecretManager call this to store the state of a master key
    */
-  public void storeRMDTMasterKey(DelegationKey delegationKey) {
-    handleStoreEvent(new RMStateStoreRMDTMasterKeyEvent(delegationKey,
-        RMStateStoreEventType.STORE_MASTERKEY));
+  public synchronized void storeRMDTMasterKey(DelegationKey delegationKey) {
+    try {
+      storeRMDTMasterKeyState(delegationKey);
+    } catch (Exception e) {
+      notifyStoreOperationFailed(e);
+    }
   }
 
   /**
@@ -717,9 +573,12 @@ protected abstract void storeRMDTMasterKeyState(DelegationKey delegationKey)
   /**
    * RMDTSecretManager call this to remove the state of a master key
    */
-  public void removeRMDTMasterKey(DelegationKey delegationKey) {
-    handleStoreEvent(new RMStateStoreRMDTMasterKeyEvent(delegationKey,
-        RMStateStoreEventType.REMOVE_MASTERKEY));
+  public synchronized void removeRMDTMasterKey(DelegationKey delegationKey) {
+    try {
+      removeRMDTMasterKeyState(delegationKey);
+    } catch (Exception e) {
+      notifyStoreOperationFailed(e);
+    }
   }
 
   /**
@@ -734,19 +593,9 @@ protected abstract void removeRMDTMasterKeyState(DelegationKey delegationKey)
    * Blocking API Derived classes must implement this method to store or update
    * the state of AMRMToken Master Key
    */
-  protected abstract void storeOrUpdateAMRMTokenSecretManagerState(
-      AMRMTokenSecretManagerState amrmTokenSecretManagerState, boolean isUpdate)
-      throws Exception;
-
-  /**
-   * Store or Update state of AMRMToken Master Key
-   */
-  public void storeOrUpdateAMRMTokenSecretManager(
-      AMRMTokenSecretManagerState amrmTokenSecretManagerState, boolean isUpdate) {
-    handleStoreEvent(new RMStateStoreAMRMTokenEvent(
-        amrmTokenSecretManagerState, isUpdate,
-        RMStateStoreEventType.UPDATE_AMRM_TOKEN));
-  }
+  public abstract void storeOrUpdateAMRMTokenSecretManagerState(
+      AMRMTokenSecretManagerState amrmTokenSecretManagerState,
+      boolean isUpdate);
 
   /**
    * Non-blocking API
@@ -798,26 +647,10 @@ public Credentials getCredentialsFromAppAttempt(RMAppAttempt appAttempt) {
 
   // Dispatcher related code
   protected void handleStoreEvent(RMStateStoreEvent event) {
-    this.writeLock.lock();
     try {
-
-      if (LOG.isDebugEnabled()) {
-        LOG.debug("Processing event of type " + event.getType());
-      }
-
-      final RMStateStoreState oldState = getRMStateStoreState();
-
       this.stateMachine.doTransition(event.getType(), event);
-
-      if (oldState != getRMStateStoreState()) {
-        LOG.info("RMStateStore state change from " + oldState + " to "
-            + getRMStateStoreState());
-      }
-
     } catch (InvalidStateTransitonException e) {
       LOG.error("Can't handle this event at current state", e);
-    } finally {
-      this.writeLock.unlock();
     }
   }
 
@@ -903,13 +736,4 @@ public void run() {
       resourceManager.handleTransitionToStandBy();
     }
   }
-
-  public RMStateStoreState getRMStateStoreState() {
-    this.readLock.lock();
-    try {
-      return this.stateMachine.getCurrentState();
-    } finally {
-      this.readLock.unlock();
-    }
-  }
 }
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreAMRMTokenEvent.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreAMRMTokenEvent.java
deleted file mode 100644
index befec06..0000000
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreAMRMTokenEvent.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.yarn.server.resourcemanager.recovery;
-
-import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.AMRMTokenSecretManagerState;
-
-public class RMStateStoreAMRMTokenEvent extends RMStateStoreEvent {
-  private AMRMTokenSecretManagerState amrmTokenSecretManagerState;
-  private boolean isUpdate;
-
-  public RMStateStoreAMRMTokenEvent(RMStateStoreEventType type) {
-    super(type);
-  }
-
-  public RMStateStoreAMRMTokenEvent(
-      AMRMTokenSecretManagerState amrmTokenSecretManagerState,
-      boolean isUpdate, RMStateStoreEventType type) {
-    this(type);
-    this.amrmTokenSecretManagerState = amrmTokenSecretManagerState;
-    this.isUpdate = isUpdate;
-  }
-
-  public AMRMTokenSecretManagerState getAmrmTokenSecretManagerState() {
-    return amrmTokenSecretManagerState;
-  }
-
-  public boolean isUpdate() {
-    return isUpdate;
-  }
-}
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
index e640426..903f4e7 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
@@ -23,13 +23,5 @@
   STORE_APP,
   UPDATE_APP,
   UPDATE_APP_ATTEMPT,
-  REMOVE_APP,
-
-  // Below events should be called synchronously
-  STORE_MASTERKEY,
-  REMOVE_MASTERKEY,
-  STORE_DELEGATION_TOKEN,
-  REMOVE_DELEGATION_TOKEN,
-  UPDATE_DELEGATION_TOKEN,
-  UPDATE_AMRM_TOKEN
+  REMOVE_APP
 }
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreRMDTEvent.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreRMDTEvent.java
deleted file mode 100644
index 37dba7a..0000000
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreRMDTEvent.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.yarn.server.resourcemanager.recovery;
-
-import org.apache.hadoop.yarn.security.client.RMDelegationTokenIdentifier;
-
-public class RMStateStoreRMDTEvent extends RMStateStoreEvent {
-  private RMDelegationTokenIdentifier rmDTIdentifier;
-  private Long renewDate;
-
-  public RMStateStoreRMDTEvent(RMStateStoreEventType type) {
-    super(type);
-  }
-
-  public RMStateStoreRMDTEvent(RMDelegationTokenIdentifier rmDTIdentifier,
-      Long renewDate, RMStateStoreEventType type) {
-    this(type);
-    this.rmDTIdentifier = rmDTIdentifier;
-    this.renewDate = renewDate;
-  }
-
-  public RMDelegationTokenIdentifier getRmDTIdentifier() {
-    return rmDTIdentifier;
-  }
-
-  public Long getRenewDate() {
-    return renewDate;
-  }
-}
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreRMDTMasterKeyEvent.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreRMDTMasterKeyEvent.java
deleted file mode 100644
index c10b197..0000000
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreRMDTMasterKeyEvent.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.yarn.server.resourcemanager.recovery;
-
-import org.apache.hadoop.security.token.delegation.DelegationKey;
-
-public class RMStateStoreRMDTMasterKeyEvent extends RMStateStoreEvent {
-  private DelegationKey delegationKey;
-
-  public RMStateStoreRMDTMasterKeyEvent(RMStateStoreEventType type) {
-    super(type);
-  }
-
-  public RMStateStoreRMDTMasterKeyEvent(DelegationKey delegationKey,
-      RMStateStoreEventType type) {
-    this(type);
-    this.delegationKey = delegationKey;
-  }
-
-  public DelegationKey getDelegationKey() {
-    return delegationKey;
-  }
-}
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
index 38380bb..da129dd 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
@@ -1260,12 +1260,17 @@ protected synchronized ZooKeeper getNewZooKeeper()
 
   @Override
   public synchronized void storeOrUpdateAMRMTokenSecretManagerState(
-      AMRMTokenSecretManagerState amrmTokenSecretManagerState, boolean isUpdate)
-      throws Exception {
+      AMRMTokenSecretManagerState amrmTokenSecretManagerState,
+      boolean isUpdate) {
     AMRMTokenSecretManagerState data =
         AMRMTokenSecretManagerState.newInstance(amrmTokenSecretManagerState);
     byte[] stateData = data.getProto().toByteArray();
-    setDataWithRetries(amrmTokenSecretManagerRoot, stateData, -1);
+    try {
+      setDataWithRetries(amrmTokenSecretManagerRoot, stateData, -1);
+    } catch (Exception ex) {
+      LOG.info("Error storing info for AMRMTokenSecretManager", ex);
+      notifyStoreOperationFailed(ex);
+    }
   }
 
   /**
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/AMRMTokenSecretManager.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/AMRMTokenSecretManager.java
index c717ea9..5614338 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/AMRMTokenSecretManager.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/AMRMTokenSecretManager.java
@@ -107,8 +107,8 @@ public void start() {
       AMRMTokenSecretManagerState state =
           AMRMTokenSecretManagerState.newInstance(
             this.currentMasterKey.getMasterKey(), null);
-      rmContext.getStateStore().storeOrUpdateAMRMTokenSecretManager(state,
-          false);
+      rmContext.getStateStore().storeOrUpdateAMRMTokenSecretManagerState(state,
+        false);
     }
     this.timer.scheduleAtFixedRate(new MasterKeyRoller(), rollingInterval,
       rollingInterval);
@@ -145,8 +145,8 @@ void rollMasterKey() {
           AMRMTokenSecretManagerState.newInstance(
             this.currentMasterKey.getMasterKey(),
             this.nextMasterKey.getMasterKey());
-      rmContext.getStateStore()
-          .storeOrUpdateAMRMTokenSecretManager(state, true);
+      rmContext.getStateStore().storeOrUpdateAMRMTokenSecretManagerState(state,
+        true);
       this.timer.schedule(new NextKeyActivator(), this.activationDelay);
     } finally {
       this.writeLock.unlock();
@@ -170,8 +170,8 @@ public void activateNextMasterKey() {
       AMRMTokenSecretManagerState state =
           AMRMTokenSecretManagerState.newInstance(
             this.currentMasterKey.getMasterKey(), null);
-      rmContext.getStateStore()
-          .storeOrUpdateAMRMTokenSecretManager(state, true);
+      rmContext.getStateStore().storeOrUpdateAMRMTokenSecretManagerState(state,
+        true);
     } finally {
       this.writeLock.unlock();
     }
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMRestart.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMRestart.java
index cb9bcc2..1e94a03 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMRestart.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMRestart.java
@@ -88,10 +88,7 @@
 import org.apache.hadoop.yarn.server.resourcemanager.recovery.MemoryRMStateStore;
 import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStore;
 import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStore.RMState;
-import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStoreAMRMTokenEvent;
 import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStoreEvent;
-import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStoreRMDTEvent;
-import org.apache.hadoop.yarn.server.resourcemanager.recovery.RMStateStoreRMDTMasterKeyEvent;
 import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.ApplicationAttemptStateData;
 import org.apache.hadoop.yarn.server.resourcemanager.recovery.records.ApplicationStateData;
 import org.apache.hadoop.yarn.server.resourcemanager.rmapp.RMApp;
@@ -1469,12 +1466,7 @@ public void serviceStop() throws Exception {
       @Override
       protected void handleStoreEvent(RMStateStoreEvent event) {
         // Block app saving request.
-        // Skip if synchronous updation of DTToken
-        if (!(event instanceof RMStateStoreAMRMTokenEvent)
-            && !(event instanceof RMStateStoreRMDTEvent)
-            && !(event instanceof RMStateStoreRMDTMasterKeyEvent)) {
-          while (wait);
-        }
+        while (wait);
         super.handleStoreEvent(event);
       }
     };
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreTestBase.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreTestBase.java
index 71e3136..3710525 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreTestBase.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreTestBase.java
@@ -628,8 +628,7 @@ public void testAMRMTokenSecretManagerStateStore(
     AMRMTokenSecretManagerState state1 =
         AMRMTokenSecretManagerState.newInstance(
           firstMasterKeyData.getMasterKey(), null);
-    rmContext.getStateStore()
-        .storeOrUpdateAMRMTokenSecretManager(state1,
+    rmContext.getStateStore().storeOrUpdateAMRMTokenSecretManagerState(state1,
       false);
 
     // load state
@@ -648,7 +647,7 @@ public void testAMRMTokenSecretManagerStateStore(
         AMRMTokenSecretManagerState
           .newInstance(firstMasterKeyData.getMasterKey(),
             secondMasterKeyData.getMasterKey());
-    rmContext.getStateStore().storeOrUpdateAMRMTokenSecretManager(state2,
+    rmContext.getStateStore().storeOrUpdateAMRMTokenSecretManagerState(state2,
       true);
 
     // load state
-- 
1.7.9.5

