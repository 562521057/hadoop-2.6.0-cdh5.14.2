From e20e18ec1818af29ac222d24acddf7e2ec01aded Mon Sep 17 00:00:00 2001
From: Jason Lowe <jlowe@apache.org>
Date: Wed, 29 Jul 2015 15:25:10 +0000
Subject: [PATCH 1315/2748] HADOOP-10945. 4-digit octal umask permissions
 throws a parse error. Contributed by Chang Li

(cherry picked from commit 6f0a35724f0da80146dbae4b6f6c341e1d3101f5)
(cherry picked from commit e6b4714d0b87a0fcefe1994fcc34fc88001c2486)

Change-Id: Id1aae7aa48805543f11ca332a0affac6c6ca81b3
---
 .../apache/hadoop/fs/permission/UmaskParser.java   |    2 +-
 .../org/apache/hadoop/security/TestPermission.java |   26 ++++++++++++++++++++
 2 files changed, 27 insertions(+), 1 deletion(-)

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/UmaskParser.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/UmaskParser.java
index 79956c5..0cf26c5 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/UmaskParser.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/UmaskParser.java
@@ -33,7 +33,7 @@
 @InterfaceStability.Unstable
 class UmaskParser extends PermissionParser {
   private static Pattern chmodOctalPattern =
-    Pattern.compile("^\\s*[+]?()([0-7]{3})\\s*$"); // no leading 1 for sticky bit
+    Pattern.compile("^\\s*[+]?(0*)([0-7]{3})\\s*$"); // no leading 1 for sticky bit
   private static Pattern umaskSymbolicPattern =    /* not allow X or t */
     Pattern.compile("\\G\\s*([ugoa]*)([+=-]+)([rwx]*)([,\\s]*)\\s*");
   final short umaskMode;
diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/security/TestPermission.java b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/security/TestPermission.java
index 06150d7..01398a0 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/security/TestPermission.java
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/security/TestPermission.java
@@ -20,6 +20,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
 import java.io.IOException;
 import java.util.Random;
@@ -100,6 +101,31 @@ public void testBackwardCompatibility() {
     conf = new Configuration();
     conf.set(FsPermission.UMASK_LABEL, "022");
     assertEquals(18, FsPermission.getUMask(conf).toShort());
+
+    // Test 5 - equivalent valid umask
+    conf = new Configuration();
+    conf.set(FsPermission.UMASK_LABEL, "0022");
+    assertEquals(18, FsPermission.getUMask(conf).toShort());
+
+    // Test 6 - invalid umask
+    conf = new Configuration();
+    conf.set(FsPermission.UMASK_LABEL, "1222");
+    try {
+      FsPermission.getUMask(conf);
+      fail("expect IllegalArgumentException happen");
+    } catch (IllegalArgumentException e) {
+     //pass, exception successfully trigger
+    }
+
+    // Test 7 - invalid umask
+    conf = new Configuration();
+    conf.set(FsPermission.UMASK_LABEL, "01222");
+    try {
+      FsPermission.getUMask(conf);
+      fail("expect IllegalArgumentException happen");
+    } catch (IllegalArgumentException e) {
+     //pass, exception successfully trigger
+    }
   }
 
   @Test
-- 
1.7.9.5

